<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="2625" failures="16" errors="0" time="16.584151371">
    <testsuite name="src/index.test.ts" timestamp="2025-10-08T23:26:53.839Z" hostname="uby" tests="1" failures="0" errors="0" skipped="0" time="0.002381352">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.001284614">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-10-08T23:26:53.840Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.007107176">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.002136378">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.000332615">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000181595">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.000170284">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.000095396">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.000172259">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.000175845">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.000206221">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.000385402">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.000196734">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.000117617">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle Content" time="0.000193488">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of Contents" time="0.00011356">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle Part" time="0.000121384">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of Parts" time="0.000079267">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle string" time="0.000106117">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of strings" time="0.000105685">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should convert thought parts to text parts for API compatibility" time="0.000257556">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should combine text and thought for text parts with thoughts" time="0.000153103">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should preserve non-thought properties while removing thought" time="0.000191053">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should convert invalid text content to valid text part with thought" time="0.000090076">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-10-08T23:26:53.841Z" hostname="uby" tests="15" failures="0" errors="0" skipped="0" time="0.058036939">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform a web login" time="0.011261334">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform login with user code" time="0.004731385">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should attempt to load cached credentials first" time="0.004806904">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should use Compute to get a client if no cached credentials exist" time="0.002748169">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should not cache the credentials after fetching them via ADC" time="0.001072623">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should return the Compute client on successful ADC authentication" time="0.000851454">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should throw an error if ADC fails" time="0.001979078">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; credential loading order &gt; should prioritize default cached credentials over GOOGLE_APPLICATION_CREDENTIALS" time="0.001499802">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; credential loading order &gt; should fall back to GOOGLE_APPLICATION_CREDENTIALS if default cache is missing" time="0.001297889">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should use GOOGLE_CLOUD_ACCESS_TOKEN when GOOGLE_GENAI_USE_GCA is true" time="0.001243759">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should not use GCP token if GOOGLE_CLOUD_ACCESS_TOKEN is not set" time="0.001147981">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should not use GCP token if GOOGLE_GENAI_USE_GCA is not set" time="0.002962877">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; clearCachedCredentialFile &gt; should clear cached credentials and Google account" time="0.009677026">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; clearCachedCredentialFile &gt; should handle Qwen module clearing gracefully" time="0.007546669">
            <system-err>
Failed to clear cached credentials: Error: ENOENT: no such file or directory, open &apos;/tmp/qwen-code-test-home-LkZpeK/.qwen/google_accounts.json&apos;
[90m    at open (node:internal/fs/promises:642:25)[39m
[90m    at Object.writeFile (node:internal/fs/promises:1249:14)[39m
    at UserAccountManager.clearCachedGoogleAccount [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/userAccountManager.ts:138:5[90m)[39m
    at Module.clearCachedCredentialFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/code_assist/oauth2.ts:395:5[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/code_assist/oauth2.test.ts:572:7
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/tmp/qwen-code-test-home-LkZpeK/.qwen/google_accounts.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; clearCachedCredentialFile &gt; should clear the in-memory OAuth client cache" time="0.003616264">
            <system-out>
Loaded cached credentials.

Loaded cached credentials.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-10-08T23:26:53.842Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.018540588">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.003413119">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.004283988">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.002132872">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.002258865">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.001681358">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.001323877">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.002256511">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/setup.test.ts" timestamp="2025-10-08T23:26:53.842Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.018048339">
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should use GOOGLE_CLOUD_PROJECT when set and project from server is undefined" time="0.008651751">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should ignore GOOGLE_CLOUD_PROJECT when project from server is set" time="0.001165875">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.003377323">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should use GOOGLE_CLOUD_PROJECT when set and onboard a new paid user" time="0.001708428">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should onboard a new free user when GOOGLE_CLOUD_PROJECT is not set" time="0.000717707">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should use GOOGLE_CLOUD_PROJECT when onboard response has no project ID" time="0.000436667">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.000462865">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-10-08T23:26:53.842Z" hostname="uby" tests="48" failures="0" errors="0" skipped="0" time="0.076916524">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if checkpointing is enabled and GitService fails" time="0.007128305">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should not throw an error if checkpointing is disabled and GitService fails" time="0.005772209">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if initialized more than once" time="0.004164468">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should refresh auth and update config" time="0.002914837">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should preserve conversation history when refreshing auth" time="0.001878311">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should handle case when no existing client is initialized" time="0.001939314">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should strip thoughts when switching from GenAI to Vertex" time="0.001237777">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should not strip thoughts when switching from Vertex to GenAI" time="0.00156879">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; setModel &gt; updates fallback model when content generator config is unavailable" time="0.002164782">
            <system-out>
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.000704682">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.000599228">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.000561518">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.000409296">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.000336231">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.000634763">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should initialize WorkspaceContext with includeDirectories" time="0.001208523">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.000348013">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.000312257">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.000288694">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.000469558">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; defaults usage statistics to enabled if not specified" time="0.015993731">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; sets usage statistics based on the provided value (enabled: true)" time="0.000927684">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; sets usage statistics based on the provided value (enabled: false)" time="0.000580593">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.000521905">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.000434453">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.00029754">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.000284346">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.000229614">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.000239823">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.000231097">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.000201683">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP protocol" time="0.000223223">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP protocol if not provided" time="0.000221099">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP protocol if telemetry object is not provided" time="0.000215669">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should default useRipgrep to false when not provided" time="0.000213795">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should set useRipgrep to true when provided as true" time="0.000288283">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should set useRipgrep to false when explicitly provided as false" time="0.000301287">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should default useRipgrep to false when undefined" time="0.000164324">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; createToolRegistry &gt; should register a tool if coreTools contains an argument-specific pattern" time="0.007323656">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should throw an error when setting YOLO mode in an untrusted folder" time="0.000764262">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should throw an error when setting AUTO_EDIT mode in an untrusted folder" time="0.000421319">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting DEFAULT mode in an untrusted folder" time="0.000315403">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting PLAN mode in an untrusted folder" time="0.000284846">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting any mode in a trusted folder" time="0.001624532">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting any mode if trustedFolder is undefined" time="0.000538405">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; Model Switch Logging &gt; should log model switch when setModel is called with different model" time="0.002750323">
            <system-out>
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; Model Switch Logging &gt; should not log when setModel is called with same model" time="0.001975091">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; Model Switch Logging &gt; should use default reason when no options provided" time="0.002199285">
            <system-out>
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-10-08T23:26:53.844Z" hostname="uby" tests="6" failures="0" errors="0" skipped="0" time="0.029865219">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.026041602">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010660.bak
Logger not initialized or session ID missing. Cannot log message.

Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010662.bak

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at InstallationManager.readInstallationIdFromFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:21:50[90m)[39m
    at InstallationManager.getInstallationId [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:42:33[90m)[39m
    at QwenLogger.generateUserId [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:123:53[90m)[39m
    at new QwenLogger [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:114:24[90m)[39m
    at QwenLogger.getInstance [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:131:29[90m)[39m
    at logCliConfiguration [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/loggers.ts:85:14[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:454:5[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/config/flashFallback.test.ts:22:14
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20

            </system-err>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.000686759">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010663.bak
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fall back to initial model if contentGeneratorConfig is not available" time="0.000731563">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010663.bak

Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010664.bak

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should start as false for new session" time="0.000377789">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010664.bak

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should remain false if no model switch occurs" time="0.000407764">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010664.bak

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should persist switched state throughout session" time="0.0004273">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010665.bak
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/config/storage.test.ts" timestamp="2025-10-08T23:26:53.844Z" hostname="uby" tests="5" failures="0" errors="0" skipped="0" time="0.003935574">
        <testcase classname="src/config/storage.test.ts" name="Storage – getGlobalSettingsPath &gt; returns path to ~/.qwen/settings.json" time="0.00175274">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getWorkspaceSettingsPath returns project/.qwen/settings.json" time="0.000261093">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getUserCommandsDir returns ~/.qwen/commands" time="0.000245454">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getProjectCommandsDir returns project/.qwen/commands" time="0.000139659">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getMcpOAuthTokensPath returns ~/.qwen/mcp-oauth-tokens.json" time="0.000107559">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/detect-ide.test.ts" timestamp="2025-10-08T23:26:53.845Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.00904651">
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should return undefined if TERM_PROGRAM is not vscode" time="0.002771763">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Devin" time="0.000402905">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Replit" time="0.000154385">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cursor" time="0.000130141">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Codespaces" time="0.000115183">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cloud Shell via EDITOR_IN_CLOUD_SHELL" time="0.000132976">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cloud Shell via CLOUD_SHELL" time="0.000112077">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Trae" time="0.000098342">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Firebase Studio via MONOSPACE_ENV" time="0.000117106">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect VSCode when no other IDE is detected and command includes &quot;code&quot;" time="0.000127816">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect VSCodeFork when no other IDE is detected and command does not include &quot;code&quot;" time="0.00013527">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should prioritize other IDEs over VSCode detection" time="0.000116275">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Devin" time="0.000679205">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Replit" time="0.000104042">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Cursor" time="0.00007549">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for CloudShell" time="0.000068407">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Codespaces" time="0.001653406">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for FirebaseStudio" time="0.000130131">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Trae" time="0.000105746">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for VSCode" time="0.000100206">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for VSCodeFork" time="0.000114562">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ide-client.test.ts" timestamp="2025-10-08T23:26:53.845Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.01396948">
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should return invalid if QWEN_CODE_IDE_WORKSPACE_PATH is undefined" time="0.002229311">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should return invalid if QWEN_CODE_IDE_WORKSPACE_PATH is empty" time="0.00079515">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using HTTP when port is provided in config file" time="0.005389652">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using stdio when stdio config is provided in file" time="0.001053728">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via stdio

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should prioritize port over stdio when both are in config file" time="0.000844831">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using HTTP when port is provided in environment variables" time="0.000769302">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using stdio when stdio config is in environment variables" time="0.000594108">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via stdio

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should prioritize file config over environment variables" time="0.00055183">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should be disconnected if no config is found" time="0.000635885">
            <system-err>
[ERROR] [IDEClient] Failed to connect to IDE companion extension in VS Code. Please ensure the extension is running. To install the extension, run /ide install.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ide-installer.test.ts" timestamp="2025-10-08T23:26:53.846Z" hostname="uby" tests="10" failures="0" errors="0" skipped="0" time="0.015133141">
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; getIdeInstaller &gt; returns a VsCodeInstaller for &quot;&apos;vscode&apos;&quot;" time="0.003770679">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; getIdeInstaller &gt; returns a VsCodeInstaller for &quot;&apos;firebasestudio&apos;&quot;" time="0.001431516">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;win32&apos;" time="0.001882389">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;darwin&apos;" time="0.001020065">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;linux&apos;" time="0.000851543">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; installs the extension using code cli" time="0.00174712">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; returns that the cli was installed successfully" time="0.001030915">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; returns that the cli was installed successfully" time="0.000646155">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; should return a failure message if &apos;vscode&apos; is not installed" time="0.000731262">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; should return a failure message if &apos;firebasestudio&apos; is not installed" time="0.000522105">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ideContext.test.ts" timestamp="2025-10-08T23:26:53.846Z" hostname="uby" tests="16" failures="0" errors="0" skipped="0" time="0.010697382">
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should return undefined initially for ide context" time="0.001301776">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should set and retrieve the ide context" time="0.000774722">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should update the ide context when called multiple times" time="0.00015674">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should handle empty string for file path" time="0.000105766">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should notify subscribers when ide context changes" time="0.002600387">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should stop notifying a subscriber after unsubscribe" time="0.000308831">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should clear the ide context" time="0.000151721">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should validate a file with only required fields" time="0.001419023">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should validate a file with all fields" time="0.000288624">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should fail validation if path is missing" time="0.000707848">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should fail validation if timestamp is missing" time="0.000164474">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate an empty context" time="0.000252667">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with an empty workspaceState" time="0.000127175">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with an empty openFiles array" time="0.000306226">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with a valid file" time="0.000170455">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should fail validation with an invalid file" time="0.000132856">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/process-utils.test.ts" timestamp="2025-10-08T23:26:53.847Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.015034929">
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Unix &gt; should traverse up to find the shell and return grandparent process info" time="0.002772915">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Unix &gt; should return parent process info if grandparent lookup fails" time="0.00833191">
            <system-out>
Failed to get process info for pid 800: Error: ps failed
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/ide/process-utils.test.ts:57:32
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should traverse up and find the great-grandchild of the root process" time="0.000490577">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle non-existent process gracefully" time="0.000168552">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle malformed JSON output gracefully" time="0.001350867">
            <system-out>
Failed to get process info for pid 1000: SyntaxError: Unexpected token &apos;j&apos;, &quot;{&quot;invalid&quot;:json}&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at getProcessInfo [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/ide/process-utils.ts:46:16[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at getIdeProcessInfoForWindows [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/ide/process-utils.ts:136:29[90m)[39m

            </system-out>
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle PowerShell errors without crashing the process chain" time="0.000286109">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle partial JSON data with defaults" time="0.00012946">
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-10-08T23:26:53.847Z" hostname="uby" tests="70" failures="12" errors="0" skipped="1" time="0.998121701">
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for non-positive numbers" time="0.002130518">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for a fraction greater than or equal to 1" time="0.000250723">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction in the middle" time="0.000478003">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction that results in the last index" time="0.00022729">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle an empty history" time="0.000161108">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a history with only one item" time="0.0000652">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle history with weird parts" time="0.000079748">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.02034839">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.009078059">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.008655548">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.006471331">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.006576435">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.012808524">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.008758778">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.008519236">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.007929716">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should allow overriding model and config" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.007249679">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.025782414">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; uses the truncated history for compression" time="0.02265319">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; allows compression to be forced/manual after a failure" time="0.027363105">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:611:22
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; yields the result even if the compression inflated the tokens" time="0.009072428">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:624:37
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; does not manipulate the source chat" time="0.019227418">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:637:22
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; restores the history back to the original" time="0.009758878">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:658:24
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; will not attempt to compress context after a failure" time="0.013876658">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:670:22
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; attempts to compress with a maxOutputTokens set to the original token count" time="0.014601878">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:701:20
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.012990901">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:725:35
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; logs a telemetry event when compressing" time="0.011358895">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:765:20
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold with contextPercentageThreshold setting" time="0.009974266">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:801:35
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not compress across a function call response" time="0.013925478">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:854:35
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.015564408">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:896:35
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should use current model from config for token counting after sendMessage" time="0.009983222">
            <failure message="this.config.getEffectiveContextLimit is not a function" type="TypeError">
TypeError: this.config.getEffectiveContextLimit is not a function
 ❯ GeminiClient.tryCompressChat src/core/client.ts:1338:38
 ❯ src/core/client.test.ts:947:35
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; injects a plan mode reminder before user queries when approval mode is PLAN" time="0.017560728">
            <system-out>
[Agent] Starting new prompt: prompt-p...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; emits a compression event when the context was automatically compressed" time="0.013093751">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 2" time="0.015336356">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 4" time="0.012883192">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 3" time="0.012724699">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should include editor context when ideMode is enabled" time="0.011920523">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not add context if ideMode is enabled but no open files" time="0.020942979">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should add context if ideMode is enabled and there is one active file" time="0.009683649">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should add context if ideMode is enabled and there are open files but no active file" time="0.012939116">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.020898927">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.032080183">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

[Agent] Turn 2 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 3 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 4 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 5 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 6 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 7 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 8 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 9 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 10 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 11 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 12 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 13 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 14 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 15 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 16 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 17 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 18 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 19 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 20 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 21 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 22 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 23 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 24 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 25 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 26 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 27 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 28 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 29 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 30 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 31 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 32 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 33 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 34 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 35 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 36 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 37 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 38 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 39 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 40 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 41 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 42 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 43 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 44 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 45 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 46 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 47 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 48 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 49 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 50 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 51 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 52 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 53 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 54 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 55 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 56 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 57 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 58 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 59 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 60 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 61 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 62 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 63 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 64 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 65 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 66 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 67 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 68 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 69 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 70 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 71 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 72 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 73 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 74 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 75 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 76 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 77 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 78 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 79 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 80 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 81 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 82 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 83 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 84 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 85 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 86 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 87 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 88 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 89 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 90 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 91 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 92 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 93 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 94 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 95 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 96 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 97 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 98 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 99 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 100 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 101 (model: test-model)

checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should yield MaxSessionTurns and stop when session turn limit is reached" time="0.014817257">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

[Agent] Turn 2 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 3 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 4 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 5 (model: test-model)

[Agent] Sending request to model...

[Agent] Starting new prompt: prompt-i...
[Agent] Turn 6 (model: test-model)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.023776967">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

[Agent] Turn 2 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 3 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 4 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 5 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 6 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 7 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 8 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 9 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 10 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 11 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 12 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 13 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 14 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 15 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 16 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 17 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 18 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 19 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 20 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 21 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 22 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 23 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 24 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 25 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 26 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 27 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 28 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 29 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 30 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 31 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 32 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 33 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 34 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 35 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 36 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 37 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 38 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 39 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 40 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 41 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 42 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 43 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 44 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 45 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 46 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 47 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 48 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 49 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 50 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 51 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 52 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 53 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 54 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 55 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 56 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 57 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 58 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 59 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 60 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 61 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 62 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 63 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 64 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 65 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 66 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 67 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 68 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 69 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 70 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 71 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 72 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 73 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 74 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 75 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 76 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 77 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 78 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 79 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 80 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 81 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 82 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 83 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 84 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 85 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 86 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 87 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 88 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 89 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 90 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 91 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 92 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 93 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 94 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 95 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 96 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 97 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 98 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 99 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 100 (model: test-model)

[Agent] Sending request to model...

[Agent] Turn 101 (model: test-model)

Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when active file changes&apos;" time="0.013357498">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when cursor line changes&apos;" time="0.016417835">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when cursor character cha…&apos;" time="0.015255847">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text changes&apos;" time="0.013802872">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text is add…&apos;" time="0.011195743">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text is rem…&apos;" time="0.015413379">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;does not send context when nothing ch…&apos;" time="0.020768416">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; sends full context when history is cleared, even if editor state is unchanged" time="0.014109939">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should NOT add IDE context when a tool call is pending" time="0.019279825">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should add IDE context when no tool call is pending" time="0.020540906">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should send the latest IDE context on the next message after a skipped context" time="0.031288971">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

[Agent] Starting new prompt: prompt-i...
[Agent] Turn 2 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should send a context DELTA on the next message after a skipped context" time="0.024301566">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (1 chunks)

[Agent] Starting new prompt: prompt-i...
[Agent] Turn 2 (model: test-model)

[Agent] Sending request to model...

[Agent] Starting new prompt: prompt-i...
[Agent] Turn 3 (model: test-model)

[Agent] Sending request to model...

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not call checkNextSpeaker when turn.run() yields an error" time="0.017970315">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Error occurred: test error

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not call checkNextSpeaker when turn.run() yields a value then an error" time="0.015061808">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Error occurred: test error

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not run loop checks when skipLoopDetection is true" time="0.020356104">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (2 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; runs loop checks when skipLoopDetection is false" time="0.01297958">
            <system-out>
[Agent] Starting new prompt: prompt-i...
[Agent] Turn 1 (model: test-model)

[Agent] Sending request to model...

[Agent] Model started responding...

[Agent] Model finished responding (2 chunks)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.026684421">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use current model from config for content generation" time="0.014549702">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; handleFlashFallback &gt; should use current model from config when checking for fallback" time="0.025690284">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; setHistory &gt; should strip thought signatures when stripThoughts is true" time="0.018024034">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; setHistory &gt; should not strip thought signatures when stripThoughts is false" time="0.016656125">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; initialize &gt; should accept extraHistory parameter and pass it to startChat" time="0.015338189">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; initialize &gt; should use empty array when no extraHistory is provided" time="0.019839028">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; reinitialize &gt; should reinitialize with preserved user history" time="0.017027452">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; reinitialize &gt; should not throw error when chat is not initialized" time="0.023709702">
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-10-08T23:26:53.855Z" hostname="uby" tests="10" failures="0" errors="0" skipped="0" time="0.012374392">
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a CodeAssistContentGenerator" time="0.002501744">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator" time="0.001628089">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator with client install id logging disabled" time="0.000607753">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Gemini using GEMINI_API_KEY when set" time="0.001775802">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Gemini if GEMINI_API_KEY is empty" time="0.000641435">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GOOGLE_API_KEY when set" time="0.000710503">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GCP project and location when set" time="0.000790091">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Vertex AI if required env vars are empty" time="0.000602324">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should retain the config model for OpenAI when OPENAI_MODEL is not set" time="0.000647337">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should prefer OPENAI_MODEL when provided" time="0.000846074">
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-10-08T23:26:53.855Z" hostname="uby" tests="24" failures="0" errors="0" skipped="0" time="0.253436465">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.032928642">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; plan mode enforcement &gt; returns plan reminder and skips execution for edit tools" time="0.002426024">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; plan mode enforcement &gt; allows read tools to execute in plan mode" time="0.012745558">
            <system-out>
[Tool] Starting: read_file (plan-2...)

[Tool] Completed: read_file in 1ms
[Tool] Success: read_file

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; plan mode enforcement &gt; enforces shell command restrictions in plan mode" time="0.015318543">
            <system-out>
[Tool] Starting: run_shell_command (plan-she...)
[Tool] Args: {
  &quot;command&quot;: &quot;ls -la&quot;
}

[Tool] Completed: run_shell_command in 0ms
[Tool] Success: run_shell_command

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; getToolSuggestion &gt; should suggest the top N closest tool names for a typo" time="0.000754775">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler with payload &gt; should update args and diff and execute tool when payload is provided" time="0.005051868">
            <system-out>
[Tool] Starting: mockModifiableTool (1...)
[Tool] Args: {
  &quot;newContent&quot;: &quot;final version&quot;
}

[Tool] Completed: mockModifiableTool in 0ms
[Tool] Success: mockModifiableTool

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.000285788">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.000146781">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.000140099">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.000145509">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.000112498">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.000177017">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.00010312">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.000090838">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.000076943">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.000078435">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.000088233">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler edit cancellation &gt; should preserve diff when an edit is cancelled" time="0.001347461">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler YOLO mode &gt; should execute tool requiring confirmation directly without waiting" time="0.003016947">
            <system-out>
[Tool] Starting: mockTool (1...)
[Tool] Args: {
  &quot;param&quot;: &quot;value&quot;
}

[Tool] Completed: mockTool in 0ms
[Tool] Success: mockTool

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler cancellation during executing with live output &gt; sets status to cancelled and preserves last output" time="0.10358766">
            <system-out>
[Tool] Starting: stream-tool (1...)
[Tool] Args: {
  &quot;id&quot;: &quot;x&quot;
}

[Tool] Completed: stream-tool in 50ms
[Tool] Cancelled: stream-tool

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should queue a request if another is running" time="0.014449607">
            <system-out>
[Tool] Starting: mockTool (1...)
[Tool] Args: {
  &quot;a&quot;: 1
}

[Tool] Completed: mockTool in 11ms
[Tool] Success: mockTool

[Tool] Starting: mockTool (2...)
[Tool] Args: {
  &quot;b&quot;: 2
}

[Tool] Completed: mockTool in 1ms
[Tool] Success: mockTool

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should auto-approve a tool call if it is on the allowedTools list" time="0.002162697">
            <system-out>
[Tool] Starting: mockTool (1...)
[Tool] Args: {
  &quot;param&quot;: &quot;value&quot;
}

[Tool] Completed: mockTool in 0ms
[Tool] Success: mockTool

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should handle two synchronous calls to schedule" time="0.002180801">
            <system-out>
[Tool] Starting: mockTool (1...)
[Tool] Args: {
  &quot;a&quot;: 1
}

[Tool] Completed: mockTool in 0ms
[Tool] Success: mockTool

[Tool] Starting: mockTool (2...)
[Tool] Args: {
  &quot;b&quot;: 2
}

[Tool] Completed: mockTool in 0ms
[Tool] Success: mockTool

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should auto-approve remaining tool calls when first tool call is approved with ProceedAlways" time="0.053253858">
            <system-out>
[Tool] Starting: testApprovalTool (1...)
[Tool] Args: {
  &quot;id&quot;: &quot;first&quot;
}
[Tool] Starting: testApprovalTool (2...)
[Tool] Args: {
  &quot;id&quot;: &quot;second&quot;
}
[Tool] Starting: testApprovalTool (3...)
[Tool] Args: {
  &quot;id&quot;: &quot;third&quot;
}
[Tool] Completed: testApprovalTool in 0ms
[Tool] Success: testApprovalTool
[Tool] Completed: testApprovalTool in 0ms
[Tool] Success: testApprovalTool
[Tool] Completed: testApprovalTool in 0ms
[Tool] Success: testApprovalTool

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-10-08T23:26:53.856Z" hostname="uby" tests="31" failures="0" errors="0" skipped="0" time="5.535690027">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should retain the initial user message when an automatic function call occurs" time="0.003537118">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should throw an error when attempting to add a user turn after another user turn" time="0.001986993">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should preserve text parts that are in the same response as a thought" time="0.000426919">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should add a placeholder model turn when a tool call is followed by an empty model response" time="0.000484556">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.001556487">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should succeed if a tool call is followed by an empty part" time="0.001486457">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should fail if the stream ends with an empty part and has no finishReason" time="1.503297385">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should succeed if the stream ends with an invalid part but has a finishReason and contained a valid part" time="0.001062935">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should not consolidate text into a part that also contains a functionCall" time="0.000615928">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should consolidate subsequent text chunks after receiving an empty text chunk" time="0.000542292">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should consolidate adjacent text parts that arrive in separate stream chunks" time="0.000489826">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should preserve text parts that stream in the same chunk as a thought" time="0.000382858">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should add a placeholder model turn when a tool call is followed by an empty stream response" time="0.000552371">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.000582587">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate all consecutive model turns into a single turn" time="0.000431117">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add a placeholder model turn when a tool call is followed by an empty response" time="0.000318057">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.000279837">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent text parts from multiple content objects" time="0.000211201">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add an empty placeholder turn if modelOutput is empty" time="0.000309212">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should preserve model outputs with undefined or empty parts arrays" time="0.000296568">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should not consolidate content with different roles" time="0.000233642">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.000202304">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.000263487">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should yield a RETRY event when an invalid stream is encountered" time="0.501725485">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should retry on invalid content, succeed, and report metrics" time="0.502424759">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should fail after all retries on persistent invalid content and report metrics" time="1.502695711">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should correctly retry and append to an existing history mid-conversation" time="0.501999051">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; concurrency control &gt; should queue a subsequent sendMessage call until the first one completes" time="0.001657904">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should retry if the model returns a completely empty stream (no chunks)" time="0.501810242">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should queue a subsequent sendMessageStream call until the first stream is fully consumed" time="0.000669608">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should discard valid partial content from a failed attempt upon retry" time="0.501275193">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiRequest.test.ts" timestamp="2025-10-08T23:26:53.857Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.003658602">
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return the string value if the input is a string" time="0.00136308">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return a concatenated string if the input is an array of strings" time="0.000183068">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle videoMetadata" time="0.000096639">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle thought" time="0.000089536">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle codeExecutionResult" time="0.000081992">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle executableCode" time="0.000076852">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle fileData" time="0.000082643">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionCall" time="0.00008643">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionResponse" time="0.000114972">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle inlineData" time="0.000084065">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle text" time="0.000094344">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return an empty string for an unknown part type" time="0.000084056">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-10-08T23:26:53.857Z" hostname="uby" tests="40" failures="0" errors="0" skipped="0" time="0.101604154">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.010943817">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.006409247">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.002211668">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.001458366">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.005872775">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.002619662">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.002737029">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.00308893">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.001456001">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.00152616">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.001488882">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.004522298">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.000809366">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.000775854">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.000828902">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.000920742">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.001026356">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.002322102">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.002543842">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.002034992">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.001291206">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.001080177">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.000856173">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.000928496">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.001009195">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.001377115">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.000940408">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should delete the specified checkpoint file and return true" time="0.002593494">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should delete both new and old checkpoint files if they exist" time="0.005037861">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should return false if the checkpoint file does not exist" time="0.005011112">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should re-throw an error if file deletion fails for reasons other than not existing" time="0.002022278">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should return false if logger is not initialized" time="0.006480798">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should return true if the checkpoint file exists" time="0.001467603">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should return false if the checkpoint file does not exist" time="0.001209886">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should throw an error if logger is not initialized" time="0.001020136">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should re-throw an error if fs.access fails for reasons other than not existing" time="0.001238449">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; Backward compatibility &gt; should load from a checkpoint with a raw special character tag" time="0.001173318">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.003928681">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; Model Switch Logging &gt; should log model switch events correctly" time="0.002406458">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; Model Switch Logging &gt; should handle multiple model switch events" time="0.00272714">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-10-08T23:26:53.858Z" hostname="uby" tests="6" failures="0" errors="0" skipped="0" time="0.03773201">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.029764584">
            <system-out>
[Tool] Starting: testTool (call1...)
[Tool] Args: {
  &quot;param1&quot;: &quot;value1&quot;
}

[Tool] Completed: testTool in 1ms
[Tool] Success: testTool

            </system-out>
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.001222609">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool validation fails" time="0.00063263">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.001829933">
            <system-out>
[Tool] Starting: testTool (call4...)
[Tool] Args: {
  &quot;param1&quot;: &quot;value1&quot;
}

[Tool] Completed: testTool in 0ms
[Tool] Error: testTool - Execution failed

            </system-out>
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an unhandled exception error if execution throws" time="0.001764341">
            <system-out>
[Tool] Starting: testTool (call5...)
[Tool] Args: {
  &quot;param1&quot;: &quot;value1&quot;
}

[Tool] Exception: testTool after 0ms - Something went very wrong

            </system-out>
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.001313909">
            <system-out>
[Tool] Starting: testTool (call6...)

[Tool] Completed: testTool in 0ms
[Tool] Success: testTool

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-10-08T23:26:53.859Z" hostname="uby" tests="40" failures="0" errors="0" skipped="0" time="0.024777487">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.004821201">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.001756897">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.000722786">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.000609908">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.000426368">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.000393317">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000322977">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.000359715">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.00036236">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should use default prompt when GEMINI_SYSTEM_MD is &quot;false&quot;" time="0.000537163">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should use default prompt when GEMINI_SYSTEM_MD is &quot;0&quot;" time="0.000230957">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should throw error if GEMINI_SYSTEM_MD points to a non-existent file" time="0.000777597">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from default path when GEMINI_SYSTEM_MD is &quot;true&quot;" time="0.001181233">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from default path when GEMINI_SYSTEM_MD is &quot;1&quot;" time="0.000368161">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from custom path when GEMINI_SYSTEM_MD provides one, preserving case" time="0.000376045">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_SYSTEM_MD is set" time="0.000332634">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should not write to file when GEMINI_WRITE_SYSTEM_MD is &quot;false&quot;" time="0.001492489">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should not write to file when GEMINI_WRITE_SYSTEM_MD is &quot;0&quot;" time="0.000551469">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to default path when GEMINI_WRITE_SYSTEM_MD is &quot;true&quot;" time="0.001182977">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to default path when GEMINI_WRITE_SYSTEM_MD is &quot;1&quot;" time="0.000448129">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to custom path when GEMINI_WRITE_SYSTEM_MD provides one" time="0.000383278">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_WRITE_SYSTEM_MD is set" time="0.000452546">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_WRITE_SYSTEM_MD is just ~" time="0.000352812">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="URL matching with trailing slash compatibility &gt; should match URLs with and without trailing slash" time="0.000758522">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="URL matching with trailing slash compatibility &gt; should not match when URLs are different" time="0.000227962">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should use XML format for qwen3-coder model" time="0.000602012">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should use JSON format for qwen-vl model" time="0.000433751">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should use bracket format for generic models" time="0.000540389">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should use bracket format when no model is specified" time="0.000323839">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should preserve model-specific formats with user memory" time="0.000326844">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should preserve model-specific formats with sandbox environment" time="0.000250292">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getCustomSystemPrompt &gt; should handle string custom instruction without user memory" time="0.000170876">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getCustomSystemPrompt &gt; should handle string custom instruction with user memory" time="0.000090347">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getCustomSystemPrompt &gt; should handle Content object with parts array and user memory" time="0.000163382">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getSubagentSystemReminder &gt; should format single agent type correctly" time="0.00022166">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getSubagentSystemReminder &gt; should join multiple agent types with commas" time="0.000073546">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getSubagentSystemReminder &gt; should handle empty array" time="0.000066523">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getPlanModeSystemReminder &gt; should return plan mode system reminder with proper structure" time="0.000144718">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getPlanModeSystemReminder &gt; should include workflow instructions" time="0.000093453">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getPlanModeSystemReminder &gt; should be deterministic" time="0.00005955">
        </testcase>
    </testsuite>
    <testsuite name="src/core/tokenLimits.test.ts" timestamp="2025-10-08T23:26:53.860Z" hostname="uby" tests="61" failures="0" errors="0" skipped="0" time="0.00978227">
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should lowercase and trim the model string" time="0.001730568">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should strip provider prefixes" time="0.000287071">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should handle pipe and colon separators" time="0.00009736">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should collapse whitespace to a single hyphen" time="0.000088834">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should remove date and version suffixes" time="0.000158883">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should remove quantization and numeric suffixes" time="0.000412933">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should handle a combination of normalization rules" time="0.000093493">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should handle empty or null input" time="0.000128197">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should remove preview suffixes" time="0.000074768">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should remove version numbers with dots when they are at the end" time="0.000096278">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 1.5 Pro" time="0.000239994">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 1.5 Flash" time="0.000115624">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 2.5 Pro" time="0.000094515">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 2.5 Flash" time="0.000101487">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 2.0 Flash with image generation" time="0.000109252">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 2.0 Flash" time="0.000103641">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for o3-mini" time="0.000110254">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for o3 models" time="0.000086681">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for o4-mini" time="0.00008621">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4o-mini" time="0.000105284">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4o" time="0.000092612">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4.1-mini" time="0.000055753">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4.1 models" time="0.000049712">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4" time="0.000072063">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Anthropic Claude &gt; should return the correct limit for Claude 3.5 Sonnet" time="0.00008096">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Anthropic Claude &gt; should return the correct limit for Claude 3.7 Sonnet" time="0.000075079">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Anthropic Claude &gt; should return the correct limit for Claude Sonnet 4" time="0.000076141">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Anthropic Claude &gt; should return the correct limit for Claude Opus 4" time="0.000075239">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen3-coder commercial models" time="0.000176697">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen3-coder open source models" time="0.000165866">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen3 2507 variants" time="0.000083674">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen2.5-1m" time="0.000117236">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen2.5" time="0.000096399">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen-plus" time="0.000103642">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen-flash" time="0.000078295">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen-turbo" time="0.000111837">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; ByteDance Seed-OSS &gt; should return the correct limit for seed-oss" time="0.000091729">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Zhipu GLM &gt; should return the correct limit for glm-4.5v" time="0.000092271">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Zhipu GLM &gt; should return the correct limit for glm-4.5-air" time="0.000088544">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Zhipu GLM &gt; should return the correct limit for glm-4.5" time="0.000078125">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for deepseek-r1" time="0.000082783">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for deepseek-v3" time="0.00013505">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for deepseek-v3.1" time="0.000105495">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for kimi-k2-instruct" time="0.000065962">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for gpt-oss" time="0.000057517">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for llama-4-scout" time="0.000057997">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for mistral-large-2" time="0.000055052">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; should return the default token limit for an unknown model" time="0.000074468">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; should return the correct limit for a complex model string" time="0.000060352">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; should handle case-insensitive model names" time="0.000097109">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Qwen models with output limits &gt; should return the correct output limit for qwen3-coder-plus" time="0.000094796">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Qwen models with output limits &gt; should return the correct output limit for qwen-vl-max-latest" time="0.000069789">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Default output limits &gt; should return the default output limit for unknown models" time="0.000158022">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Default output limits &gt; should return the default output limit for models without specific output patterns" time="0.000093653">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Input vs Output limits comparison &gt; should return different limits for input vs output for qwen3-coder-plus" time="0.000068968">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Input vs Output limits comparison &gt; should return different limits for input vs output for qwen-vl-max-latest" time="0.000061463">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Input vs Output limits comparison &gt; should return same default limits for unknown models" time="0.000067735">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Backward compatibility &gt; should default to input type when no type is specified" time="0.000083634">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Backward compatibility &gt; should work with explicit input type" time="0.000087802">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Model normalization with output limits &gt; should handle normalized model names for output limits" time="0.000082262">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Model normalization with output limits &gt; should handle complex model strings for output limits" time="0.00007054">
        </testcase>
    </testsuite>
    <testsuite name="src/core/turn.test.ts" timestamp="2025-10-08T23:26:53.861Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.013413261">
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; constructor &gt; should initialize pendingToolCalls and debugResponses" time="0.00242357">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield content events for text parts" time="0.002738061">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield tool_call_request events for function calls" time="0.001098851">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield UserCancelled event if signal is aborted" time="0.000556388">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield Error event and report if sendMessageStream throws" time="0.000834723">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle function calls with undefined name or args" time="0.000798626">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event when response has finish reason" time="0.001467122">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event for MAX_TOKENS finish reason" time="0.000352412">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event for SAFETY finish reason" time="0.000328677">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should not yield finished event when there is no finish reason" time="0.000194249">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle multiple responses with different finish reasons" time="0.000180764">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should not crash when cancelled request has malformed error" time="0.000350558">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield a Retry event when it receives one from the chat stream" time="0.000223322">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; getDebugResponses &gt; should return collected debug responses" time="0.000263186">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/google-auth-provider.test.ts" timestamp="2025-10-08T23:26:53.862Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.014001639">
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should throw an error if no scopes are provided" time="0.001955003">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should use scopes from the config if provided" time="0.003220332">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should throw an error for a non-allowlisted host" time="0.000329479">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should allow luci.app" time="0.001219654">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should allow sub.luci.app" time="0.001020517">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should not allow googleapis.com without a subdomain" time="0.000297249">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; with provider instance &gt; should return credentials" time="0.00221271">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; with provider instance &gt; should return undefined if access token is not available" time="0.002418941">
            <system-err>
Failed to get access token from Google ADC

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-provider.test.ts" timestamp="2025-10-08T23:26:53.862Z" hostname="uby" tests="19" failures="0" errors="0" skipped="0" time="0.145836749">
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should perform complete OAuth flow with PKCE" time="0.018253799">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle OAuth discovery when no authorization URL provided" time="0.013903859">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should perform dynamic client registration when no client ID provided" time="0.012580924">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle OAuth callback errors" time="0.012304352">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle state mismatch in callback" time="0.012516695">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle token exchange failure" time="0.01262797">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle callback timeout" time="0.001942711">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should refresh token successfully" time="0.001883702">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should include client secret in refresh request when available" time="0.001142141">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should handle refresh token failure" time="0.001039632">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return valid token when not expired" time="0.00187747">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: false
Returning valid token for server: test-server

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should refresh expired token and return new token" time="0.000949244">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return null when no credentials exist" time="0.000566307">
            <system-out>
Getting valid token for server: test-server

No credentials found for server: test-server

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should handle refresh failure and remove invalid token" time="0.000810538">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return null for token without refresh capability" time="0.00049197">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; PKCE parameter generation &gt; should generate valid PKCE parameters" time="0.013123206">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should build correct authorization URL with all parameters" time="0.012521133">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should correctly append parameters to an authorization URL that already has query params" time="0.012725631">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should correctly append parameters to a URL with a fragment" time="0.012684154">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-token-storage.test.ts" timestamp="2025-10-08T23:26:53.863Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.012433981">
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should return empty map when token file does not exist" time="0.002528353">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should load tokens from file successfully" time="0.001451152">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should handle corrupted token file gracefully" time="0.001161126">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should handle file read errors other than ENOENT" time="0.000363161">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should save token with restricted permissions" time="0.000639813">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should update existing token for same server" time="0.000534919">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should handle write errors gracefully" time="0.001361737">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return token for existing server" time="0.000282121">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return null for non-existent server" time="0.00026471">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return null when no tokens file exists" time="0.000168251">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should remove token for specific server" time="0.00029238">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should remove token file when no tokens remain" time="0.000193367">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should handle removal of non-existent token gracefully" time="0.000153624">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should handle file operation errors gracefully" time="0.000289355">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return false for token without expiry" time="0.000212814">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return false for valid token" time="0.00017265">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return true for expired token" time="0.000167319">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return true for token expiring within buffer time" time="0.000121465">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should remove token file successfully" time="0.000179021">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should handle non-existent file gracefully" time="0.00012428">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should handle other file errors gracefully" time="0.000286219">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-utils.test.ts" timestamp="2025-10-08T23:26:53.863Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.01228146">
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should build standard root-based URLs by default" time="0.002410055">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should build path-based URLs when includePathSuffix is true" time="0.000530681">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should handle root path correctly" time="0.000644371">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should handle trailing slash in path" time="0.00025425">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchProtectedResourceMetadata &gt; should fetch protected resource metadata successfully" time="0.001129277">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchProtectedResourceMetadata &gt; should return null when fetch fails" time="0.000303361">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchAuthorizationServerMetadata &gt; should fetch authorization server metadata successfully" time="0.000301016">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchAuthorizationServerMetadata &gt; should return null when fetch fails" time="0.000221339">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; discoverAuthorizationServerMetadata &gt; should handle URLs without path components correctly" time="0.000637979">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; discoverAuthorizationServerMetadata &gt; should handle URLs with path components correctly" time="0.000724609">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; metadataToOAuthConfig &gt; should convert metadata to OAuth config" time="0.000515072">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; metadataToOAuthConfig &gt; should handle empty scopes" time="0.001405328">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; parseWWWAuthenticateHeader &gt; should parse resource metadata URI from WWW-Authenticate header" time="0.000352912">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; parseWWWAuthenticateHeader &gt; should return null when no resource metadata URI is found" time="0.000187747">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; extractBaseUrl &gt; should extract base URL from MCP server URL" time="0.000155848">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; extractBaseUrl &gt; should handle URLs with ports" time="0.000149947">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return true for SSE endpoints" time="0.000180814">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return true for non-MCP endpoints" time="0.000088093">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return false for MCP endpoints" time="0.000105605">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildResourceParameter &gt; should build resource parameter from endpoint URL" time="0.00014606">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildResourceParameter &gt; should handle URLs with ports" time="0.00011355">
        </testcase>
    </testsuite>
    <testsuite name="src/qwen/qwenContentGenerator.test.ts" timestamp="2025-10-08T23:26:53.864Z" hostname="uby" tests="44" failures="0" errors="0" skipped="0" time="0.214162635">
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Core Content Generation Methods &gt; should generate content with valid token" time="0.003883518">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Core Content Generation Methods &gt; should generate content stream with valid token" time="0.001584018">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Core Content Generation Methods &gt; should count tokens without requiring authentication" time="0.000626408">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Core Content Generation Methods &gt; should embed content with valid token" time="0.001353131">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token Management and Refresh Logic &gt; should refresh token on auth error and retry" time="0.000587095">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token Management and Refresh Logic &gt; should refresh token on auth error and retry for content stream" time="0.000553864">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token Management and Refresh Logic &gt; should handle token refresh failure" time="0.007971133">
            <system-err>
Failed to get token from shared manager: Error: Failed to obtain valid Qwen access token. Please re-authenticate.
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:532:9
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token Management and Refresh Logic &gt; should update endpoint when token is refreshed" time="0.00084374">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Endpoint URL Normalization &gt; should use default endpoint when no custom endpoint provided" time="0.001318076">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Endpoint URL Normalization &gt; should normalize hostname-only endpoints by adding https protocol" time="0.000651985">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Endpoint URL Normalization &gt; should preserve existing protocol in endpoint URLs" time="0.000529819">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Endpoint URL Normalization &gt; should not duplicate /v1 suffix if already present" time="0.000398095">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Client State Management &gt; should set dynamic credentials during operations" time="0.000482572">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Client State Management &gt; should set credentials even when operation throws" time="0.000765224">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Handling and Retry Logic &gt; should retry once on authentication errors" time="0.00079008">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Handling and Retry Logic &gt; should not retry non-authentication errors" time="0.000851394">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Handling and Retry Logic &gt; should handle error response from token refresh" time="0.001695123">
            <system-err>
Failed to get token from shared manager: Error: Failed to obtain valid Qwen access token. Please re-authenticate.
    at SharedTokenManager.getValidCredentials [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:175:19[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at QwenContentGenerator.getValidToken [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.ts:91:27[90m)[39m
    at attemptOperation [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.ts:130:35[90m)[39m
    at QwenContentGenerator.executeWithCredentialManagement [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.ts:141:14[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:908:7
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token State Management &gt; should cache and return current token" time="0.000515312">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token State Management &gt; should clear token on clearToken()" time="0.000311846">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token State Management &gt; should handle concurrent token refresh requests" time="0.152338386">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Logging Suppression &gt; should suppress logging for authentication errors" time="0.001015116">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Logging Suppression &gt; should not suppress logging for non-auth errors" time="0.000935899">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Integration Tests &gt; should handle complete workflow: get token, use it, refresh on auth error, retry" time="0.001049941">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; SharedTokenManager Integration &gt; should use SharedTokenManager to get valid credentials" time="0.001178819">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; SharedTokenManager Integration &gt; should handle SharedTokenManager errors gracefully" time="0.001307307">
            <system-err>
Failed to get token from shared manager: Error: Token manager error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:1154:30
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; SharedTokenManager Integration &gt; should handle missing access token from credentials" time="0.001266621">
            <system-err>
Failed to get token from shared manager: Error: No access token available
    at QwenContentGenerator.getValidToken [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.ts:96:15[90m)[39m
    at attemptOperation [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.ts:130:35[90m)[39m
    at QwenContentGenerator.executeWithCredentialManagement [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.ts:141:14[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; getCurrentEndpoint Method &gt; should handle URLs with custom ports" time="0.00074682">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; getCurrentEndpoint Method &gt; should handle URLs with existing paths" time="0.000846946">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; getCurrentEndpoint Method &gt; should handle undefined resource URL" time="0.000475499">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; getCurrentEndpoint Method &gt; should handle empty resource URL" time="0.000512868">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; isAuthError Method Enhanced &gt; should identify auth errors by numeric status codes" time="0.000658457">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; isAuthError Method Enhanced &gt; should identify auth errors by message content variations" time="0.001615797">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; isAuthError Method Enhanced &gt; should not identify non-auth errors" time="0.001925339">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; isAuthError Method Enhanced &gt; should handle complex error objects" time="0.001632578">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Stream Error Handling &gt; should set credentials when stream generation fails" time="0.00174781">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Stream Error Handling &gt; should set credentials for successful streams" time="0.001497137">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token and Endpoint Management &gt; should get current token from SharedTokenManager" time="0.005877713">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token and Endpoint Management &gt; should return null when no credentials available" time="0.001196792">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token and Endpoint Management &gt; should return null when credentials have no access token" time="0.000944866">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token and Endpoint Management &gt; should clear token through SharedTokenManager" time="0.000642338">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Constructor and Initialization &gt; should initialize with configured base URL when provided" time="0.000493392">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Constructor and Initialization &gt; should get SharedTokenManager instance" time="0.000425546">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Edge Cases and Error Conditions &gt; should handle token retrieval with warning when SharedTokenManager fails" time="0.00241874">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Edge Cases and Error Conditions &gt; should handle method types with token failure (except countTokens)" time="0.002980469">
            <system-err>
Failed to get token from shared manager: Error: Token error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:1658:30
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

Failed to get token from shared manager: Error: Token error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:1658:30
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

Failed to get token from shared manager: Error: Token error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:1658:30
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/qwen/qwenOAuth2.test.ts" timestamp="2025-10-08T23:26:53.865Z" hostname="uby" tests="82" failures="0" errors="0" skipped="0" time="2.064087179">
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="PKCE Code Generation &gt; generateCodeVerifier &gt; should generate a code verifier with correct length" time="0.001312856">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="PKCE Code Generation &gt; generateCodeVerifier &gt; should generate different verifiers on subsequent calls" time="0.00057859">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="PKCE Code Generation &gt; generateCodeChallenge &gt; should generate code challenge from verifier" time="0.000435054">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="PKCE Code Generation &gt; generatePKCEPair &gt; should generate valid PKCE pair" time="0.000208626">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceAuthorizationSuccess &gt; should return true for successful authorization response" time="0.00014626">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceAuthorizationSuccess &gt; should return false for error response" time="0.000056865">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenPending &gt; should return true for pending response" time="0.000066723">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenPending &gt; should return false for success response" time="0.000089535">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenPending &gt; should return false for error response" time="0.000100176">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return true for successful token response" time="0.00009753">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return false for pending response" time="0.000040885">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return false for error response" time="0.000039643">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return false for null access token" time="0.000059059">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return false for empty access token" time="0.000057897">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isErrorResponse &gt; should return true for error responses" time="0.000093293">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isErrorResponse &gt; should return false for successful responses" time="0.000062555">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; requestDeviceAuthorization &gt; should successfully request device authorization" time="0.002288239">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; requestDeviceAuthorization &gt; should handle error response" time="0.001433089">
            <system-out>
Device authorization result: {
  error: [32m&apos;INVALID_REQUEST&apos;[39m,
  error_description: [32m&apos;The request parameters are invalid&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken &gt; should successfully refresh access token" time="0.000371727">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken &gt; should handle refresh error" time="0.000269709">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken &gt; should successfully refresh access token and update credentials" time="0.00073055">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken &gt; should use new refresh token if provided in response" time="0.000166778">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; getAccessToken &gt; should return access token if valid and not expired" time="0.000153514">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; getAccessToken &gt; should refresh token if access token is expired" time="0.000180483">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; getAccessToken &gt; should return undefined if no access token and no refresh token" time="0.005670912">
            <system-err>
Failed to get access token from shared manager: Error: No credentials available
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:530:30
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should successfully poll for device token" time="0.000534217">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should return pending status when authorization is pending" time="0.000264178">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should handle HTTP error responses" time="0.000403165">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should include status code in error for better handling" time="0.000227922">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should handle authorization_pending with HTTP 400 according to RFC 8628" time="0.00017327">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should handle slow_down with HTTP 429 according to RFC 8628" time="0.000147973">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken error handling &gt; should throw error if no refresh token available" time="0.000256855">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken error handling &gt; should handle 400 status as expired refresh token" time="0.000580634">
            <system-out>
Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken error handling &gt; should handle other HTTP error statuses" time="0.000253188">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; credentials management &gt; should set and get credentials correctly" time="0.000138526">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; credentials management &gt; should handle empty credentials" time="0.000118539">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient &gt; should load cached credentials if available" time="0.000874616">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient &gt; should handle cached credentials refresh failure" time="0.001709179">
            <system-out>
Shared token manager failed, attempting device flow: Error: Token refresh failed
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:807:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_request&apos;[39m,
  error_description: [32m&apos;Invalid request parameters&apos;[39m
}

            </system-out>
            <system-err>
Failed to get access token from shared manager: Error: Token refresh failed
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:807:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization flow failed: Device authorization failed: invalid_request - Invalid request parameters

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="CredentialsClearRequiredError &gt; should create error with correct name and message" time="0.000225227">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="CredentialsClearRequiredError &gt; should work without originalError" time="0.000153553">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="clearQwenCredentials &gt; should successfully clear credentials file" time="0.000753313">
            <system-out>
Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="clearQwenCredentials &gt; should handle file not found error gracefully" time="0.000214166">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="clearQwenCredentials &gt; should handle other file system errors gracefully" time="0.000370455">
            <system-err>
Warning: Failed to clear cached Qwen credentials: Error: Permission denied
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:886:29
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client - Additional Error Scenarios &gt; requestDeviceAuthorization HTTP errors &gt; should handle HTTP error response with non-ok status" time="0.000316685">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient - Enhanced Error Scenarios &gt; should handle generic refresh token errors" time="0.000839131">
            <system-out>
Shared token manager failed, attempting device flow: Error: Refresh failed
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:966:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_request&apos;[39m,
  error_description: [32m&apos;Invalid request parameters&apos;[39m
}

            </system-out>
            <system-err>
Failed to get access token from shared manager: Error: Refresh failed
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:966:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization flow failed: Device authorization failed: invalid_request - Invalid request parameters

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient - Enhanced Error Scenarios &gt; should handle different authentication failure reasons - timeout" time="2.007144382">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1001:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m0.1[39m
}

Waiting for authorization...

polling for token...

            </system-out>
            <system-err>

Authorization timeout, please restart the process.

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient - Enhanced Error Scenarios &gt; should handle authentication failure reason - rate limit" time="0.001610276">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1050:28
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

Waiting for authorization...

polling for token...


Too many requests. The server is rate limiting our requests. Please select a different authentication method or try again later.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient - Enhanced Error Scenarios &gt; should handle authentication failure reason - error" time="0.000987846">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1101:28
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_request&apos;[39m,
  error_description: [32m&apos;Invalid request parameters&apos;[39m
}

            </system-out>
            <system-err>
Device authorization flow failed: Device authorization failed: invalid_request - Invalid request parameters

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="authWithQwenDeviceFlow - Comprehensive Testing &gt; should handle device authorization error response" time="0.002026676">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1160:28
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_client&apos;[39m,
  error_description: [32m&apos;Client authentication failed&apos;[39m
}

            </system-out>
            <system-err>
Device authorization flow failed: Device authorization failed: invalid_client - Client authentication failed

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="authWithQwenDeviceFlow - Comprehensive Testing &gt; should handle successful authentication flow" time="0.000413374">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="authWithQwenDeviceFlow - Comprehensive Testing &gt; should handle 401 error during token polling" time="0.00089266">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1234:28
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

Waiting for authorization...

polling for token...

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="authWithQwenDeviceFlow - Comprehensive Testing &gt; should handle token polling with browser launch suppressed" time="0.000997664">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1282:28
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Browser Launch and Error Handling &gt; should handle browser launch failure gracefully" time="0.004188041">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Browser Launch and Error Handling &gt; should handle browser child process error gracefully" time="0.002671087">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Event Emitter Integration &gt; should export qwenOAuth2Events as EventEmitter" time="0.000227501">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Event Emitter Integration &gt; should define correct event enum values" time="0.000196052">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Utility Functions &gt; objectToUrlEncoded &gt; should encode object properties to URL-encoded format" time="0.000308991">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Utility Functions &gt; objectToUrlEncoded &gt; should handle special characters" time="0.000152833">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Utility Functions &gt; objectToUrlEncoded &gt; should handle empty object" time="0.000080058">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Utility Functions &gt; getQwenCachedCredentialPath &gt; should return correct path to cached credentials" time="0.001022239">
            <system-out>
Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Credential Caching Functions &gt; cacheQwenCredentials &gt; should create directory and write credentials to file" time="0.00021625">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Credential Caching Functions &gt; loadCachedQwenCredentials &gt; should load and validate cached credentials successfully" time="0.001236154">
            <system-out>
Shared token manager failed, attempting device flow: Error: No cached creds
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1593:30
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

            </system-out>
            <system-err>
Failed to get access token from shared manager: Error: No cached creds
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1593:30
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Credential Caching Functions &gt; loadCachedQwenCredentials &gt; should handle invalid cached credentials gracefully" time="0.001203554">
            <system-out>
Shared token manager failed, attempting device flow: Error: No cached creds
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1654:30
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Credential Caching Functions &gt; loadCachedQwenCredentials &gt; should handle file access errors" time="0.000799127">
            <system-out>
Shared token manager failed, attempting device flow: Error: No cached creds
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1712:30
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_request&apos;[39m,
  error_description: [32m&apos;Invalid request parameters&apos;[39m
}

            </system-out>
            <system-err>
Device authorization flow failed: Device authorization failed: invalid_request - Invalid request parameters

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; QwenOAuth2Client getAccessToken enhanced scenarios &gt; should return undefined when SharedTokenManager fails (no fallback)" time="0.001580631">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; QwenOAuth2Client getAccessToken enhanced scenarios &gt; should return undefined when both manager and cache fail" time="0.000426909">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; QwenOAuth2Client getAccessToken enhanced scenarios &gt; should handle missing credentials gracefully" time="0.000372489">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced requestDeviceAuthorization scenarios &gt; should include x-request-id header" time="0.001013273">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced requestDeviceAuthorization scenarios &gt; should include correct Content-Type and Accept headers" time="0.000587216">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced requestDeviceAuthorization scenarios &gt; should send correct form data" time="0.000456574">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced pollDeviceToken scenarios &gt; should handle JSON parsing error during error response" time="0.000349026">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced pollDeviceToken scenarios &gt; should include status code in thrown errors" time="0.000352973">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced pollDeviceToken scenarios &gt; should handle authorization_pending with correct status" time="0.000187186">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced refreshAccessToken scenarios &gt; should call clearQwenCredentials on 400 error" time="0.000438871">
            <system-out>
Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced refreshAccessToken scenarios &gt; should throw CredentialsClearRequiredError on 400 error" time="0.000654821">
            <system-out>
Cached Qwen credentials cleared successfully.

Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced refreshAccessToken scenarios &gt; should preserve existing refresh token when new one not provided" time="0.00018422">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced refreshAccessToken scenarios &gt; should include resource_url when provided in response" time="0.000136823">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="SharedTokenManager Integration in QwenOAuth2Client &gt; should use SharedTokenManager instance in constructor" time="0.000112328">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="SharedTokenManager Integration in QwenOAuth2Client &gt; should handle TokenManagerError types correctly in getQwenOAuthClient" time="0.003088579">
            <system-out>
Shared token manager failed, attempting device flow: TokenManagerError: NO_REFRESH_TOKEN
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:2155:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

Shared token manager failed, attempting device flow: TokenManagerError: REFRESH_FAILED
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:2155:26
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

Shared token manager failed, attempting device flow: TokenManagerError: NETWORK_ERROR
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:2155:26
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

Shared token manager failed, attempting device flow: TokenManagerError: REFRESH_FAILED
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:2155:26
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

            </system-out>
            <system-err>
Token manager error: NO_REFRESH_TOKEN

Token manager error: REFRESH_FAILED

Token manager error: NETWORK_ERROR

Token manager error: REFRESH_FAILED

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Constants and Configuration &gt; should have correct OAuth endpoints" time="0.000386334">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Constants and Configuration &gt; should use correct client ID in requests" time="0.000302099">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Constants and Configuration &gt; should use correct default scope" time="0.000292551">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/qwen/sharedTokenManager.test.ts" timestamp="2025-10-08T23:26:53.869Z" hostname="uby" tests="31" failures="0" errors="0" skipped="0" time="0.261426984">
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Singleton Pattern &gt; should return the same instance when called multiple times" time="0.002165783">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Singleton Pattern &gt; should create a new instance after reset" time="0.000923687">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should return valid cached credentials without refresh" time="0.000756749">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should refresh expired credentials" time="0.001345186">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should force refresh when forceRefresh is true" time="0.00035699">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should throw TokenManagerError when refresh token is missing" time="0.001447916">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should throw TokenManagerError when refresh fails" time="0.000439011">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should handle network errors during refresh" time="0.000396333">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should wait for ongoing refresh and return same result" time="0.000454791">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should reload credentials from file when file is modified" time="0.000363322">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Cache Management &gt; should clear cache" time="0.00015135">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Cache Management &gt; should return current credentials from cache" time="0.000110374">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Cache Management &gt; should return null when no credentials are cached" time="0.000131534">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Refresh Status &gt; should return false when no refresh is in progress" time="0.000133096">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Refresh Status &gt; should return true when refresh is in progress" time="0.0006114">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Debug Info &gt; should return complete debug information" time="0.000715312">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Debug Info &gt; should indicate expired credentials in debug info" time="0.000301147">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Debug Info &gt; should indicate no credentials in debug info" time="0.000149687">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should create TokenManagerError with correct type and message" time="0.000260131">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should handle file access errors gracefully" time="0.000295576">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should handle missing file gracefully" time="0.000252707">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should handle lock timeout scenarios" time="0.238772713">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should handle refresh response without access token" time="0.001611499">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; File System Operations &gt; should handle file reload failures gracefully" time="0.000836727">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; File System Operations &gt; should handle invalid JSON in credentials file" time="0.000597364">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; File System Operations &gt; should handle directory creation during save" time="0.001847053">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Lock File Management &gt; should clean up lock file during process cleanup" time="0.000334007">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Lock File Management &gt; should handle stale lock cleanup" time="0.001381884">
            <system-err>
Removed stale lock file: /home/user/.qwen/oauth_creds.lock (age: 1759966006455ms)

            </system-err>
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; CredentialsClearRequiredError handling &gt; should clear memory cache when CredentialsClearRequiredError is thrown during refresh" time="0.001055461">
            <system-out>
SharedTokenManager: Clearing memory cache due to credentials clear requirement

            </system-out>
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; CredentialsClearRequiredError handling &gt; should convert CredentialsClearRequiredError to TokenManagerError" time="0.000764322">
            <system-out>
SharedTokenManager: Clearing memory cache due to credentials clear requirement

            </system-out>
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; CredentialsClearRequiredError handling &gt; should properly clean up timeout when file operation completes before timeout" time="0.000613975">
        </testcase>
    </testsuite>
    <testsuite name="src/services/chatRecordingService.test.ts" timestamp="2025-10-08T23:26:53.870Z" hostname="uby" tests="10" failures="0" errors="0" skipped="0" time="0.040257428">
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; initialize &gt; should create a new session if none is provided" time="0.007667772">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; initialize &gt; should resume from an existing session if provided" time="0.003299589">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessage &gt; should record a new message" time="0.004396867">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessage &gt; should append to the last message if append is true and types match" time="0.004507932">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordThought &gt; should queue a thought" time="0.002906162">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessageTokens &gt; should update the last message with token info" time="0.00318687">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessageTokens &gt; should queue token info if the last message already has tokens" time="0.002960111">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordToolCalls &gt; should add new tool calls to the last message" time="0.003277307">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordToolCalls &gt; should create a new message if the last message is not from gemini" time="0.002877599">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; deleteSession &gt; should delete the session file" time="0.002382183">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-10-08T23:26:53.870Z" hostname="uby" tests="13" failures="0" errors="0" skipped="0" time="0.042878563">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default in a git repo" time="0.010777991">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not load git repo patterns when not in a git repo" time="0.011788579">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should load .qwenignore patterns even when not in a git repo" time="0.004014089">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored and gemini-ignored files by default" time="0.002538832">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.002395548">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGeminiIgnore is false" time="0.001737952">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.001126392">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return true for git-ignored files" time="0.001181954">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return false for non-git-ignored files" time="0.001411058">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return true for gemini-ignored files" time="0.001055381">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return false for non-gemini-ignored files" time="0.001042637">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.001100183">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.00108777">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileSystemService.test.ts" timestamp="2025-10-08T23:26:53.871Z" hostname="uby" tests="3" failures="0" errors="0" skipped="0" time="0.008759059">
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; readTextFile &gt; should read file content using fs" time="0.003768475">
        </testcase>
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; readTextFile &gt; should propagate fs.readFile errors" time="0.001786752">
        </testcase>
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; writeTextFile &gt; should write file content using fs" time="0.001527965">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-10-08T23:26:53.871Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.03723436">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance" time="0.004357994">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.001955003">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.001313237">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.003892905">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.001333615">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.002811838">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.001578367">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.003198201">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.001931821">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.00332195">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not create a .gitignore in shadow repo if project .gitignore does not exist" time="0.002310661">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.003290682">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.002493469">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.001655921">
        </testcase>
    </testsuite>
    <testsuite name="src/services/loopDetectionService.test.ts" timestamp="2025-10-08T23:26:53.871Z" hostname="uby" tests="35" failures="0" errors="0" skipped="0" time="0.171863023">
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for fewer than TOOL_CALL_LOOP_THRESHOLD identical calls" time="0.002538392">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on the TOOL_CALL_LOOP_THRESHOLD-th identical call" time="0.001099442">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on subsequent identical calls" time="0.000238961">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for different tool calls" time="0.000347973">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not reset tool call counter for other event types" time="0.000317577">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for random content" time="0.114784576">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should detect a loop when a chunk of content repeats consecutively" time="0.00147696">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop if repetitions are very far apart" time="0.009659023">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect a loop when repetitive content is inside a code block" time="0.000397725">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect loops when content transitions into a code block" time="0.000614165">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should skip loop detection when already inside a code block (this.inCodeBlock)" time="0.00017277">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should correctly track inCodeBlock state with multiple fence transitions" time="0.000126324">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should detect a loop when repetitive content is outside a code block" time="0.000982947">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should handle content with multiple code blocks and no loops" time="0.000153223">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should handle content with mixed code blocks and looping text" time="0.000789389">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect a loop for a long code block with some repeating tokens" time="0.000259389">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a code fence is found" time="0.000623583">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a table is detected" time="0.001056733">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a list item is detected" time="0.001402232">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a heading is detected" time="0.002985428">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a blockquote is detected" time="0.001078704">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various list item formats" time="0.007144425">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various table formats" time="0.004737356">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various heading levels" time="0.006690847">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Edge Cases &gt; should handle empty content" time="0.000167078">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Divider Content Detection &gt; should not detect a loop for repeating divider-like content" time="0.000278525">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Divider Content Detection &gt; should not detect a loop for repeating complex box-drawing dividers" time="0.000301978">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Reset Functionality &gt; tool call should reset content count" time="0.000201733">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; General Behavior &gt; should return false for unhandled event types" time="0.000107669">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not trigger LLM check before LLM_CHECK_AFTER_TURNS" time="0.000448008">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should trigger LLM check on the 30th turn" time="0.000446475">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should detect a cognitive loop when confidence is high" time="0.003387942">
            <system-err>
Repetitive actions

            </system-err>
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not detect a loop when confidence is low" time="0.000300846">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should adjust the check interval based on confidence" time="0.000168372">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should handle errors from generateJson gracefully" time="0.004283537">
            <system-out>
Error: API error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/services/loopDetectionService.test.ts:718:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/services/shellExecutionService.test.ts" timestamp="2025-10-08T23:26:53.872Z" hostname="uby" tests="30" failures="0" errors="0" skipped="0" time="0.051132969">
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should execute a command and capture output" time="0.011681912">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should strip ANSI codes from output" time="0.002730968">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should correctly decode multi-byte characters split across chunks" time="0.003751023">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should handle commands with no output" time="0.00150396">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should capture a non-zero exit code" time="0.002482028">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should capture a termination signal" time="0.001161146">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should handle a synchronous spawn error" time="0.001027308">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Aborting Commands &gt; should abort a running process and set the aborted flag" time="0.001334747">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Binary Output &gt; should detect binary output and switch to progress events" time="0.001562908">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Binary Output &gt; should not emit data events after binary is detected" time="0.004578543">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Platform-Specific Behavior &gt; should use cmd.exe on Windows" time="0.001499392">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Platform-Specific Behavior &gt; should use bash on Linux" time="0.001299962">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should execute a command and capture stdout and stderr" time="0.002031405">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should strip ANSI codes from output" time="0.000605489">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should correctly decode multi-byte characters split across chunks" time="0.000524469">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should handle commands with no output" time="0.000355888">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should capture a non-zero exit code and format output correctly" time="0.000342844">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should capture a termination signal" time="0.000277342">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should handle a spawn error" time="0.000399378">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; handles errors that do not fire the exit event" time="0.000389921">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; on &apos;linux&apos; &gt; should abort a running process and set the aborted flag" time="0.001039702">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; on &apos;win32&apos; &gt; should abort a running process and set the aborted flag" time="0.000737483">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; should gracefully attempt SIGKILL on linux if SIGTERM fails" time="0.003315378">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Binary Output &gt; should detect binary output and switch to progress events" time="0.000696567">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Binary Output &gt; should not emit data events after binary is detected" time="0.000497359">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Platform-Specific Behavior &gt; should use cmd.exe on Windows" time="0.000563992">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Platform-Specific Behavior &gt; should use bash and detached process group on Linux" time="0.000605058">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should use node-pty when shouldUseNodePty is true and pty is available" time="0.00116317">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should use child_process when shouldUseNodePty is false" time="0.00058429">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should fall back to child_process if pty is not available even if shouldUseNodePty is true" time="0.000415558">
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/builtin-agents.test.ts" timestamp="2025-10-08T23:26:53.873Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.007570372">
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgents &gt; should return array of builtin agents with correct properties" time="0.002743972">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgents &gt; should include general-purpose agent" time="0.000467134">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgent &gt; should return correct agent for valid name" time="0.00027069">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgent &gt; should return null for invalid name" time="0.000179943">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; isBuiltinAgent &gt; should return true for valid builtin agent names" time="0.000196824">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; isBuiltinAgent &gt; should return false for invalid names" time="0.000156579">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgentNames &gt; should return array of agent names" time="0.000812772">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; consistency &gt; should maintain consistency across all methods" time="0.00035698">
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/subagent-manager.test.ts" timestamp="2025-10-08T23:26:53.873Z" hostname="uby" tests="52" failures="0" errors="0" skipped="0" time="0.101966774">
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should parse valid markdown content" time="0.035301828">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getInstallationIdPath [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:40:30[90m)[39m
    at InstallationManager.getInstallationIdPath [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:14:20[90m)[39m
    at InstallationManager.readInstallationIdFromFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:18:37[90m)[39m
    at InstallationManager.getInstallationId [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:42:33[90m)[39m
    at QwenLogger.generateUserId [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:123:53[90m)[39m
    at new QwenLogger [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:114:24[90m)[39m
    at QwenLogger.getInstance [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:131:29[90m)[39m
    at logCliConfiguration [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/loggers.ts:85:14[90m)[39m {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should parse content with tools" time="0.00256979">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should parse content with model config" time="0.001991912">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should parse content with run config" time="0.00125528">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should handle numeric name and description values" time="0.00098458">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should handle boolean name and description values" time="0.000999287">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should determine level from file path" time="0.001054319">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should throw error for invalid frontmatter format" time="0.001483372">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should throw error for missing name" time="0.001476559">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should throw error for missing description" time="0.001007503">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should not warn when filename matches subagent name" time="0.001768158">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; serializeSubagent &gt; should serialize basic configuration" time="0.001485215">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; serializeSubagent &gt; should serialize configuration with tools" time="0.001047436">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; serializeSubagent &gt; should serialize configuration with model config" time="0.001026638">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; serializeSubagent &gt; should not include empty optional fields" time="0.000907978">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should create subagent successfully" time="0.002589977">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should throw error if file already exists and overwrite is false" time="0.001896695">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should overwrite file when overwrite is true" time="0.000843018">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should use custom path when provided" time="0.001030635">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should throw error on file write failure" time="0.000911365">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should load subagent from project level first" time="0.001086809">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should fall back to user level if project level fails" time="0.001004376">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should return null if not found at either level" time="0.005611892">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should load subagent even when filename does not match name" time="0.002243707">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should search user level when filename mismatch at project level" time="0.001480586">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should handle specific level search with filename mismatch" time="0.000999808">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; updateSubagent &gt; should update existing subagent" time="0.001267442">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; updateSubagent &gt; should throw error if subagent not found" time="0.001060219">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; updateSubagent &gt; should throw error on write failure" time="0.000971085">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should delete subagent from specified level" time="0.001005138">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should delete from both levels if no level specified" time="0.000905444">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should throw error if subagent not found" time="0.000872613">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should succeed if deleted from at least one level" time="0.001157549">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should delete subagent with mismatched filename" time="0.000677352">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should handle deletion when multiple files exist but only one matches" time="0.000699673">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should list subagents from both levels" time="0.001516402">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should prioritize project level over user level" time="0.000959313">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should filter by level" time="0.000985121">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should sort by name" time="0.001020686">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should handle empty directories" time="0.001021968">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should handle directory read errors" time="0.001250431">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; findSubagentByName &gt; should find existing subagent" time="0.000790862">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; findSubagentByName &gt; should return null for non-existent subagent" time="0.001069006">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; isNameAvailable &gt; should return true for available names" time="0.000872052">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; isNameAvailable &gt; should return false for existing names" time="0.000761427">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; isNameAvailable &gt; should check specific level when provided" time="0.000753532">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; convertToRuntimeConfig &gt; should convert basic configuration" time="0.000959053">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; convertToRuntimeConfig &gt; should include tool configuration when tools are specified" time="0.000983908">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; convertToRuntimeConfig &gt; should transform display names to tool names in tool configuration" time="0.000727204">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
            <system-err>
Tool &quot;unknown_tool&quot; not found in tool registry, preserving as-is

            </system-err>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; convertToRuntimeConfig &gt; should merge custom model and run configurations" time="0.000837097">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; mergeConfigurations &gt; should merge basic properties" time="0.001614464">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; mergeConfigurations &gt; should merge nested configurations" time="0.000755296">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:442:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/subagent-statistics.test.ts" timestamp="2025-10-08T23:26:53.876Z" hostname="uby" tests="29" failures="0" errors="0" skipped="0" time="0.01967751">
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; basic statistics tracking &gt; should track execution time" time="0.001678332">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; basic statistics tracking &gt; should track rounds" time="0.000223984">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; basic statistics tracking &gt; should track tool calls" time="0.000290547">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; basic statistics tracking &gt; should track tokens" time="0.00019465">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; tool usage statistics &gt; should track individual tool usage" time="0.000773911">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatCompact &gt; should format basic execution summary" time="0.011189271">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatCompact &gt; should handle zero tool calls" time="0.00024325">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatCompact &gt; should show zero tokens when no tokens recorded" time="0.000101979">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatDetailed &gt; should include quality assessment" time="0.000463687">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatDetailed &gt; should include speed assessment" time="0.000160376">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatDetailed &gt; should show top tools" time="0.000143055">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatDetailed &gt; should include performance insights" time="0.000093713">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; quality categories &gt; should categorize excellent execution" time="0.000118329">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; quality categories &gt; should categorize good execution" time="0.000116265">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; quality categories &gt; should categorize poor execution" time="0.000085918">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; speed categories &gt; should categorize fast completion" time="0.00009211">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; speed categories &gt; should categorize good speed" time="0.000091569">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; speed categories &gt; should categorize moderate duration" time="0.000083014">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; speed categories &gt; should categorize long execution" time="0.000070541">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should suggest reviewing low success rate" time="0.001113117">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should suggest breaking down long tasks" time="0.000153874">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should suggest optimizing high token usage" time="0.000092651">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should identify high token usage per call" time="0.000067595">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should identify network failures" time="0.000051165">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should identify slow tools" time="0.000049031">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; duration formatting &gt; should format milliseconds" time="0.000044763">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; duration formatting &gt; should format seconds" time="0.000034965">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; duration formatting &gt; should format minutes and seconds" time="0.000031408">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; duration formatting &gt; should format hours and minutes" time="0.000034574">
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/subagent.test.ts" timestamp="2025-10-08T23:26:53.877Z" hostname="uby" tests="16" failures="0" errors="0" skipped="0" time="0.071519049">
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; ContextState &gt; should set and get values correctly" time="0.002341568">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; ContextState &gt; should return undefined for missing keys" time="0.000212823">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should create a SubAgentScope successfully with minimal config" time="0.024882079">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should not block creation when a tool may require confirmation" time="0.0022021">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should succeed if tools do not require confirmation" time="0.001208794">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should allow creation regardless of tool parameter requirements" time="0.001361807">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should correctly template the system prompt and initialize GeminiChat" time="0.007646683">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should use initialMessages instead of systemPrompt if provided" time="0.002255659">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should throw an error if template variables are missing" time="0.002259927">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should validate that systemPrompt and initialMessages are mutually exclusive" time="0.001341529">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should terminate with GOAL if no outputs are expected and model stops" time="0.001718757">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should terminate with GOAL when model provides final text" time="0.001233811">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should execute external tools and provide the response to the model" time="0.004762262">
            <system-out>
[Tool] Starting: list_files (call_1...)
[Tool] Args: {
  &quot;path&quot;: &quot;.&quot;
}

[Tool] Completed: list_files in 1ms
[Tool] Success: list_files

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with MAX_TURNS if the limit is reached" time="0.001697377">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with TIMEOUT if the time limit is reached during an LLM call" time="0.005969733">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with ERROR if the model call throws" time="0.008583464">
            <system-err>
Error during subagent execution: Error: API Failure
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/subagents/subagent.test.ts:694:49
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/types.test.ts" timestamp="2025-10-08T23:26:53.878Z" hostname="uby" tests="3" failures="0" errors="0" skipped="0" time="0.003383093">
        <testcase classname="src/subagents/types.test.ts" name="SubagentError &gt; should create error with message and code" time="0.001596732">
        </testcase>
        <testcase classname="src/subagents/types.test.ts" name="SubagentError &gt; should create error with subagent name" time="0.000231408">
        </testcase>
        <testcase classname="src/subagents/types.test.ts" name="SubagentError &gt; should have correct error codes" time="0.000208926">
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/validation.test.ts" timestamp="2025-10-08T23:26:53.878Z" hostname="uby" tests="37" failures="0" errors="0" skipped="0" time="0.010580125">
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should accept valid names" time="0.00187197">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject empty or whitespace names" time="0.000503951">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names that are too short" time="0.000161799">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names that are too long" time="0.000099564">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names with invalid characters" time="0.000211">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names starting with special characters" time="0.00012442">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names ending with special characters" time="0.000113751">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject reserved names" time="0.000223242">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should warn about naming conventions" time="0.000072605">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should warn about mixed separators" time="0.000853798">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should accept valid system prompts" time="0.000302318">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should reject empty prompts" time="0.000198657">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should reject prompts that are too short" time="0.000114431">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should reject prompts that are too long" time="0.000092531">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should warn about long prompts" time="0.000087372">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should accept valid tool arrays" time="0.000215438">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should reject non-array inputs" time="0.000084686">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should warn about empty arrays" time="0.000076231">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should warn about duplicate tools" time="0.000067304">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should reject non-string tool names" time="0.000051846">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should reject empty tool names" time="0.00005908">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should accept valid model configurations" time="0.000388268">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should reject invalid model names" time="0.000145539">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should reject invalid temperature values" time="0.000132074">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should warn about high temperature" time="0.000106928">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should reject invalid top_p values" time="0.000138075">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should accept valid run configurations" time="0.000377387">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should reject invalid max_time_minutes" time="0.000171998">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should warn about very long execution times" time="0.000126775">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should reject invalid max_turns" time="0.000171457">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should warn about high turn limits" time="0.000115935">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateConfig &gt; should accept valid configurations" time="0.000226619">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateConfig &gt; should collect errors from all validation steps" time="0.000163111">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateConfig &gt; should collect warnings from all validation steps" time="0.000084426">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateOrThrow &gt; should not throw for valid configurations" time="0.000516875">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateOrThrow &gt; should throw SubagentError for invalid configurations" time="0.000327064">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateOrThrow &gt; should include subagent name in error" time="0.000248199">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-10-08T23:26:53.879Z" hostname="uby" tests="15" failures="0" errors="0" skipped="0" time="0.031790018">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logChatCompression &gt; logs the chat compression event to QwenLogger" time="0.019641643">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logChatCompression &gt; records the chat compression event to OTEL" time="0.001214134">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.000657635">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.000654069">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.000363231">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.001260881">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.000571636">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.000467955">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.000469948">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFlashFallback &gt; should log flash fallback event" time="0.000768901">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.001219594">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.000963711">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.000535209">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.000839662">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.000532674">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-10-08T23:26:53.879Z" hostname="uby" tests="13" failures="0" errors="0" skipped="0" time="0.076977607">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordChatCompressionMetrics &gt; does not record metrics if not initialized" time="0.02308057">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordChatCompressionMetrics &gt; records token compression with the correct attributes" time="0.00923539">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.00411191">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.009697033">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.0043931">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.003851328">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.003851189">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.00337079">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.003119176">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.002269104">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should include diffStat when provided" time="0.003345183">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not include diffStat attributes when diffStat is not provided" time="0.002626144">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should handle diffStat with all zero values" time="0.002276688">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/sdk.test.ts" timestamp="2025-10-08T23:26:53.880Z" hostname="uby" tests="4" failures="0" errors="0" skipped="0" time="0.016650896">
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use gRPC exporters when protocol is grpc" time="0.006855671">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use HTTP exporters when protocol is http" time="0.00351675">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should parse gRPC endpoint correctly" time="0.003415884">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should parse HTTP endpoint correctly" time="0.001599547">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry-utils.test.ts" timestamp="2025-10-08T23:26:53.880Z" hostname="uby" tests="6" failures="0" errors="0" skipped="0" time="0.00305127">
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when file_path is present" time="0.001299071">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when absolute_path is present" time="0.000177518">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when path is present" time="0.00009754">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return undefined when no file path is present" time="0.000085569">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should handle unknown file extensions gracefully" time="0.000085618">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should handle files with no extension" time="0.0000756">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-10-08T23:26:53.880Z" hostname="uby" tests="2" failures="0" errors="0" skipped="0" time="0.009913153">
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should initialize the telemetry service" time="0.006448639">
        </testcase>
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should shutdown the telemetry service" time="0.002627697">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-10-08T23:26:53.880Z" hostname="uby" tests="19" failures="1" errors="0" skipped="0" time="0.049309298">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.002306172">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.007870887">
            <failure message="expected &quot;spy&quot; to be called once, but got 2 times" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called once, but got 2 times
 ❯ src/telemetry/uiTelemetry.test.ts:142:17
            </failure>
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.000442989">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.000310073">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.000287151">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.000255462">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.000203646">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.026096534">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.000781685">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.001454649">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.001380561">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.001637396">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.001321041">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should reset the last prompt token count to 0" time="0.000218253">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should emit an update event when resetLastPromptTokenCount is called" time="0.000310094">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should not affect other metrics when resetLastPromptTokenCount is called" time="0.000163402">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should work correctly when called multiple times" time="0.000241877">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event with Line Count Metadata &gt; should aggregate valid line count metadata" time="0.001097187">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event with Line Count Metadata &gt; should ignore null/undefined values in line count metadata" time="0.001056943">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/diffOptions.test.ts" timestamp="2025-10-08T23:26:53.881Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.0050479">
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should return 0 for all stats when there are no changes" time="0.002384497">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report AI additions" time="0.000491238">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report AI removals" time="0.000178479">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report AI modifications" time="0.000147683">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user additions" time="0.000122106">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user removals" time="0.000111457">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user modifications" time="0.000119471">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should handle complex changes from both AI and user" time="0.000171497">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should report a single line modification as one addition and one removal" time="0.000131012">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-10-08T23:26:53.881Z" hostname="uby" tests="42" failures="0" errors="0" skipped="1" time="0.142976673">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return newString if isNewFile is true" time="0.002958458">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.000871421">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.000444522">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should replace oldString with newString in currentContent" time="0.000673895">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.000428913">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.023942303">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.00178563">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001730669">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should throw an error if params are invalid" time="0.001961135">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.007441635">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found" time="0.004069602">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found" time="0.003248714">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.004758425">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should throw error if file path is not absolute" time="0.003468641">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should throw error if file path is empty" time="0.003446901">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.006026259">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.003935113">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.00330018">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.002235893">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.002469494">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.001969981">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.002373928">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.002913736">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.002613992">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.00303548">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string and new_string are identical" time="0.003081305">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return EDIT_NO_CHANGE error if replacement results in identical content" time="0.004805542">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return FILE_NOT_FOUND error" time="0.0031975">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return ATTEMPT_TO_CREATE_EXISTING_FILE error" time="0.003810343">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return NO_OCCURRENCE_FOUND error" time="0.003712552">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return EXPECTED_OCCURRENCE_MISMATCH error" time="0.002414864">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return NO_CHANGE error" time="0.002244518">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should throw INVALID_PARAMETERS error for relative path" time="0.002462121">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return FILE_WRITE_FAILURE on write error" time="0.003097415">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.002952737">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.002821735">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.002619021">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.002400257">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.002203973">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.001754402">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; IDE mode &gt; should call ideClient.openDiff and update params on confirmation" time="0.003544491">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/exitPlanMode.test.ts" timestamp="2025-10-08T23:26:53.882Z" hostname="uby" tests="17" failures="0" errors="0" skipped="0" time="0.009003411">
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; constructor and metadata &gt; should have correct tool name" time="0.00209399">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; constructor and metadata &gt; should have correct display name" time="0.000193408">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; constructor and metadata &gt; should have correct kind" time="0.00012457">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; constructor and metadata &gt; should have correct schema" time="0.000796212">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should accept valid parameters" time="0.000214567">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should reject missing plan parameter" time="0.000125432">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should reject empty plan parameter" time="0.000106907">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should reject whitespace-only plan parameter" time="0.000098352">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should reject non-string plan parameter" time="0.000096037">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should execute successfully through tool interface after approval" time="0.001795298">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should request confirmation with plan details" time="0.000390442">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should remain in plan mode when confirmation is rejected" time="0.000289786">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should have correct description" time="0.000125542">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should handle execution errors gracefully" time="0.00068701">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should return empty tool locations" time="0.000169483">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool description &gt; should contain usage guidelines" time="0.000218684">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool description &gt; should contain examples" time="0.000102018">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-10-08T23:26:53.883Z" hostname="uby" tests="34" failures="0" errors="0" skipped="0" time="1.580731906">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.103428917">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.056745682">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.054903347">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.056195786">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.05693877">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.058263768">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.056018048">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.061372094">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files with special characters in the name" time="0.055993181">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files with special characters like [] and () in the path" time="0.058223985">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.056846168">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return a PATH_NOT_IN_WORKSPACE error if path is outside workspace" time="0.053103912">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return a GLOB_EXECUTION_ERROR on glob failure" time="0.061106843">
            <system-err>
GlobLogic execute Error: Glob failed Error: Glob failed
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/tools/glob.test.ts:229:46
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.055381562">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.056980276">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.055055328">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.056133791">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.055910369">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.057872706">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should pass if path is provided but is not a string (type coercion)" time="0.054450621">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should pass if case_sensitive is provided but is not a boolean (type coercion)" time="0.054370973">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.054830153">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.054453336">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.054749664">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should validate search paths are within workspace boundaries" time="0.054031286">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should provide clear error messages when path is outside workspace" time="0.055736498">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should work with paths in workspace subdirectories" time="0.058620528">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.009228777">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.000387627">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.000234874">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.000072574">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.000081932">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.000332745">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.000097851">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-10-08T23:26:53.884Z" hostname="uby" tests="25" failures="1" errors="0" skipped="0" time="0.157796164">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.03342528">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.007678092">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.00505853">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.003441131">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.002419683">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.00224547">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.001967917">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.016662417">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.010999029">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.007589327">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.005140862">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.00719047">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.009245429">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.006239332">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should throw an error if params are invalid" time="0.0030137">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return a GREP_EXECUTION_ERROR on failure" time="0.004085151">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
            <system-err>
GrepLogic: Error in performGrepSearch (Strategy: javascript fallback): filesIterator is not async iterable

Error during GrepLogic execution: TypeError: filesIterator is not async iterable

            </system-err>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; multi-directory workspace &gt; should search across all workspace directories when no path is specified" time="0.006002163">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; multi-directory workspace &gt; should search only specified path within workspace directories" time="0.003991037">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.003865825">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.002946476">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.002141438">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should indicate searching across all workspace directories when no path specified" time="0.003087627">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.003422265">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.002524175">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="Result limiting" time="0.001435253">
            <failure message="No test found in suite Result limiting" type="Error">
Error: No test found in suite Result limiting
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/ls.test.ts" timestamp="2025-10-08T23:26:53.885Z" hostname="uby" tests="22" failures="0" errors="0" skipped="0" time="0.065876209">
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should accept valid absolute paths within workspace" time="0.027930294">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should reject relative paths" time="0.002946916">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should reject paths outside workspace with clear error message" time="0.001864596">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should accept paths in secondary workspace directory" time="0.0016608">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should list files in a directory" time="0.002152579">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should list files from secondary workspace directory" time="0.00161796">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle empty directories" time="0.001441134">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect ignore patterns" time="0.001667172">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect gitignore patterns" time="0.001578016">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect geminiignore patterns" time="0.001572246">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle non-directory paths" time="0.001508208">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle non-existent paths" time="0.001587074">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should sort directories first, then files alphabetically" time="0.001531671">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle permission errors gracefully" time="0.001305142">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should throw for invalid params at build time" time="0.001326262">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle errors accessing individual files during listing" time="0.003084471">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; getDescription &gt; should return shortened relative path" time="0.001641554">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; getDescription &gt; should handle paths in secondary workspace" time="0.001953981">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should accept paths in primary workspace directory" time="0.001531321">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should accept paths in secondary workspace directory" time="0.001370353">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should reject paths outside all workspace directories" time="0.001408393">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should list files from secondary workspace directory" time="0.001489112">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client-manager.test.ts" timestamp="2025-10-08T23:26:53.886Z" hostname="uby" tests="1" failures="0" errors="0" skipped="0" time="0.002261981">
        <testcase classname="src/tools/mcp-client-manager.test.ts" name="McpClientManager &gt; should discover tools from all servers" time="0.001496185">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-10-08T23:26:53.886Z" hostname="uby" tests="42" failures="0" errors="0" skipped="0" time="0.022400422">
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should discover tools" time="0.004851878">
            <system-err>
Error discovering prompts from test-server: mcpClient.getServerCapabilities is not a function

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should skip tools if a parameter is missing a type" time="0.003284761">
            <system-err>
Error discovering prompts from test-server: mcpClient.getServerCapabilities is not a function

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should handle errors when discovering prompts" time="0.003095281">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should do nothing if no MCP servers or command are configured" time="0.000769823">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should discover tools via mcpServerCommand" time="0.000983358">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should handle error if mcpServerCommand parsing fails" time="0.000449581">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; without headers" time="0.000500556">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; with headers" time="0.000396463">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; without headers" time="0.000388989">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; with headers" time="0.000275359">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via command" time="0.000947452">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should use GoogleCredentialProvider when specified" time="0.000534147">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should use GoogleCredentialProvider with SSE transport" time="0.000278605">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should throw an error if no URL is provided with GoogleCredentialProvider" time="0.000365686">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if no include or exclude lists are provided" time="0.000233372">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in the exclude list" time="0.000144167">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list" time="0.000155908">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list with parentheses" time="0.000148024">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the include list exists but does not contain the tool" time="0.000117998">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in both the include and exclude lists" time="0.000115624">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the function declaration has no name" time="0.000281651">
            <system-err>
Discovered a function declaration without a name from MCP server &apos;myServer&apos;. Skipping.

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with anyOf" time="0.000154064">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with anyOf" time="0.000117096">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with allOf" time="0.000126153">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with allOf" time="0.000106767">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with oneOf" time="0.000103562">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with oneOf" time="0.000098412">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with nested subschemas" time="0.000114652">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with nested subschemas" time="0.0001032">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with a type and subschemas" time="0.000104032">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for a schema with no type and no subschemas" time="0.000100466">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema" time="0.000109282">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if a parameter is missing a type" time="0.000118249">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if a nested parameter is missing a type" time="0.000105174">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if an array item is missing a type" time="0.000105916">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with no properties" time="0.000109422">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with an empty properties object" time="0.000109302">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if only url is provided" time="0.000121344">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if only httpUrl is provided" time="0.000100405">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if both url and httpUrl are provided" time="0.000107249">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return false if neither url nor httpUrl is provided" time="0.000101638">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return false for an empty config object" time="0.000106777">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-10-08T23:26:53.887Z" hostname="uby" tests="33" failures="0" errors="0" skipped="0" time="0.033913522">
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should return a valid name for a simple function" time="0.001224984">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should replace invalid characters with underscores" time="0.000161268">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should truncate long names" time="0.000066994">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names with only invalid characters" time="0.000156589">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are exactly 63 characters long" time="0.000132646">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are exactly 64 characters long" time="0.000072283">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are longer than 64 characters" time="0.000072624">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly" time="0.02282104">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.000262144">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.001651442">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.000241997">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.00082202">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should return a structured error if MCP tool reports an error" time="0.000568791">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should return a structured error if MCP tool reports an error" time="0.000184932">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should consider a ToolResult with isError ${description} to be a success" time="0.000295086">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should consider a ToolResult with isError ${description} to be a success" time="0.000142473">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a simple text response correctly" time="0.000308941">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an AudioBlock response" time="0.000285918">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a ResourceLinkBlock response" time="0.000217132">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an embedded text ResourceBlock response" time="0.000188969">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an embedded binary ResourceBlock response" time="0.000177979">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a mix of content block types" time="0.000190512">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should ignore unknown content block types" time="0.000277503">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a complex mix of content block types" time="0.000219746">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.000188248">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.000117537">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.000107399">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.000320552">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.000225107">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.000133347">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should handle Cancel confirmation outcome" time="0.000132966">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should handle ProceedOnce confirmation outcome" time="0.000128368">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; DiscoveredMCPToolInvocation &gt; should return the stringified params from getDescription" time="0.00013002">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-10-08T23:26:53.888Z" hostname="uby" tests="29" failures="0" errors="0" skipped="0" time="0.043993022">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.00157482">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.000171557">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.000588438">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.001545707">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.000235355">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.000201763">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.000181786">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.000188659">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.000175084">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.006528376">
            <system-err>
[MemoryTool] Error adding memory entry to /mock/home/.qwen/QWEN.md: Error: Disk full
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/tools/memoryTool.test.ts:185:49
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.000640253">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success for global scope" time="0.023971987">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success for project scope" time="0.000549596">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.000347262">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.000567248">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot; in global: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return error when executing without scope parameter" time="0.000309713">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return confirmation details when memory file is not allowlisted for global scope" time="0.001409476">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return confirmation details when memory file is not allowlisted for project scope" time="0.000459319">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return false when memory file is already allowlisted for global scope" time="0.000212623">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return false when memory file is already allowlisted for project scope" time="0.000163552">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should add memory file to allowlist when ProceedAlways is confirmed for global scope" time="0.000364814">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should add memory file to allowlist when ProceedAlways is confirmed for project scope" time="0.000215057">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should not add memory file to allowlist when other outcomes are confirmed" time="0.000277193">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should handle existing memory file with content for global scope" time="0.000499032">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should prompt for scope selection when scope is not specified" time="0.000386885">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should show correct file paths in scope selection prompt" time="0.000276581">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; getDescription &gt; should return correct description for global scope" time="0.000236147">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; getDescription &gt; should return correct description for project scope" time="0.000119892">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; getDescription &gt; should show choice prompt when scope is not specified" time="0.00012463">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-10-08T23:26:53.889Z" hostname="uby" tests="11" failures="0" errors="0" skipped="0" time="0.044230852">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.016973372">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.005382067">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.004893565">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.003396278">
            <system-err>
Error deleting temp diff file: /tmp/qwen-code-tool-modify-diffs/qwen-code-modify-test-old-1759966008627.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.00157413">
            <system-err>
Error deleting temp diff file: /tmp/qwen-code-tool-modify-diffs/qwen-code-modify-test-new-1759966008631.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.001639099">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.002397752">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.002139314">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.003752225">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.000327395">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.000144187">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-10-08T23:26:53.889Z" hostname="uby" tests="25" failures="0" errors="0" skipped="0" time="0.158671501">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should return an invocation for valid params (absolute path within root)" time="0.032804292">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if file path is relative" time="0.003172694">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if path is outside root" time="0.002598203">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if path is empty" time="0.002214032">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if offset is negative" time="0.003063131">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if limit is zero or negative" time="0.003503947">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return relative path without limit/offset" time="0.003017156">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return shortened path when file path is deep" time="0.002451842">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should handle non-normalized file paths correctly" time="0.00318108">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.003037715">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if file does not exist" time="0.002613871">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.006000811">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if path is a directory" time="0.002783976">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error for a file that is too large" time="0.048122044">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle text file with lines exceeding maximum length" time="0.002888819">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle image file and return appropriate content" time="0.002046432">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle PDF file and return appropriate content" time="0.004087124">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle binary file and skip content" time="0.002972695">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle SVG file as text" time="0.003781028">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle large SVG file" time="0.005260533">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle empty file" time="0.003577853">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should support offset and limit for text files" time="0.003681615">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .qwenignore &gt; should throw error if path is ignored by a .qwenignore pattern" time="0.003848543">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .qwenignore &gt; should throw error if file is in an ignored directory" time="0.002942498">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .qwenignore &gt; should allow reading non-ignored files" time="0.003065546">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-10-08T23:26:53.890Z" hostname="uby" tests="31" failures="0" errors="0" skipped="0" time="0.295815113">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid relative paths within root" time="0.036396411">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid glob patterns within root" time="0.006141191">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for paths trying to escape the root (e.g., ../) as execute handles this" time="0.004297653">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for absolute paths as execute handles this" time="0.003208891">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if paths array is empty" time="0.010437471">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid exclude and include patterns" time="0.003567033">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if paths array contains an empty string" time="0.00378739">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should coerce non-string elements in include array" time="0.000564063">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if exclude array contains non-string elements" time="0.003486945">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.018059269">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.011250083">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.00835365">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.008552036">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle nonexistent specific files gracefully" time="0.004494818">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.005455544">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.004611643">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.004863419">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.006091428">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.00859704">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.008436002">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.012299413">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .qwenignore pattern" time="0.005524201">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files from multiple workspace directories" time="0.00638404">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should add a warning for truncated files" time="0.007148232">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files with special characters like [] and () in the path" time="0.00721756">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files with special characters in the name" time="0.006138456">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Error handling &gt; should return an INVALID_TOOL_PARAMS error if no paths are provided" time="0.002963377">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Error handling &gt; should return a READ_MANY_FILES_SEARCH_ERROR on glob failure" time="0.002817918">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should process files in parallel" time="0.017187538">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should handle batch processing errors gracefully" time="0.007545696">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should execute file operations concurrently" time="0.057930623">
            <system-out>
Execution order: [
  [32m&apos;start:file1.txt&apos;[39m,
  [32m&apos;start:file2.txt&apos;[39m,
  [32m&apos;start:file3.txt&apos;[39m,
  [32m&apos;end:file1.txt&apos;[39m,
  [32m&apos;end:file2.txt&apos;[39m,
  [32m&apos;end:file3.txt&apos;[39m
]

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/ripGrep.test.ts" timestamp="2025-10-08T23:26:53.891Z" hostname="uby" tests="36" failures="0" errors="0" skipped="0" time="0.340813764">
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.032406497">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.007500493">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.004535543">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.002855979">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for what would be an invalid regex pattern" time="0.002940415">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.004981337">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.005208657">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.00962473">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches in a specific path" time="0.009729904">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches with an include glob" time="0.018827388">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.015406175">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.008817637">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should return an error from ripgrep for invalid regex pattern" time="0.016522047">
            <system-err>
GrepLogic: ripgrep failed: ripgrep exited with code 2: 

Error during GrepLogic execution: Error: ripgrep exited with code 2: 

            </system-err>
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.01103713">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.015131527">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should throw an error if params are invalid" time="0.0041602">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; multi-directory workspace &gt; should search across all workspace directories when no path is specified" time="0.021749419">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; multi-directory workspace &gt; should search only specified path within workspace directories" time="0.013257945">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; abort signal handling &gt; should handle AbortSignal during search" time="0.005149809">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; abort signal handling &gt; should abort streaming search when signal is triggered" time="0.007788125">
            <system-err>
GrepLogic: ripgrep failed: ripgrep exited with code null: 

Error during GrepLogic execution: Error: ripgrep exited with code null: 

            </system-err>
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle workspace boundary violations" time="0.00349508">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle empty directories gracefully" time="0.013999996">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle empty files correctly" time="0.010317139">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle special characters in file names" time="0.01196786">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle deeply nested directories" time="0.014319677">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle complex regex patterns" time="0.016164777">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle case sensitivity correctly in JS fallback" time="0.011385434">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle escaped regex special characters" time="0.007855028">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; include pattern filtering &gt; should handle multiple file extensions in include pattern" time="0.009758827">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; include pattern filtering &gt; should handle directory patterns in include" time="0.006751208">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.004283678">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.002561946">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.00228332">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should indicate searching across all workspace directories when no path specified" time="0.002233919">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.001813902">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.001383146">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-10-08T23:26:53.892Z" hostname="uby" tests="37" failures="0" errors="0" skipped="0" time="0.14002657">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; isCommandAllowed &gt; should allow a command if no restrictions are provided" time="0.004031552">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; isCommandAllowed &gt; should block a command with command substitution using $()" time="0.001061492">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should return an invocation for a valid command" time="0.025386541">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should throw an error for an empty command" time="0.002776972">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should throw an error for a non-existent directory" time="0.002677749">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should include background indicator in description when is_background is true" time="0.003495781">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should not include background indicator in description when is_background is false" time="0.002698899">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should wrap command on linux and parse pgrep output" time="0.004541443">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should add ampersand to command when is_background is true and command does not end with &amp;" time="0.003546455">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should not add extra ampersand when is_background is true and command already ends with &amp;" time="0.003099869">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should not add ampersand when is_background is false" time="0.003176221">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should not wrap command on windows" time="0.004380516">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should format error messages correctly" time="0.003281555">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should return a SHELL_EXECUTE_ERROR for a command failure" time="0.002888299">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should throw an error for invalid parameters" time="0.002771412">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should throw an error for invalid directory" time="0.002402491">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should summarize output when configured" time="0.004215752">
            <system-err>
missing pgrep output

            </system-err>
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should clean up the temp file on synchronous execution error" time="0.004406314">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; Streaming to `updateOutput` &gt; should throttle text output updates" time="0.006352291">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; Streaming to `updateOutput` &gt; should immediately show binary detection message and throttle progress" time="0.004670703">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should add co-author to git commit with double quotes" time="0.003730555">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should add co-author to git commit with single quotes" time="0.003106532">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should handle git commit with additional flags" time="0.002547138">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should not modify non-git commands" time="0.002199475">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should not modify git commands without -m flag" time="0.003074192">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should handle git commit with escaped quotes in message" time="0.003179567">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should not add co-author when disabled in config" time="0.002307535">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should use custom name and email from config" time="0.002366905">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should not request confirmation for read-only commands" time="0.003021054">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should request confirmation for a new command and whitelist it on &quot;Always&quot;" time="0.003075014">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should throw an error if validation fails" time="0.002735927">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; getDescription &gt; should return the windows description when on windows" time="0.002115781">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; getDescription &gt; should return the non-windows description when not on windows" time="0.001114419">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="validateToolParams &gt; should return null for valid directory" time="0.002323474">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="validateToolParams &gt; should return error for directory outside workspace" time="0.004036721">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="build &gt; should return an invocation for valid directory" time="0.00216401">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="build &gt; should throw an error for directory outside workspace" time="0.002075646">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/task.test.ts" timestamp="2025-10-08T23:26:53.893Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.017388809">
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should initialize with correct name and properties" time="0.002980128">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should load available subagents during initialization" time="0.000616289">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should update description with available subagents" time="0.000409106">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should handle empty subagents list gracefully" time="0.000272914">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should handle subagent loading errors gracefully" time="0.001822979">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; schema generation &gt; should generate schema with subagent names as enum" time="0.0004975">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; schema generation &gt; should generate schema without enum when no subagents available" time="0.000353603">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should validate valid parameters" time="0.000347782">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should reject empty description" time="0.00059523">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should reject empty prompt" time="0.000426408">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should reject empty subagent_type" time="0.00038936">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should reject non-existent subagent" time="0.000302639">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; refreshSubagents &gt; should refresh available subagents and update description" time="0.000507718">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should execute subagent successfully" time="0.002046854">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should handle subagent not found error" time="0.000489595">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should handle execution errors gracefully" time="0.001256192">
            <system-err>
[TaskTool] Error running subagent: Creation failed

            </system-err>
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should execute subagent without live output callback" time="0.000661353">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should set context variables correctly" time="0.000667945">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should return structured display object" time="0.000612392">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should not require confirmation" time="0.00040586">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should provide correct description" time="0.000298081">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/todoWrite.test.ts" timestamp="2025-10-08T23:26:53.894Z" hostname="uby" tests="17" failures="0" errors="0" skipped="0" time="0.017327276">
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should validate correct parameters" time="0.003135926">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should accept empty todos array" time="0.00149847">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should accept single todo" time="0.001077201">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should reject todos with empty content" time="0.000873825">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should reject todos with empty id" time="0.000505203">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should reject todos with invalid status" time="0.000316775">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should reject todos with duplicate IDs" time="0.000249741">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; execute &gt; should create new todos file when none exists" time="0.002959189">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; execute &gt; should replace todos with new ones" time="0.000909191">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; execute &gt; should handle file write errors" time="0.00219085">
            <system-err>
[TodoWriteTool] Error executing todo_write: Write failed

            </system-err>
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; execute &gt; should handle empty todos array" time="0.00051402">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; tool properties &gt; should have correct tool name" time="0.000333046">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; tool properties &gt; should have correct display name" time="0.000169413">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; tool properties &gt; should have correct kind" time="0.000122246">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; tool properties &gt; should have schema with required properties" time="0.00054654">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; getDescription &gt; should return &quot;Create todos&quot; when no todos file exists" time="0.000233642">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; getDescription &gt; should return &quot;Update todos&quot; when todos file exists" time="0.000245915">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-10-08T23:26:53.894Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.090265677">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.032874381">
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at InstallationManager.readInstallationIdFromFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:21:50[90m)[39m
    at InstallationManager.getInstallationId [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:42:33[90m)[39m
    at QwenLogger.generateUserId [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:123:53[90m)[39m
    at new QwenLogger [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:114:24[90m)[39m
    at QwenLogger.getInstance [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:131:29[90m)[39m
    at logCliConfiguration [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/loggers.ts:85:14[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:454:5[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/tools/tool-registry.test.ts:120:14
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllTools &gt; should return all registered tools sorted alphabetically by displayName" time="0.002594545">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllToolNames &gt; should return all registered tool names" time="0.001841023">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.001540347">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name, sorted by name" time="0.004157955">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should will preserve tool parametersJsonSchema during discovery from command" time="0.003592169">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should return a DISCOVERED_TOOL_EXECUTION_ERROR on tool failure" time="0.034701228">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.003138421">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; DiscoveredToolInvocation &gt; should return the stringified params from getDescription" time="0.003178244">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tools.test.ts" timestamp="2025-10-08T23:26:53.895Z" hostname="uby" tests="11" failures="0" errors="0" skipped="0" time="0.006620096">
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return INVALID_TOOL_PARAMS error if build fails" time="0.003428657">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return EXECUTION_FAILED error if execute fails" time="0.000577898">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return the result of execute on success" time="0.00026536">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a simple direct cycle" time="0.000382357">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle from object properties referencing parent properties" time="0.000125672">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle from array items referencing parent properties" time="0.000077203">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle between sibling properties" time="0.000065601">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should not detect a cycle in a valid schema" time="0.000081741">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should handle non-cyclic sibling refs" time="0.000056394">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should handle nested but not cyclic refs" time="0.000046636">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should return false for an empty schema" time="0.000041166">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-10-08T23:26:53.895Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.046472865">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should throw validation error when url parameter is missing" time="0.02240469">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should return WEB_FETCH_FALLBACK_FAILED on fetch failure" time="0.006264288">
            <system-out>
[WebFetchTool] Private IP detected for https://private.ip, using direct fetch
[WebFetchTool] Fetching content from: https://private.ip

            </system-out>
            <system-err>
[WebFetchTool] Error during fetch for https://private.ip: fetch failed Error: fetch failed
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/tools/web-fetch.test.ts:55:9
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should return WEB_FETCH_FALLBACK_FAILED on API processing failure" time="0.009814089">
            <system-out>
[WebFetchTool] Public URL detected for https://public.ip, using direct fetch
[WebFetchTool] Fetching content from: https://public.ip

[WebFetchTool] Successfully fetched content from https://public.ip

[WebFetchTool] Converted HTML to text (12 characters)
[WebFetchTool] Processing content with prompt: &quot;summarize this&quot;

            </system-out>
            <system-err>
[WebFetchTool] Error during fetch for https://public.ip: API error Error: API error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/tools/web-fetch.test.ts:70:45
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.002325909">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return github urls as-is in confirmation details" time="0.001316753">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.00131442">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.00176903">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-search.test.ts" timestamp="2025-10-08T23:26:53.895Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.040260914">
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should return an invocation for a valid query" time="0.021635499">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should throw an error for an empty query" time="0.002330488">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should throw an error for a query with only whitespace" time="0.001583997">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; getDescription &gt; should return a description of the search" time="0.001478032">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should return search results for a successful query" time="0.00173125">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should handle no search results found" time="0.001475167">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should handle API errors gracefully" time="0.006225106">
            <system-err>
Error during web search for query &quot;error query&quot;: API Failure Error: API Failure
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/tools/web-search.test.ts:123:39
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should correctly format results with sources" time="0.002657552">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-10-08T23:26:53.896Z" hostname="uby" tests="25" failures="0" errors="0" skipped="0" time="0.096884621">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should return an invocation for a valid absolute path within root" time="0.029909863">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error for a relative path" time="0.003754098">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error for a path outside root" time="0.002523674">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error if path is a directory" time="0.00205599">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should coerce null content into an empty string" time="0.000490937">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw error if the file_path is empty" time="0.001647505">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should return proposed content unchanged for a new file" time="0.001202062">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should return proposed content unchanged for an existing file" time="0.001110492">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.001734365">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.001935287">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file" time="0.003361193">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file" time="0.003018409">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.002323415">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file and return diff" time="0.003836451">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file and return diff" time="0.007130189">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.00517232">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.003555552">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.004257519">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.00293249">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.002173638">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.002280856">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return PERMISSION_DENIED error when write fails with EACCES" time="0.002566283">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return NO_SPACE_LEFT error when write fails with ENOSPC" time="0.001937161">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return TARGET_IS_DIRECTORY error when write fails with EISDIR" time="0.001598054">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return FILE_WRITE_FAILURE for generic write errors" time="0.00224541">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-10-08T23:26:53.896Z" hostname="uby" tests="11" failures="0" errors="0" skipped="0" time="0.034511728">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.003860075">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a nested directory" time="0.002792691">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find multiple files with the same name" time="0.003618238">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should return an empty array if no file is found" time="0.001295144">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore directories specified in ignoreDirs" time="0.000845212">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect the maxDirs limit and not find the file" time="0.000793146">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect the maxDirs limit and find the file" time="0.00137965">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should ignore gitignored files" time="0.003557997">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should ignore geminiignored files" time="0.001380802">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should not ignore files if respect flags are false" time="0.003525356">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find all files in a complex directory structure" time="0.009985657">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-10-08T23:26:53.897Z" hostname="uby" tests="108" failures="0" errors="0" skipped="0" time="0.029399819">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if first command &quot;code&quot; exists on non-windows" time="0.003674671">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if none of the commands exist on non-windows" time="0.000305995">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if first command &quot;code.cmd&quot; exists on windows" time="0.000300506">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if none of the commands exist on windows" time="0.000150698">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if first command &quot;codium&quot; exists on non-windows" time="0.000194129">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if none of the commands exist on non-windows" time="0.000105205">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if first command &quot;codium.cmd&quot; exists on windows" time="0.00011918">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if none of the commands exist on windows" time="0.000086459">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if first command &quot;windsurf&quot; exists on non-windows" time="0.000157281">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if none of the commands exist on non-windows" time="0.000089486">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if first command &quot;windsurf&quot; exists on windows" time="0.000136492">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if none of the commands exist on windows" time="0.000106787">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if first command &quot;cursor&quot; exists on non-windows" time="0.000190292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if none of the commands exist on non-windows" time="0.000104623">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if first command &quot;cursor&quot; exists on windows" time="0.000110745">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if none of the commands exist on windows" time="0.000080789">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if first command &quot;vim&quot; exists on non-windows" time="0.000260662">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if none of the commands exist on non-windows" time="0.000109402">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if first command &quot;vim&quot; exists on windows" time="0.000120072">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if none of the commands exist on windows" time="0.000078685">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if first command &quot;nvim&quot; exists on non-windows" time="0.000101869">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if none of the commands exist on non-windows" time="0.000080609">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if first command &quot;nvim&quot; exists on windows" time="0.000098191">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if none of the commands exist on windows" time="0.000074147">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command &quot;zed&quot; exists on non-windows" time="0.00009705">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command doesn&apos;t exist but second command &quot;zeditor&quot; exists on non-windows" time="0.000211671">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if none of the commands exist on non-windows" time="0.000092391">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command &quot;zed&quot; exists on windows" time="0.000108079">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if none of the commands exist on windows" time="0.000077413">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return true if first command &quot;emacs&quot; exists on non-windows" time="0.000101007">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return false if none of the commands exist on non-windows" time="0.000076501">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return true if first command &quot;emacs.exe&quot; exists on windows" time="0.000095035">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return false if none of the commands exist on windows" time="0.000068046">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;code&quot; when it exists on non-windows" time="0.000360436">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;code&quot; when none exist on non-windows" time="0.000140219">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;code.cmd&quot; when it exists on windows" time="0.000178409">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;code.cmd&quot; when none exist on windows" time="0.000087842">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;codium&quot; when it exists on non-windows" time="0.000068818">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;codium&quot; when none exist on non-windows" time="0.000046516">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;codium.cmd&quot; when it exists on windows" time="0.000043791">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;codium.cmd&quot; when none exist on windows" time="0.000034363">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;windsurf&quot; when it exists on non-windows" time="0.000037079">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;windsurf&quot; when none exist on non-windows" time="0.000034354">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;windsurf&quot; when it exists on windows" time="0.000036598">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;windsurf&quot; when none exist on windows" time="0.000033793">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;cursor&quot; when it exists on non-windows" time="0.000034473">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;cursor&quot; when none exist on non-windows" time="0.000032601">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;cursor&quot; when it exists on windows" time="0.00003249">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;cursor&quot; when none exist on windows" time="0.000039934">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;zed&quot; when it exists on non-windows" time="0.000087081">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use second command &quot;zeditor&quot; when first doesn&apos;t exist on non-windows" time="0.000120422">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;zeditor&quot; when none exist on non-windows" time="0.000052828">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;zed&quot; when it exists on windows" time="0.000137394">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;zed&quot; when none exist on windows" time="0.000091629">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.000134167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.000044723">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for emacs" time="0.000068086">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.0000702">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.001153532">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.001178608">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.00032465">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.000294084">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.000169193">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.001162268">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.000299514">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.000186334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.000144226">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.000146461">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.000111586">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.000168291">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.000254351">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.000157832">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.000123578">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.000247207">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.000159264">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.000091549">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.000062466">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for emacs on non-windows" time="0.000073826">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for emacs on windows" time="0.000076652">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.000262044">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for execSync editors" time="0.000155978">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for execSync editors when an error is thrown" time="0.006788707">
            <system-err>
Error in onEditorClose callback: Error: test error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/editor.test.ts:437:17
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at Module.openDiff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/editor.ts:211:11[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/editor.test.ts:440:9
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should not call onEditorClose for spawn editors" time="0.000766878">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.000361909">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.000166848">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow emacs in sandbox mode" time="0.000138195">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow emacs when not in sandbox mode" time="0.000090227">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.0000916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.000085799">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.000085518">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.000072845">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.000065942">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.000063447">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.000065431">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.000062155">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.000065611">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.00008694">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.000068556">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.000082362">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.00024332">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000118869">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.000084105">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.000132625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.000144817">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.000134328">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.000121585">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for emacs when installed and in sandbox mode" time="0.000100737">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.000117857">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/environmentContext.test.ts" timestamp="2025-10-08T23:26:53.900Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.02717119">
        <testcase classname="src/utils/environmentContext.test.ts" name="getDirectoryContextString &gt; should return context string for a single directory" time="0.001940296">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getDirectoryContextString &gt; should return context string for multiple directories" time="0.000399899">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should return basic environment context for a single directory" time="0.012525721">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should return basic environment context for multiple directories" time="0.000736892">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should include full file context when getFullContext is true" time="0.001247356">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle read_many_files returning no content" time="0.001624452">
            <system-err>
Full context requested, but read_many_files returned no content.

            </system-err>
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle read_many_files tool not being found" time="0.001985319">
            <system-err>
Full context requested, but read_many_files tool not found.

            </system-err>
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle errors when reading full file context" time="0.005303994">
            <system-err>
Error reading full file context: Error: Read error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/environmentContext.test.ts:205:44
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorParsing.test.ts" timestamp="2025-10-08T23:26:53.900Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.005485508">
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a valid API error JSON" time="0.001389628">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the default message" time="0.000437288">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the personal message" time="0.000220758">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the vertex message" time="0.000084907">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should return the original message if it is not a JSON error" time="0.000052447">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should return the original message for malformed JSON" time="0.00006482">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle JSON that does not match the ApiError structure" time="0.000087101">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a nested API error" time="0.000138586">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a StructuredError" time="0.000089085">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 StructuredError with the vertex message" time="0.00008657">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle an unknown error type" time="0.000057947">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Free tier)" time="0.00017329">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a regular 429 API error with standard message for Google auth" time="0.000220578">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with generic quota exceeded message for Google auth" time="0.000153875">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should prioritize Pro quota message over generic quota message for Google auth" time="0.000120713">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Standard tier)" time="0.000154616">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Legacy tier)" time="0.00008146">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle different Gemini 2.5 version strings in Pro quota exceeded errors" time="0.000078525">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should not match non-Pro models with similar version strings" time="0.000085227">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a generic quota exceeded message for Google auth (Standard tier)" time="0.000082062">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a regular 429 API error with standard message for Google auth (Standard tier)" time="0.000091489">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-10-08T23:26:53.901Z" hostname="uby" tests="6" failures="0" errors="0" skipped="0" time="0.029321445">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.007608072">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.001474646">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.002124436">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.007424192">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.006947591">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.002317533">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-10-08T23:26:53.901Z" hostname="uby" tests="40" failures="0" errors="0" skipped="0" time="0.054342861">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.001860158">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.000412463">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.000323979">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.000258979">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.000300656">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.000256865">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.000235616">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.00123937">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.000990331">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.001212">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.001517365">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.00166089">
            <system-err>
Failed to check if file is binary: /tmp/fileUtils-test-ZdzP13/binaryCheck.tmp ENOENT: no such file or directory, open &apos;/tmp/fileUtils-test-ZdzP13/binaryCheck.tmp&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts, mts, cts, tsx)" time="0.002024552">
            <system-err>
Failed to check if file is binary: component.tsx ENOENT: no such file or directory, open &apos;component.tsx&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.000682401">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.000480799">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect svg type by extension" time="0.000347152">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.000548133">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.000488653">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.000446826">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.000422531">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.000731411">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.005246136">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.001005469">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.002776582">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.000948453">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.000942953">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.000505735">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.000672864">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.000629694">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read an SVG file as text when under 1MB" time="0.000740178">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.000439232">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.000361348">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.001299241">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should identify truncation when reading the end of a file" time="0.000723537">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.000581054">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.000680418">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate when line count exceeds the limit" time="0.000507177">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate when a line length exceeds the character limit" time="0.000690516">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate both line count and line length when both exceed limits" time="0.001343593">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.016001155">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.ts" timestamp="2025-10-08T23:26:53.902Z" hostname="uby" tests="4" failures="0" errors="0" skipped="0" time="0.179613227">
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.022721867">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010593.bak

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at InstallationManager.readInstallationIdFromFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:21:50[90m)[39m
    at InstallationManager.getInstallationId [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/installationManager.ts:42:33[90m)[39m
    at QwenLogger.generateUserId [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:123:53[90m)[39m
    at new QwenLogger [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:114:24[90m)[39m
    at QwenLogger.getInstance [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:131:29[90m)[39m
    at logCliConfiguration [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/telemetry/loggers.ts:85:14[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/config/config.ts:454:5[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/flashFallback.integration.test.ts:33:14
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.004692403">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010594.bak

            </system-out>
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/flashFallback.integration.test.ts:69:30
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.150279099">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010599.bak

            </system-out>
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/flashFallback.integration.test.ts:109:51
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/flashFallback.integration.test.ts:109:51
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/flashFallback.integration.test.ts:109:51
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/flashFallback.integration.test.ts:109:51
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.000804577">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1759966010749.bak

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-10-08T23:26:53.903Z" hostname="uby" tests="29" failures="0" errors="0" skipped="0" time="0.00602153">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.001259878">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.00028675">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.000121785">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.000100496">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.000072464">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.00014618">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.000074257">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.000130521">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.000685727">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.000136042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.00007572">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.000038732">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.000063978">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.000084076">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.000067615">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.000088373">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.000042739">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.00008092">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.000050123">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.000070831">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.000034464">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.000123849">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.000297089">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.000110995">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.000042058">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.000075449">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.000054471">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.00004345">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.000037359">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-10-08T23:26:53.903Z" hostname="uby" tests="15" failures="2" errors="0" skipped="0" time="0.079715648">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.008108757">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.00122786">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.008298278">
            <failure message="expected &apos;Showing up to 20 items (files + folde…&apos; to be &apos;Showing up to 20 items (files + folde…&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;Showing up to 20 items (files + folde…&apos; to be &apos;Showing up to 20 items (files + folde…&apos; // Object.is equality

- Expected
+ Received

@@ -1,6 +1,6 @@
- Showing up to 20 items (files + folders). Folders or files indicated with ... contain more items not shown, were ignored, or the display limit (20 items) was reached.
+ Showing up to 20 items (files + folders). Folders or files indicated with ... contain more items not shown, were ignored, or the display limit (20 items) was reached. Truncated directories to inspect further: node_modules. Consider running /list_directory &lt;path&gt; or /glob for deeper listings.

  /tmp/folder-structure-test-r3btqd/
  ├───.hiddenfile
  ├───file1.txt
  ├───emptyFolder/

 ❯ src/utils/getFolderStructure.test.ts:82:30
            </failure>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.002478992">
            <failure message="expected &apos;Showing up to 20 items (files + folde…&apos; to be &apos;Showing up to 20 items (files + folde…&apos; // Object.is equality" type="AssertionError">
AssertionError: expected &apos;Showing up to 20 items (files + folde…&apos; to be &apos;Showing up to 20 items (files + folde…&apos; // Object.is equality

- Expected
+ Received

@@ -1,6 +1,6 @@
- Showing up to 20 items (files + folders). Folders or files indicated with ... contain more items not shown, were ignored, or the display limit (20 items) was reached.
+ Showing up to 20 items (files + folders). Folders or files indicated with ... contain more items not shown, were ignored, or the display limit (20 items) was reached. Truncated directories to inspect further: node_modules, subfolderA. Consider running /list_directory &lt;path&gt; or /glob for deeper listings.

  /tmp/folder-structure-test-LvDswN/
  ├───.hiddenfile
  ├───file1.txt
  ├───emptyFolder/

 ❯ src/utils/getFolderStructure.test.ts:120:30
            </failure>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.002933392">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.002987532">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.028679017">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.001488792">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.001987163">
            <system-err>
Warning: Could not read directory /tmp/folder-structure-test-DyTJpV/non-existent: ENOENT: no such file or directory, scandir &apos;/tmp/folder-structure-test-DyTJpV/non-existent&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.003138892">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.002609182">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with gitignore &gt; should ignore files and folders specified in .gitignore" time="0.004887353">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.003545924">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with geminiignore &gt; should ignore geminiignore files by default" time="0.002950624">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with geminiignore &gt; should not ignore files if respectGeminiIgnore is false" time="0.002460157">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-10-08T23:26:53.904Z" hostname="uby" tests="18" failures="0" errors="0" skipped="0" time="0.050271226">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.010357494">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.013218312">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.002057322">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.002980219">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .qwenignore exists" time="0.000823783">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.00172018">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.001668814">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.001327424">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.001653046">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.001036545">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.000878274">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.002171153">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.000981524">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.001328416">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle root path &quot;/&quot; without throwing error" time="0.001545527">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute-like paths without throwing error" time="0.001020075">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths that start with forward slash" time="0.002044328">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.001664005">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/ignorePatterns.test.ts" timestamp="2025-10-08T23:26:53.905Z" hostname="uby" tests="28" failures="0" errors="0" skipped="0" time="0.010001726">
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getCoreIgnorePatterns &gt; should return basic ignore patterns" time="0.002248306">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should return comprehensive patterns by default" time="0.000842667">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should respect includeDefaults option" time="0.000295376">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should include custom patterns" time="0.000174081">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should include runtime patterns" time="0.000123428">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should respect includeDynamicPatterns option" time="0.000150188">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getReadManyFilesExcludes &gt; should provide legacy compatibility" time="0.000209177">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getGlobExcludes &gt; should return core patterns for glob operations" time="0.000215388">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getGlobExcludes &gt; should include additional excludes" time="0.000105996">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should use config custom excludes when available" time="0.00032482">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should handle config without getCustomExcludes method" time="0.000881239">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should include config custom excludes in glob patterns" time="0.000266803">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; buildExcludePatterns &gt; should be an alias for getDefaultExcludePatterns" time="0.000755306">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include common binary file extensions" time="0.000215578">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include additional binary extensions" time="0.000138346">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include media file extensions" time="0.000142093">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should be sorted" time="0.000125342">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should not contain invalid extensions from brace patterns" time="0.000133777">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should extract simple extensions" time="0.000099484">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle brace expansion patterns" time="0.000187236">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should combine simple and brace expansion patterns" time="0.000111265">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle empty brace expansion" time="0.000062395">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should ignore invalid patterns" time="0.000050223">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should remove duplicates and sort results" time="0.000056604">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle complex brace patterns with multiple extensions" time="0.00004332">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle compound extensions correctly using path.extname" time="0.000056675">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle dotfiles correctly" time="0.000053769">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle edge cases with path.extname" time="0.000046156">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/installationManager.test.ts" timestamp="2025-10-08T23:26:53.906Z" hostname="uby" tests="4" failures="0" errors="0" skipped="0" time="0.008680655">
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should create and write a new installation ID if one does not exist" time="0.005221561">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should read an existing installation ID from a file" time="0.000869457">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should return the same ID on subsequent calls" time="0.000394178">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should handle read errors and return a fallback ID" time="0.000888212">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-10-08T23:26:53.906Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.094220547">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.007812811">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.01557647">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.008041723">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.003547296">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.003525386">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.002451411">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.008279052">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.005199731">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.004283818">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect the maxDirs parameter during downward scan" time="0.017363393">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.002765342">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load memory from included directories" time="0.002308617">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should handle multiple directories and files in parallel correctly" time="0.00776377">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should preserve order and prevent duplicates when processing multiple directories" time="0.003557876">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-10-08T23:26:53.906Z" hostname="uby" tests="23" failures="0" errors="0" skipped="0" time="0.02429264">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.012021709">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should import non-md files just like md files" time="0.00089261">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.000439212">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.000482511">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.000333767">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.000395401">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.000330241">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.000353153">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should ignore imports inside code blocks" time="0.000640474">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should ignore imports inside inline code" time="0.000448039">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested tokens and non-unique content correctly" time="0.000262816">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should allow imports from parent and subdirectories within project root" time="0.000262906">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should reject imports outside project root" time="0.000245614">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should build import tree structure" time="0.001322795">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should produce flat output in Claude-style with unique files in order" time="0.000782717">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should not duplicate files in flat output if imported multiple times" time="0.000339117">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports in flat output" time="0.001630974">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.000258869">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.000269448">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000304172">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.00036803">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.000250443">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.000274658">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-10-08T23:26:53.907Z" hostname="uby" tests="10" failures="0" errors="0" skipped="0" time="0.046738487">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.006945116">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.003262521">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.004668278">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.004460093">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.004064122">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.004021122">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.003878499">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.004308002">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.004553326">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should call generateJson with DEFAULT_QWEN_FLASH_MODEL" time="0.005154797">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/partUtils.test.ts" timestamp="2025-10-08T23:26:53.907Z" hostname="uby" tests="37" failures="0" errors="0" skipped="0" time="0.008637985">
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return empty string for undefined or null" time="0.0015581">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return string input unchanged" time="0.000175314">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should concatenate strings from an array" time="0.000104583">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return text property when provided a text part" time="0.000089515">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return empty string for non-text parts" time="0.000122907">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return empty string for undefined or null" time="0.000123318">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return string input unchanged" time="0.000088784">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should join parts if the value is an array" time="0.000076832">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return the text property if the part is an object with text" time="0.000076872">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for videoMetadata part" time="0.000072915">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for thought part" time="0.000065571">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for codeExecutionResult part" time="0.000064299">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for executableCode part" time="0.000064379">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for fileData part" time="0.000068036">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for functionCall part" time="0.000065561">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for functionResponse part" time="0.000091479">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for inlineData part" time="0.000076311">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return an empty string for an unknown part type" time="0.000069729">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should handle complex nested arrays with various part types" time="0.000094995">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null when no candidates exist" time="0.000181295">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return concatenated text from first candidate" time="0.000102619">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should ignore parts without text" time="0.00007042">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null when candidate has no parts" time="0.00006484">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null if the first candidate has no content property" time="0.000084566">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should return an empty array for empty input" time="0.000751799">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform a simple string input" time="0.000231999">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform a single text part object" time="0.000121614">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform an array of text parts and flatten the result" time="0.000141842">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should pass through non-text parts unmodified" time="0.000091279">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should handle a mix of text and non-text parts in an array" time="0.000134148">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should handle a transform that returns an empty array" time="0.000106316">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to an empty prompt" time="0.00107678">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to a prompt with a string as the last part" time="0.000132054">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to a prompt with a text part object as the last part" time="0.00008141">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append a new text part if the last part is not a text part" time="0.000076">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should not append anything if the text to append is empty" time="0.000053068">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should use a custom separator" time="0.00005971">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/pathReader.test.ts" timestamp="2025-10-08T23:26:53.908Z" hostname="uby" tests="16" failures="0" errors="0" skipped="0" time="0.060330939">
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a text file from the CWD" time="0.010024248">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a file from a secondary workspace directory" time="0.001610166">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should prioritize CWD when file exists in both CWD and secondary dir" time="0.000858937">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read an image file and return it as inlineData (Part object)" time="0.001191833">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a generic binary file and return an info string" time="0.000561407">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a file from an absolute path if within workspace" time="0.001372487">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should expand a directory and read the content of its files" time="0.006944585">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should recursively expand a directory and read all nested files" time="0.001706353">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should handle mixed content and include files from subdirectories" time="0.001867913">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should handle an empty directory" time="0.001503509">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; File Ignoring &gt; should return an empty array for an ignored file" time="0.001592183">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; File Ignoring &gt; should not read ignored files when expanding a directory" time="0.001548142">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should throw an error for an absolute path outside the workspace" time="0.00128787">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should throw an error if a relative path is not found anywhere" time="0.000576606">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should return an error string if reading a file with no permissions" time="0.001800468">
            <system-err>
Failed to check if file is binary: /test/cwd/unreadable.txt EACCES, permission denied &apos;/test/cwd/unreadable.txt&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should return an error string for files exceeding the size limit" time="0.024319199">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/paths.test.ts" timestamp="2025-10-08T23:26:53.909Z" hostname="uby" tests="55" failures="0" errors="0" skipped="0" time="0.006951819">
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape spaces" time="0.001334998">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape tabs" time="0.000341131">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape parentheses" time="0.000116465">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape square brackets" time="0.000073285">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape curly braces" time="0.000060432">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape semicolons" time="0.000052076">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape ampersands" time="0.00005924">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape pipes" time="0.000060943">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape asterisks" time="0.000081871">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape question marks" time="0.000060091">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape dollar signs" time="0.000052046">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape backticks" time="0.000059911">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape single quotes" time="0.000161038">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape double quotes" time="0.000044743">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape hash symbols" time="0.000030536">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape exclamation marks" time="0.000027772">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape tildes" time="0.00002687">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape less than and greater than signs" time="0.000031047">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle multiple special characters" time="0.000066843">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should not double-escape already escaped characters" time="0.000084316">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle escaped backslashes correctly" time="0.000122546">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle complex escaped backslash scenarios" time="0.000093864">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle paths without special characters" time="0.000071592">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle complex real-world examples" time="0.000086971">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle empty strings" time="0.000050543">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle paths with only special characters" time="0.000047217">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape spaces" time="0.00016771">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape tabs" time="0.000065601">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape parentheses" time="0.000039122">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape square brackets" time="0.000045314">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape curly braces" time="0.000044071">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape multiple special characters" time="0.000033141">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle paths without escaped characters" time="0.000036819">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle all special characters" time="0.000026689">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should be the inverse of escapePath" time="0.00010808">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle empty strings" time="0.000041286">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should not affect backslashes not followed by special characters" time="0.000037148">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle escaped backslashes in unescaping" time="0.000051655">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return true for a direct subpath" time="0.000121875">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return true for the same path" time="0.000036608">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return false for a parent path" time="0.000043109">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return false for a completely different path" time="0.000055682">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle relative paths" time="0.000109302">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle paths with .." time="0.000069919">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle root paths" time="0.000085247">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle trailing slashes" time="0.000084567">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return true for a direct subpath on Windows" time="0.000136322">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return true for the same path on Windows" time="0.000043029">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return false for a parent path on Windows" time="0.000045484">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return false for a different drive on Windows" time="0.000036988">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should be case-insensitive for drive letters on Windows" time="0.000031699">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should be case-insensitive for path components on Windows" time="0.000044482">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle mixed slashes on Windows" time="0.000060341">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle trailing slashes on Windows" time="0.000055332">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle relative paths correctly on Windows" time="0.000107859">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/quotaErrorDetection.test.ts" timestamp="2025-10-08T23:26:53.910Z" hostname="uby" tests="27" failures="0" errors="0" skipped="0" time="0.006106416">
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect insufficient_quota error message" time="0.001550365">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect free allocated quota exceeded error message" time="0.000207374">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect quota exceeded error message" time="0.000102559">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect quota exceeded in string error" time="0.000072924">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect quota exceeded in structured error" time="0.000075179">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect quota exceeded in API error" time="0.000095076">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should not detect throttling errors as quota exceeded" time="0.000070199">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should not detect unrelated errors" time="0.000078515">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect throttling error with 429 status" time="0.000221649">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect requests throttling triggered with 429 status" time="0.000080188">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect rate limit error with 429 status" time="0.000064449">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect too many requests with 429 status" time="0.000055953">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect throttling in string error" time="0.000052677">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect throttling in structured error with 429" time="0.000051946">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect throttling in API error with 429" time="0.000087461">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should not detect throttling without 429 status in structured error" time="0.000065521">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should not detect quota exceeded as throttling" time="0.000051755">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should not detect unrelated errors as throttling" time="0.000046946">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isProQuotaExceededError &gt; should detect Gemini Pro quota exceeded error" time="0.000170866">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isProQuotaExceededError &gt; should detect Gemini preview Pro quota exceeded error" time="0.000072353">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isProQuotaExceededError &gt; should not detect non-Pro quota errors" time="0.000057066">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isGenericQuotaExceededError &gt; should detect generic quota exceeded error" time="0.000326303">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isGenericQuotaExceededError &gt; should not detect non-quota errors" time="0.000124029">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; type guards &gt; isApiError &gt; should detect valid API error" time="0.000085157">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; type guards &gt; isApiError &gt; should not detect invalid API error" time="0.000058418">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; type guards &gt; isStructuredError &gt; should detect valid structured error" time="0.000060292">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; type guards &gt; isStructuredError &gt; should not detect invalid structured error" time="0.000051875">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-10-08T23:26:53.911Z" hostname="uby" tests="20" failures="0" errors="0" skipped="0" time="0.031501524">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.0045445">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.008494731">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:63:21
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.002154012">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:79:21
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.000547863">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.000634322">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.0004813">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.002118104">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:162:21
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.001733864">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m
    at runRetry [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:191:7[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:198:22
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m
    at runRetry [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:191:7[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:213:22
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.001512015">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.000648789">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.000471932">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.001372016">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.001098721">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:378:36
    at mockCall (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-dev/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.ts:191:20[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:389:23
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should retry for Qwen OAuth 429 errors that are throttling-related" time="0.000512868">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should throw immediately for Qwen OAuth with insufficient_quota message" time="0.00041121">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should throw immediately for Qwen OAuth with free allocated quota exceeded message" time="0.000374743">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should retry for Qwen OAuth with throttling message" time="0.00055719">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should retry for Qwen OAuth with throttling error" time="0.000519801">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should throw immediately for Qwen OAuth with quota message" time="0.000415147">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should retry normal errors for Qwen OAuth (not quota-related)" time="0.001277541">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Network error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:550:38
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Network error
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/retry.test.ts:550:38
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonParse.test.ts" timestamp="2025-10-08T23:26:53.912Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.008479603">
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; valid JSON parsing &gt; should parse valid JSON correctly" time="0.002024402">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; valid JSON parsing &gt; should parse valid JSON arrays" time="0.000256945">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; valid JSON parsing &gt; should parse valid JSON with nested objects" time="0.000195631">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; malformed JSON with jsonrepair fallback &gt; should handle malformed JSON with single quotes" time="0.002117013">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; malformed JSON with jsonrepair fallback &gt; should handle malformed JSON with unquoted keys" time="0.000452276">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; malformed JSON with jsonrepair fallback &gt; should handle malformed JSON with trailing commas" time="0.000262546">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; malformed JSON with jsonrepair fallback &gt; should handle malformed JSON with comments" time="0.000170585">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return fallback value for empty string" time="0.00011351">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return fallback value for null input" time="0.000106828">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return fallback value for undefined input" time="0.000512538">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return empty object as default fallback" time="0.000195822">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return custom fallback when parsing fails" time="0.000113791">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; type safety &gt; should preserve generic type when parsing valid JSON" time="0.000257877">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; type safety &gt; should return fallback type when parsing fails" time="0.000124921">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonStringify.test.ts" timestamp="2025-10-08T23:26:53.912Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.00352777">
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should stringify normal objects without issues" time="0.001420987">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references by replacing them with [Circular]" time="0.000265481">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle complex circular structures like HttpsProxyAgent" time="0.000236648">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should respect the space parameter for formatting" time="0.000073687">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references with formatting" time="0.000052116">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle arrays with circular references" time="0.000090126">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle null and undefined values" time="0.000086099">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle primitive values" time="0.000076652">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/secure-browser-launcher.test.ts" timestamp="2025-10-08T23:26:53.913Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.01409935">
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should allow valid HTTP URLs" time="0.004492253">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should allow valid HTTPS URLs" time="0.000739557">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject non-HTTP(S) protocols" time="0.001795528">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject invalid URLs" time="0.000418313">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject URLs with control characters" time="0.000436005">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should prevent PowerShell command injection on Windows" time="0.000525">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should handle URLs with special shell characters safely" time="0.001026387">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should properly escape single quotes in URLs on Windows" time="0.000248749">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use correct command on macOS" time="0.000312908">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use PowerShell on Windows" time="0.000663006">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use xdg-open on Linux" time="0.00034621">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should throw on unsupported platforms" time="0.000267755">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Error handling &gt; should handle browser launch failures gracefully" time="0.000429384">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Error handling &gt; should try fallback browsers on Linux" time="0.000521454">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/shell-utils.test.ts" timestamp="2025-10-08T23:26:53.913Z" hostname="uby" tests="51" failures="0" errors="0" skipped="0" time="0.01079352">
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a command if no restrictions are provided" time="0.001729978">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a command if it is in the global allowlist" time="0.000327135">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command if it is not in a strict global allowlist" time="0.000190923">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command if it is in the blocked list" time="0.000155087">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should prioritize the blocklist over the allowlist" time="0.000151059">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow any command when a wildcard is in coreTools" time="0.000087381">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block any command when a wildcard is in excludeTools" time="0.000083835">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command on the blocklist even with a wildcard allow" time="0.000121214">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a chained command if all parts are on the global allowlist" time="0.000128458">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a chained command if any part is blocked" time="0.000093553">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using `$(...)`" time="0.000161749">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using `&lt;(...)`" time="0.000080098">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using backticks" time="0.000109642">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should allow substitution-like patterns inside single quotes" time="0.0001734">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed success object for an allowed command" time="0.000526253">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed failure object for a blocked command" time="0.000133517">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed failure object for a command not on a strict allowlist" time="0.000165306">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a command on the sessionAllowlist" time="0.000181867">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a command not on the sessionAllowlist or global allowlist" time="0.000173952">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a command on the global allowlist even if not on the session allowlist" time="0.000089455">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a chained command if parts are on different allowlists" time="0.00007032">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a command on the sessionAllowlist if it is also globally blocked" time="0.000068156">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a chained command if one part is not on any allowlist" time="0.000098342">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should return a single command" time="0.000238191">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should handle paths and return the binary name" time="0.000176005">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should return an empty array for an empty string" time="0.000090367">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should handle a mix of operators" time="0.000106958">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should correctly parse a chained command with quotes" time="0.000098202">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip sh -c with quotes" time="0.000188509">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip bash -c with extra whitespace" time="0.000124821">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip zsh -c without quotes" time="0.000073817">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip cmd.exe /c" time="0.000061724">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should not strip anything if no wrapper is present" time="0.000112578">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; POSIX (bash) &gt; should use shell-quote for escaping" time="0.001043188">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; POSIX (bash) &gt; should handle empty strings" time="0.000189621">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should wrap simple arguments in double quotes" time="0.00013005">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should escape internal double quotes by doubling them" time="0.0000545">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should handle empty strings" time="0.000040696">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should wrap simple arguments in single quotes" time="0.000071602">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should escape internal single quotes by doubling them" time="0.00004373">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should handle double quotes without escaping them" time="0.00003756">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should handle empty strings" time="0.00003776">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; should return bash configuration on Linux" time="0.000165446">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; should return bash configuration on macOS (darwin)" time="0.000074869">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return cmd.exe configuration by default" time="0.000085638">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should respect ComSpec for cmd.exe" time="0.000082102">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return PowerShell configuration if ComSpec points to powershell.exe" time="0.000073346">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return PowerShell configuration if ComSpec points to pwsh.exe" time="0.000094985">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should be case-insensitive when checking ComSpec" time="0.000075179">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandNeedPermission &gt; returns false for read-only commands" time="0.000299183">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandNeedPermission &gt; returns true for mutating commands with reason" time="0.000115523">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/shellReadOnlyChecker.test.ts" timestamp="2025-10-08T23:26:53.915Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.0033866">
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; allows simple read-only command" time="0.001639119">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects mutating commands like rm" time="0.000247377">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects redirection output" time="0.00010822">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects command substitution" time="0.00006509">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; allows git status but rejects git commit" time="0.000168341">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects find with exec" time="0.000137545">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects sed in-place" time="0.000100265">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects empty command" time="0.000043209">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; respects environment prefix followed by allowed command" time="0.00005434">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/subagentGenerator.test.ts" timestamp="2025-10-08T23:26:53.915Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.04115728">
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error for empty user description" time="0.006528486">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should successfully generate content with valid LLM response" time="0.004994111">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error when LLM response is missing required fields" time="0.002316261">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error when LLM response has empty fields" time="0.00347855">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error when generateJson throws an error" time="0.003851409">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should call generateJson with correct schema and model" time="0.006015569">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should include user description in the prompt" time="0.004708363">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error for null response from generateJson" time="0.003652461">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error for undefined response from generateJson" time="0.004185135">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/summarizer.test.ts" timestamp="2025-10-08T23:26:53.915Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.029001182">
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is shorter than maxLength" time="0.004990383">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is empty" time="0.001843568">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should call generateContent if text is longer than maxLength" time="0.002347258">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if generateContent throws an error" time="0.004343699">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should construct the correct prompt for summarization" time="0.003201227">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should summarize tool output using summarizeToolOutput" time="0.003788802">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should handle different llmContent types" time="0.003436302">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; defaultSummarizer &gt; should stringify the llmContent" time="0.003519946">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/systemEncoding.test.ts" timestamp="2025-10-08T23:26:53.915Z" hostname="uby" tests="38" failures="0" errors="0" skipped="0" time="0.016427503">
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should map common Windows code pages correctly" time="0.001975932">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should return null for unmapped code pages and warn" time="0.001916282">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should handle all Windows-specific code pages" time="0.000398507">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should detect encoding using chardet successfully" time="0.000962058">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should handle chardet returning mixed case encoding" time="0.000234353">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet fails" time="0.001118287">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet returns null" time="0.000230617">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet returns non-string" time="0.000175755">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should parse Windows chcp output correctly" time="0.000669308">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should handle different chcp output formats" time="0.000220648">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should handle chcp output with extra whitespace" time="0.000110765">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when chcp command fails" time="0.000518649">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when chcp output cannot be parsed" time="0.000223293">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when code page is not a number" time="0.000209177">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when code page maps to null" time="0.000165647">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LC_ALL environment variable" time="0.000177739">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LC_CTYPE when LC_ALL is not set" time="0.000155818">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LANG when LC_ALL and LC_CTYPE are not set" time="0.000130391">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale charmap command when environment variables are empty" time="0.000202034">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale charmap with mixed case" time="0.000122717">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should return null when locale charmap fails" time="0.002084743">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale without encoding (no dot)" time="0.000363732">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle empty locale environment variables" time="0.000181335">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should return locale as-is when locale format has no dot" time="0.000153493">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should prioritize LC_ALL over other environment variables" time="0.00018939">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should prioritize LC_CTYPE over LANG" time="0.00012427">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should use cached system encoding on subsequent calls" time="0.000165376">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should fall back to buffer detection when system encoding fails" time="0.000255262">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should fall back to utf-8 when both system and buffer detection fail" time="0.000174443">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should not cache buffer detection results" time="0.000237409">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should handle Windows system encoding" time="0.000109412">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should cache null system encoding result" time="0.000167189">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should work correctly on macOS" time="0.00009748">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should work correctly on other Unix-like systems" time="0.000095537">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should handle unknown platforms as Unix-like" time="0.000109031">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle empty buffer gracefully" time="0.000106457">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle very large buffers" time="0.000337895">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle Unicode content" time="0.000132936">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tool-utils.test.ts" timestamp="2025-10-08T23:26:53.917Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.002147449">
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should not match a partial command prefix" time="0.000919569">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should match an exact command" time="0.000104112">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should match a command that is a prefix" time="0.00005371">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool name" time="0.000061434">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool class name" time="0.000047067">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should not match if neither name is in the patterns" time="0.000042608">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool name when passed as a string" time="0.000041116">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/userAccountManager.test.ts" timestamp="2025-10-08T23:26:53.917Z" hostname="uby" tests="23" failures="0" errors="0" skipped="0" time="0.025524737">
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should create directory and write initial account file" time="0.003575188">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should update active account and move previous to old" time="0.001490676">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should not add a duplicate to the old list" time="0.001037538">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should handle corrupted JSON by starting fresh" time="0.00262417">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should handle valid JSON with incorrect schema by starting fresh" time="0.001642025">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return the active account if file exists and is valid" time="0.000526804">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if file does not exist" time="0.000336071">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if file is empty" time="0.000335841">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null and log if file is corrupted" time="0.000506096">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if active key is missing" time="0.000337403">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should set active to null and move it to old" time="0.001477972">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should handle empty file gracefully" time="0.001291207">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should handle corrupted JSON by creating a fresh file" time="0.001992994">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should be idempotent if active account is already null" time="0.002271037">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should not add a duplicate to the old list" time="0.000998175">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file does not exist" time="0.000415197">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is empty" time="0.000398797">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is corrupted" time="0.000556989">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 1 if there is only an active account" time="0.000360326">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should correctly count old accounts when active is null" time="0.000336332">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should correctly count both active and old accounts" time="0.000343054">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should handle valid JSON with incorrect schema by returning 0" time="0.000570745">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should not double count if active account is also in old list" time="0.000355847">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/workspaceContext.test.ts" timestamp="2025-10-08T23:26:53.917Z" hostname="uby" tests="34" failures="0" errors="0" skipped="0" time="0.036891697">
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should initialize with a single directory (cwd)" time="0.002696294">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should validate and resolve directories to absolute paths" time="0.000531412">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should handle empty initialization" time="0.001062624">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should add valid directories" time="0.000446796">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should resolve relative paths to absolute" time="0.000480378">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should prevent duplicate directories" time="0.000585261">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should handle symbolic links correctly" time="0.000575704">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should accept paths within workspace directories" time="0.000858036">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should accept non-existent paths within workspace directories" time="0.000621409">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should reject paths outside workspace" time="0.000449591">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should reject non-existent paths outside workspace" time="0.00038954">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle nested directories correctly" time="0.00044936">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle edge cases (root, parent references)" time="0.000490045">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle non-existent paths correctly" time="0.000478284">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept dir paths" time="0.000597875">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept non-existent paths" time="0.000539728">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept non-existent deep paths" time="0.00052506">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject dir paths" time="0.001567126">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject non-existent paths" time="0.000905223">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject non-existent deep paths" time="0.000641756">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject partially non-existent deep paths" time="0.000749615">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should reject symbolic file links outside the workspace" time="0.000570324">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should reject non-existent symbolic file links outside the workspace" time="0.000455171">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should handle circular symlinks gracefully" time="0.000521824">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should call listener when adding a directory" time="0.00163945">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not call listener when adding a duplicate directory" time="0.000642318">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should call listener when setting different directories" time="0.000516865">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not call listener when setting same directories" time="0.000403696">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should support multiple listeners" time="0.000474036">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should allow unsubscribing a listener" time="0.000460401">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not fail if a listener throws an error" time="0.0100527">
            <system-err>
Error in WorkspaceContext listener: Error: test error
    at errorListener [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/workspaceContext.test.ts:350:15[90m)[39m
    at WorkspaceContext.notifyDirectoriesChanged [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/workspaceContext.ts:53:9[90m)[39m
    at WorkspaceContext.addDirectory [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/workspaceContext.ts:73:12[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/workspaceContext.test.ts:357:26
    at Proxy.assertThrows (file:///home/atmandk/LowCal-dev/node_modules/[4mchai[24m/chai.js:2723:5)
    at Proxy.methodWrapper (file:///home/atmandk/LowCal-dev/node_modules/[4mchai[24m/chai.js:1618:25)
    at Proxy.&lt;anonymous&gt; (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/expect[24m/dist/index.js:1088:12)
    at Proxy.overwritingMethodWrapper (file:///home/atmandk/LowCal-dev/node_modules/[4mchai[24m/chai.js:1670:33)
    at Proxy.&lt;anonymous&gt; (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/expect[24m/dist/index.js:1420:16)
    at Proxy.&lt;anonymous&gt; (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/expect[24m/dist/index.js:1029:14)

            </system-err>
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; getDirectories &gt; should return a copy of directories array" time="0.000957971">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with optional directories &gt; should skip a missing optional directory and log a warning" time="0.001733975">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with optional directories &gt; should include an existing optional directory" time="0.000680328">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/yaml-parser.test.ts" timestamp="2025-10-08T23:26:53.918Z" hostname="uby" tests="18" failures="0" errors="0" skipped="0" time="0.005117449">
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; parse &gt; should parse simple key-value pairs" time="0.001686066">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; parse &gt; should parse arrays" time="0.000260211">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; parse &gt; should parse nested objects" time="0.000160056">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; should stringify simple objects" time="0.000276401">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; should stringify arrays" time="0.000083594">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; should stringify nested objects" time="0.000073286">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should properly escape strings with quotes" time="0.000077814">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should properly escape strings with backslashes" time="0.000069658">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should properly escape strings with backslash-quote sequences" time="0.000069398">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should handle complex escaping scenarios" time="0.000149997">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should maintain round-trip integrity for escaped strings" time="0.000302379">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should not quote strings that do not need quoting" time="0.000074337">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should quote strings with colons" time="0.00005452">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should quote strings with hash symbols" time="0.000072785">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should quote strings with leading/trailing whitespace" time="0.000053869">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; numeric string handling &gt; should parse unquoted numeric values as numbers" time="0.000118268">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; numeric string handling &gt; should parse quoted numeric values as strings" time="0.000109212">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; numeric string handling &gt; should handle mixed numeric and string values" time="0.000117387">
        </testcase>
    </testsuite>
    <testsuite name="src/core/__tests__/openaiTimeoutHandling.test.ts" timestamp="2025-10-08T23:26:53.919Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.022701308">
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout error identification through actual requests &gt; should handle various timeout error formats correctly" time="0.007078694">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout error identification through actual requests &gt; should handle non-timeout errors without timeout messaging" time="0.002343872">
            <system-err>
OpenAI API Error: Invalid API key

OpenAI API Error: Rate limit exceeded

OpenAI API Error: Model not found

OpenAI API Error: Auth error

OpenAI API Error: API error

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContent timeout handling &gt; should handle timeout errors with helpful message" time="0.002133232">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContent timeout handling &gt; should handle non-timeout errors normally" time="0.001208544">
            <system-err>
OpenAI API Error: Invalid API key

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContent timeout handling &gt; should include troubleshooting tips for timeout errors" time="0.001112867">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContentStream timeout handling &gt; should handle streaming timeout errors" time="0.001232167">
            <system-err>
OpenAI API Streaming Error: Streaming request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContentStream timeout handling &gt; should include streaming-specific troubleshooting tips" time="0.000914189">
            <system-err>
OpenAI API Streaming Error: Streaming request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout configuration &gt; should use default timeout configuration" time="0.000867163">
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout configuration &gt; should use custom timeout from config" time="0.000981354">
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout configuration &gt; should handle missing timeout config gracefully" time="0.000764303">
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; token estimation on timeout &gt; should surface a clear timeout error when request times out" time="0.00114166">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; token estimation on timeout &gt; should fall back to character-based estimation if countTokens fails" time="0.001199036">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/converter.test.ts" timestamp="2025-10-08T23:26:53.920Z" hostname="uby" tests="3" failures="0" errors="0" skipped="0" time="0.003775749">
        <testcase classname="src/core/openaiContentGenerator/converter.test.ts" name="OpenAIContentConverter &gt; resetStreamingToolCalls &gt; should clear streaming tool calls accumulator" time="0.00203979">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/converter.test.ts" name="OpenAIContentConverter &gt; resetStreamingToolCalls &gt; should be safe to call multiple times" time="0.000201603">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/converter.test.ts" name="OpenAIContentConverter &gt; resetStreamingToolCalls &gt; should be safe to call on empty accumulator" time="0.000115774">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/errorHandler.test.ts" timestamp="2025-10-08T23:26:53.920Z" hostname="uby" tests="38" failures="0" errors="0" skipped="0" time="0.013193806">
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; constructor &gt; should create instance with default shouldSuppressLogging function" time="0.001776523">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; constructor &gt; should create instance with custom shouldSuppressLogging function" time="0.000247267">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should throw the original error for non-timeout errors" time="0.000804337">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should log error message for non-timeout errors" time="0.00119568">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should log streaming error message for streaming requests" time="0.000391414">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should throw enhanced error message for timeout errors" time="0.000482331">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should not log error when suppression is enabled" time="0.001099733">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should handle string errors" time="0.000294344">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should handle null/undefined errors" time="0.000286189">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; shouldSuppressErrorLogging method &gt; should return false by default" time="0.000212893">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; shouldSuppressErrorLogging method &gt; should use custom suppression function" time="0.000237179">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: timeout in message" time="0.0002165">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: timed out in message" time="0.000936702">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: connection timeout" time="0.000119461">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: request timeout" time="0.000076962">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: read timeout" time="0.000068858">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: etimedout" time="0.000068306">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: esockettimedout" time="0.000066313">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: deadline exceeded" time="0.000070891">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: ETIMEDOUT code" time="0.000098712">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: ESOCKETTIMEDOUT code" time="0.000081421">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: timeout type" time="0.000066162">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should not detect non-timeout errors as timeout" time="0.000174131">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should handle case-insensitive timeout detection" time="0.000209377">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should build timeout error message for non-streaming requests" time="0.000152011">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should build timeout error message for streaming requests" time="0.000172819">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should use original error message for non-timeout errors" time="0.000134999">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should handle non-Error objects" time="0.000159324">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should convert non-Error objects to strings for timeout errors" time="0.000171096">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should handle different duration values correctly" time="0.00015112">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; troubleshooting tips generation &gt; should provide general troubleshooting tips for non-streaming requests" time="0.000199338">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; troubleshooting tips generation &gt; should provide streaming-specific troubleshooting tips for streaming requests" time="0.00014039">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; ErrorHandler interface compliance &gt; should implement ErrorHandler interface correctly" time="0.000143144">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle zero duration" time="0.000138045">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle negative duration" time="0.00012441">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle very large duration" time="0.000143896">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle empty error message" time="0.000143616">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle error with only whitespace message" time="0.000092351">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" timestamp="2025-10-08T23:26:53.921Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.008963417">
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; constructor &gt; should initialize with basic configuration" time="0.002371945">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; generateContent &gt; should delegate to pipeline.execute" time="0.00060604">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; generateContentStream &gt; should delegate to pipeline.executeStream" time="0.000278335">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; countTokens &gt; should count tokens using tiktoken" time="0.000986584">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; countTokens &gt; should fall back to character approximation if tiktoken fails" time="0.00064401">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; embedContent &gt; should delegate to pipeline.client.embeddings.create" time="0.000395711">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; shouldSuppressErrorLogging &gt; should return false by default" time="0.000659469">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; shouldSuppressErrorLogging &gt; should allow subclasses to override error suppression behavior" time="0.000605719">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/pipeline.test.ts" timestamp="2025-10-08T23:26:53.921Z" hostname="uby" tests="17" failures="0" errors="0" skipped="0" time="0.023163463">
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; constructor &gt; should initialize with correct configuration" time="0.003073791">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; execute &gt; should successfully execute non-streaming request" time="0.003252391">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; execute &gt; should handle tools in request" time="0.000827169">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; execute &gt; should handle errors and log them" time="0.002319748">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should successfully execute streaming request" time="0.00204495">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should filter empty responses" time="0.000680487">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should handle streaming errors and reset tool calls" time="0.00094159">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should merge finishReason and usageMetadata from separate chunks" time="0.001173148">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should handle ideal case where last chunk has both finishReason and usageMetadata" time="0.000985892">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should handle providers that send zero usage in finish chunk (like modelscope)" time="0.000927725">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should handle providers that send finishReason and valid usage in same chunk" time="0.000829002">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; buildRequest &gt; should build request with sampling parameters" time="0.000641365">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; buildRequest &gt; should use config sampling parameters when request parameters are not provided" time="0.000593497">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; buildRequest &gt; should allow provider to enhance request" time="0.000801942">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; createRequestContext &gt; should create context with correct properties for non-streaming request" time="0.000633511">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; createRequestContext &gt; should create context with correct properties for streaming request" time="0.000649952">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; createRequestContext &gt; should collect all OpenAI chunks for logging even when Gemini responses are filtered" time="0.001094453">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" timestamp="2025-10-08T23:26:53.922Z" hostname="uby" tests="51" failures="0" errors="0" skipped="0" time="0.014081577">
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Basic functionality &gt; should initialize with empty state" time="0.001744775">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Basic functionality &gt; should handle simple complete JSON in single chunk" time="0.000365486">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Basic functionality &gt; should accumulate chunks until complete JSON" time="0.000135491">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Basic functionality &gt; should handle empty chunks gracefully" time="0.000099524">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; JSON depth tracking &gt; should track nested objects correctly" time="0.000170936">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; JSON depth tracking &gt; should track nested arrays correctly" time="0.000201272">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; JSON depth tracking &gt; should handle mixed nested structures" time="0.00023271">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should handle strings with special characters" time="0.000111326">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should handle strings with braces and brackets" time="0.000152251">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should track string boundaries correctly across chunks" time="0.000137995">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should handle escaped quotes in strings" time="0.000091589">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should handle backslash escapes correctly" time="0.000058939">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Error handling and repair &gt; should return error for malformed JSON at depth 0" time="0.000253889">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Error handling and repair &gt; should auto-repair unclosed strings" time="0.001613903">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Error handling and repair &gt; should not attempt repair when still in nested structure" time="0.000141562">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Error handling and repair &gt; should handle repair failure gracefully" time="0.000120593">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Multiple tool calls &gt; should handle multiple tool calls with different indices" time="0.000159024">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Multiple tool calls &gt; should handle interleaved chunks from multiple tool calls" time="0.000104253">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Multiple tool calls &gt; should maintain separate state for each index" time="0.00008118">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call metadata handling &gt; should store and retrieve tool call metadata" time="0.00004835">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call metadata handling &gt; should handle metadata-only chunks" time="0.000053319">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call metadata handling &gt; should update metadata incrementally" time="0.000063747">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call metadata handling &gt; should detect new tool call with same index and reassign to new index" time="0.000141131">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should return completed tool calls" time="0.000160437">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should handle completed tool calls with repair" time="0.000244121">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should use safeJsonParse as fallback for malformed JSON" time="0.00056297">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should not return tool calls without function name" time="0.000119271">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should not return tool calls with empty buffer" time="0.000082302">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle very large JSON objects" time="0.000560456">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle deeply nested structures" time="0.000778729">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle JSON with unicode characters" time="0.000138516">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle JSON with null and boolean values" time="0.000076101">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle JSON with numbers" time="0.000068116">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle whitespace-only chunks" time="0.000067645">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle chunks with only structural characters" time="0.000078004">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Real-world streaming scenarios &gt; should handle typical OpenAI streaming pattern" time="0.000201702">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Real-world streaming scenarios &gt; should handle multiple concurrent tool calls streaming" time="0.000212142">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Real-world streaming scenarios &gt; should handle malformed streaming that gets repaired" time="0.000159184">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call ID collision detection and mapping &gt; should handle tool call ID reuse correctly" time="0.000150348">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call ID collision detection and mapping &gt; should detect index collision and find new index" time="0.000308491">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call ID collision detection and mapping &gt; should handle continuation chunks without ID correctly" time="0.000116886">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call ID collision detection and mapping &gt; should find most recent incomplete tool call for continuation chunks" time="0.000200891">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Index management and reset functionality &gt; should reset individual index correctly" time="0.00015723">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Index management and reset functionality &gt; should find next available index when all lower indices are occupied" time="0.000240715">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Index management and reset functionality &gt; should reuse incomplete index when available" time="0.000149877">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Repair functionality and flags &gt; should test repair functionality in getCompletedToolCalls" time="0.000973519">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Repair functionality and flags &gt; should not set repaired flag for normal parsing" time="0.000157351">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Repair functionality and flags &gt; should not attempt repair when still in nested structure" time="0.000075249">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Repair functionality and flags &gt; should handle repair failure gracefully" time="0.000082653">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Complex collision scenarios &gt; should handle rapid tool call switching at same index" time="0.000160387">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Complex collision scenarios &gt; should handle interleaved chunks from multiple tool calls with ID mapping" time="0.000149697">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/telemetryService.test.ts" timestamp="2025-10-08T23:26:53.923Z" hostname="uby" tests="33" failures="0" errors="0" skipped="0" time="0.021721367">
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; constructor &gt; should create instance with default OpenAI logging disabled" time="0.001949944">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; constructor &gt; should create instance with OpenAI logging enabled when specified" time="0.000228392">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should log API response event with complete response data" time="0.003532599">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should handle response without responseId" time="0.000553432">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should handle response without usage metadata" time="0.000404177">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should not log OpenAI interaction when logging is disabled" time="0.00063835">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should log OpenAI interaction when logging is enabled" time="0.000629894">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should not log OpenAI interaction when request or response is missing" time="0.000500996">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should log API error event with Error instance" time="0.000555306">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should handle error without requestID" time="0.000382316">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should handle non-Error objects" time="0.000302319">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should handle null/undefined errors" time="0.000376947">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should not log OpenAI interaction when logging is disabled" time="0.000325462">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should log OpenAI interaction when logging is enabled" time="0.000432229">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should not log OpenAI interaction when request is missing" time="0.000304473">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should log streaming success with multiple responses" time="0.000517266">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should handle empty responses array" time="0.000410098">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should handle responses without usage metadata" time="0.000539277">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should use the last response with usage metadata" time="0.000365646">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should not log OpenAI interaction when logging is disabled" time="0.000256424">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should log OpenAI interaction when logging is enabled" time="0.001056593">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should not log OpenAI interaction when request or chunks are missing" time="0.000338726">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; RequestContext interface &gt; should have all required properties" time="0.00036759">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; RequestContext interface &gt; should support streaming context" time="0.000190081">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should combine simple text chunks correctly" time="0.000474457">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should combine tool call chunks correctly" time="0.000566927">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should handle mixed content and tool calls" time="0.000431537">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should handle chunks with no content or tool calls" time="0.000412081">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should use default values when usage is missing" time="0.000717216">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should use default finish_reason when missing" time="0.000633691">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should filter out empty tool calls" time="0.000412903">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; integration with telemetry events &gt; should create ApiResponseEvent with correct structure" time="0.000562881">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; integration with telemetry events &gt; should create ApiErrorEvent with correct structure" time="0.000568761">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/token-storage/base-token-storage.test.ts" timestamp="2025-10-08T23:26:53.924Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.005587968">
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should validate valid credentials" time="0.001985891">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing server name" time="0.000356008">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing token" time="0.000186154">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing access token" time="0.000153063">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing token type" time="0.000144597">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return false for tokens without expiry" time="0.00021087">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return false for valid tokens" time="0.000104463">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return true for expired tokens" time="0.000081701">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should apply 5-minute buffer for expiry check" time="0.000685707">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should keep valid characters" time="0.000182958">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should replace invalid characters with underscore" time="0.000071261">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should handle special characters" time="0.000053739">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/clearcut-logger/clearcut-logger.test.ts" timestamp="2025-10-08T23:26:53.924Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.119988534">
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; returns an instance if usage statistics are enabled" time="0.009961813">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; returns an instance if usage statistics are enabled" time="0.017631618">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; is a singleton" time="0.001974209">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the total number of google accounts" time="0.002324647">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface from a github action" time="0.001657323">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs default metadata" time="0.003299077">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface" time="0.001690775">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;cursor&apos;, preempting vscode detection" time="0.001398505">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;vscode&apos;, preempting vscode detection" time="0.001155676">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;firebasestudio&apos;, preempting vscode detection" time="0.001003405">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;devin&apos;, preempting vscode detection" time="0.001019224">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;cloudshell&apos;, preempting vscode detection" time="0.00096327">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; logChatCompressionEvent &gt; logs an event with proper fields" time="0.001573118">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; enqueueLogEvent &gt; should add events to the queue" time="0.000967448">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; enqueueLogEvent &gt; should evict the oldest event when the queue is full" time="0.015465415">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; allows for usage with a configured proxy agent" time="0.026368166">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should clear events on successful flush" time="0.006198567">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should handle a network error and requeue events" time="0.005915693">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should handle an HTTP error and requeue events" time="0.005473156">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; requeueFailedEvents logic &gt; should limit the number of requeued events to max_retry_events" time="0.00184488">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; requeueFailedEvents logic &gt; should not requeue more events than available space in the queue" time="0.008494751">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/qwen-logger/qwen-logger.test.ts" timestamp="2025-10-08T23:26:53.925Z" hostname="uby" tests="16" failures="0" errors="0" skipped="0" time="0.021757103">
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; getInstance &gt; returns undefined when usage statistics are disabled" time="0.003921418">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; getInstance &gt; returns an instance when usage statistics are enabled" time="0.001271821">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; getInstance &gt; is a singleton" time="0.000589279">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event queue management &gt; should handle event overflow gracefully" time="0.003176552">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event queue management &gt; should handle enqueue errors gracefully" time="0.001126412">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; concurrent flush protection &gt; should handle concurrent flush requests" time="0.00073578">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; failed event retry mechanism &gt; should requeue failed events with size limits" time="0.001607631">
            <system-err>
QwenLogger: Dropping 50 events due to retry queue limit. Total events: 150, keeping: 100

            </system-err>
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; failed event retry mechanism &gt; should handle empty retry queue gracefully" time="0.000805218">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event handlers &gt; should log IDE connection events" time="0.001389118">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event handlers &gt; should log Kitty sequence overflow events" time="0.000686319">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event handlers &gt; should flush start session events immediately" time="0.000834662">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event handlers &gt; should flush end session events immediately" time="0.000571416">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; flush timing &gt; should not flush if interval has not passed" time="0.000448339">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; flush timing &gt; should flush when interval has passed" time="0.000697359">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; error handling &gt; should handle flush errors gracefully with debug mode" time="0.001728284">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; constants export &gt; should export test constants" time="0.000360306">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/crawlCache.test.ts" timestamp="2025-10-08T23:26:53.926Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.011100046">
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a consistent hash" time="0.001591291">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different directories" time="0.00070852">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different ignore content" time="0.000140089">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different maxDepth values" time="0.000203556">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should write and read data from the cache" time="0.000622881">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should return undefined for a nonexistent key" time="0.000131172">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should clear the cache" time="0.000121885">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should automatically evict a cache entry after its TTL expires" time="0.002372215">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should reset the timer when an entry is updated" time="0.003493247">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/crawler.test.ts" timestamp="2025-10-08T23:26:53.926Z" hostname="uby" tests="18" failures="0" errors="0" skipped="0" time="0.067550834">
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should use .qwenignore rules" time="0.01103755">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should combine .gitignore and .qwenignore rules" time="0.010805612">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should use ignoreDirs option" time="0.001713737">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle negated directories" time="0.002184427">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle root-level file negation" time="0.001943162">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle directory negation with glob" time="0.001643749">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should correctly handle negated patterns in .gitignore" time="0.001472842">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should initialize correctly when ignore files are missing" time="0.001175723">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle empty or commented-only ignore files" time="0.001345848">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should always ignore the .git directory" time="0.001939574">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should hit the cache for subsequent crawls" time="0.004782609">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache when ignore rules change" time="0.005889386">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache after TTL expires" time="0.003464213">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache when maxDepth changes" time="0.002637534">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should only crawl top-level files when maxDepth is 0" time="0.006068196">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should crawl one level deep when maxDepth is 1" time="0.002584727">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should crawl two levels deep when maxDepth is 2" time="0.001713898">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should perform a full recursive crawl when maxDepth is undefined" time="0.003409281">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/fileSearch.test.ts" timestamp="2025-10-08T23:26:53.926Z" hostname="uby" tests="27" failures="0" errors="0" skipped="0" time="0.073785628">
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use .qwenignore rules" time="0.00926295">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should combine .gitignore and .qwenignore rules" time="0.003084271">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use ignoreDirs option" time="0.001243709">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle negated directories" time="0.002081297">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should filter results with a search pattern" time="0.004703774">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle root-level file negation" time="0.00226726">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle directory negation with glob" time="0.002259627">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should correctly handle negated patterns in .gitignore" time="0.002095123">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should initialize correctly when ignore files are missing" time="0.002096936">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should respect maxResults option in search" time="0.00129306">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use fzf for fuzzy matching when pattern does not contain wildcards" time="0.00297003">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should not use fzf for fuzzy matching when disableFuzzySearch is true" time="0.002135507">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use fzf for fuzzy matching when disableFuzzySearch is false" time="0.002214533">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should return empty array when no matches are found" time="0.000976585">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should throw AbortError when filter is aborted" time="0.002791159">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should throw an error if search is called before initialization" time="0.000992865">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle empty or commented-only ignore files" time="0.002949532">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should always ignore the .git directory" time="0.002886315">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should be cancellable via AbortSignal" time="0.008325207">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should leverage ResultCache for bestBaseQuery optimization" time="0.003900429">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should be case-insensitive by default" time="0.002725748">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should respect maxResults even when the cache returns an exact match" time="0.001535728">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle file paths with special characters that need escaping" time="0.001499412">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should search for files in the current directory" time="0.001236125">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should search for files in a subdirectory" time="0.001242517">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should list all files in a directory" time="0.002130638">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should respect ignore rules" time="0.001145838">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/ignore.test.ts" timestamp="2025-10-08T23:26:53.927Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.015356363">
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getDirectoryFilter &gt; should ignore directories matching directory patterns" time="0.002365662">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getDirectoryFilter &gt; should not ignore directories with file patterns" time="0.000512156">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getFileFilter &gt; should not ignore files with directory patterns" time="0.000192025">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getFileFilter &gt; should ignore files matching file patterns" time="0.000314642">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; should accumulate patterns across multiple add() calls" time="0.000240976">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; should return a stable and consistent fingerprint" time="0.000760315">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should load rules from .gitignore" time="0.00392789">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should load rules from .qwenignore" time="0.003541265">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should combine rules from .gitignore and .qwenignore" time="0.001161196">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should add ignoreDirs" time="0.000500104">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should handle missing ignore files gracefully" time="0.00029732">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should always add .git to the ignore list" time="0.000248229">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/result-cache.test.ts" timestamp="2025-10-08T23:26:53.927Z" hostname="uby" tests="3" failures="0" errors="0" skipped="0" time="0.003684159">
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache basic usage" time="0.001960674">
        </testcase>
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache cache hit/miss" time="0.000449481">
        </testcase>
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache best base query" time="0.00018414">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/request-tokenizer/imageTokenizer.test.ts" timestamp="2025-10-08T23:26:53.928Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.017797324">
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; token calculation &gt; should calculate tokens based on image dimensions with reference logic" time="0.00141741">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; token calculation &gt; should calculate tokens for larger images" time="0.000277954">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; token calculation &gt; should enforce minimum tokens per image with scaling" time="0.000138536">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; token calculation &gt; should handle very large images with scaling" time="0.000166617">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; PNG dimension extraction &gt; should extract dimensions from valid PNG" time="0.000715953">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; PNG dimension extraction &gt; should handle invalid PNG gracefully" time="0.007209906">
            <system-err>
Failed to extract image metadata: Error: Invalid PNG: buffer too short
    at ImageTokenizer.extractPngDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:131:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:91:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.test.ts:93:40
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)

            </system-err>
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; batch processing &gt; should process multiple images serially" time="0.000934597">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; batch processing &gt; should handle mixed valid and invalid images" time="0.001116113">
            <system-err>
Failed to extract image metadata: Error: Invalid PNG: buffer too short
    at ImageTokenizer.extractPngDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:131:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:91:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at ImageTokenizer.calculateTokensBatch [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:320:37[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.test.ts:132:22
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; different image formats &gt; should handle different MIME types" time="0.004211094">
            <system-err>
Failed to extract image metadata: Error: Invalid JPEG signature
    at ImageTokenizer.extractJpegDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:159:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:95:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.test.ts:147:42
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Failed to extract image metadata: Error: Invalid WebP signature
    at ImageTokenizer.extractWebpDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:207:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:99:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.test.ts:147:42
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Unsupported image format: image/gif

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/request-tokenizer/requestTokenizer.test.ts" timestamp="2025-10-08T23:26:53.928Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.465219342">
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; text token calculation &gt; should calculate tokens for simple text content" time="0.106419274">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; text token calculation &gt; should handle multiple text parts" time="0.069064522">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; text token calculation &gt; should handle string content" time="0.077485786">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; image token calculation &gt; should calculate tokens for image content" time="0.000869397">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; image token calculation &gt; should handle multiple images" time="0.000370826">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; mixed content &gt; should handle text and image content together" time="0.071283813">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; function content &gt; should handle function calls" time="0.057670913">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; empty content &gt; should handle empty request" time="0.000413775">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; empty content &gt; should handle undefined contents" time="0.000381255">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; configuration &gt; should use custom text encoding" time="0.07009684">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; configuration &gt; should process multiple images serially" time="0.00052451">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; error handling &gt; should handle malformed image data gracefully" time="0.008747498">
            <system-err>
Failed to extract image metadata: Error: Invalid PNG: buffer too short
    at ImageTokenizer.extractPngDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:131:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:91:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at ImageTokenizer.calculateTokensBatch [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:320:37[90m)[39m
    at DefaultRequestTokenizer.calculateImageTokens [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/requestTokenizer.ts:136:35[90m)[39m
    at DefaultRequestTokenizer.calculateTokens [90m(/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/requestTokenizer.ts:72:38[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/home/atmandk/LowCal-dev/packages/core/[39msrc/utils/request-tokenizer/requestTokenizer.test.ts:287:22
    at file:///home/atmandk/LowCal-dev/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/request-tokenizer/textTokenizer.test.ts" timestamp="2025-10-08T23:26:53.928Z" hostname="uby" tests="28" failures="0" errors="0" skipped="0" time="0.020154341">
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; constructor &gt; should create tokenizer with default encoding" time="0.001862853">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; constructor &gt; should create tokenizer with custom encoding" time="0.000315413">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should return 0 for empty text" time="0.000383799">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should return 0 for null/undefined text" time="0.000251676">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should calculate tokens using tiktoken when available" time="0.001512906">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should use fallback calculation when tiktoken fails to load" time="0.001321904">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should use fallback calculation when encoding fails" time="0.000424464">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should handle very long text" time="0.000209908">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should handle unicode characters" time="0.000200631">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should use custom encoding when specified" time="0.000250182">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should process multiple texts and return token counts" time="0.000700505">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should handle empty array" time="0.000222472">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should handle array with empty strings" time="0.002631454">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should use fallback calculation when tiktoken fails to load" time="0.000506345">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should use fallback calculation when encoding fails during batch processing" time="0.000739717">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should handle null and undefined values in batch" time="0.00028167">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should free tiktoken encoding when disposing" time="0.001532623">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should handle disposal when encoding is not initialized" time="0.001382546">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should handle disposal when encoding is null" time="0.000562951">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should handle errors during disposal gracefully" time="0.000553564">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should allow multiple calls to dispose" time="0.000338485">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; lazy initialization &gt; should not initialize tiktoken until first use" time="0.000192135">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; lazy initialization &gt; should initialize tiktoken on first calculateTokens call" time="0.000204929">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; lazy initialization &gt; should not reinitialize tiktoken on subsequent calls" time="0.000215979">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; lazy initialization &gt; should initialize tiktoken on first calculateTokensBatch call" time="0.000424845">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; edge cases &gt; should handle very short text" time="0.000689805">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; edge cases &gt; should handle text with only whitespace" time="0.000255382">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; edge cases &gt; should handle special characters and symbols" time="0.000146752">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/provider/dashscope.test.ts" timestamp="2025-10-08T23:26:53.929Z" hostname="uby" tests="33" failures="0" errors="0" skipped="0" time="0.013318657">
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; constructor &gt; should initialize with provided configs" time="0.001735648">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; isDashScopeProvider &gt; should return true for QWEN_OAUTH auth type" time="0.000441967">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; isDashScopeProvider &gt; should return true for DashScope domestic URL" time="0.000260021">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; isDashScopeProvider &gt; should return true for DashScope international URL" time="0.00017883">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; isDashScopeProvider &gt; should return false for non-DashScope configurations" time="0.000201002">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildHeaders &gt; should build DashScope-specific headers" time="0.00091944">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildHeaders &gt; should handle unknown CLI version" time="0.000270731">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildClient &gt; should create OpenAI client with DashScope configuration" time="0.001337552">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildClient &gt; should use default timeout and maxRetries when not provided" time="0.000582036">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildMetadata &gt; should build metadata with session and prompt IDs" time="0.000270741">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildMetadata &gt; should handle missing session ID" time="0.000184341">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should add cache control to system message only for non-streaming requests" time="0.000883403">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should add cache control to both system and last messages for streaming requests" time="0.000321133">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should include metadata in the request" time="0.000205019">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should preserve all original request parameters" time="0.000590251">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should skip cache control when disabled" time="0.000209187">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should handle messages with array content for streaming requests" time="0.000254651">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should handle empty messages array" time="0.00021095">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should handle messages without content for streaming requests" time="0.000256814">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should add cache control to last text item in mixed content for streaming requests" time="0.000215027">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should add empty text item with cache control if last item is not text for streaming requests" time="0.000201332">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; cache control edge cases &gt; should handle request with only system message" time="0.000271823">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; cache control edge cases &gt; should handle request without system message for streaming requests" time="0.000200751">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; cache control edge cases &gt; should handle empty content array for streaming requests" time="0.000112899">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should limit max_tokens when it exceeds model limit for qwen3-coder-plus" time="0.000161599">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should limit max_tokens when it exceeds model limit for qwen-vl-max-latest" time="0.000127545">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should not modify max_tokens when it is within model limit" time="0.000145469">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should not add max_tokens when not present in request" time="0.000113329">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should handle null max_tokens parameter" time="0.000081742">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should use default output limit for unknown models" time="0.000106066">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should preserve other request parameters when limiting max_tokens" time="0.000169363">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should work with vision models and output token limits" time="0.000105154">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should handle streaming requests with output token limits" time="0.00023271">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/provider/default.test.ts" timestamp="2025-10-08T23:26:53.930Z" hostname="uby" tests="11" failures="0" errors="0" skipped="0" time="0.012101197">
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; constructor &gt; should initialize with provided configs" time="0.002148321">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildHeaders &gt; should build headers with User-Agent" time="0.001154183">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildHeaders &gt; should handle unknown CLI version" time="0.000309182">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildClient &gt; should create OpenAI client with correct configuration" time="0.001537432">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildClient &gt; should use default timeout and maxRetries when not provided" time="0.000556409">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildClient &gt; should include custom headers from buildHeaders" time="0.001722573">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should pass through all request parameters unchanged" time="0.00063828">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should preserve all sampling parameters" time="0.000553583">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should handle minimal request parameters" time="0.000348845">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should handle streaming requests" time="0.00106585">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should not modify the original request object" time="0.000264098">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/provider/lmstudio.test.ts" timestamp="2025-10-08T23:26:53.931Z" hostname="uby" tests="4" failures="0" errors="0" skipped="0" time="0.524826593">
        <testcase classname="src/core/openaiContentGenerator/provider/lmstudio.test.ts" name="LMStudioOpenAICompatibleProvider &gt; isLMStudioProvider &gt; should return true for LM Studio base URLs" time="0.002068413">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/lmstudio.test.ts" name="LMStudioOpenAICompatibleProvider &gt; isLMStudioProvider &gt; should return false for non-LM Studio base URLs" time="0.000284356">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/lmstudio.test.ts" name="LMStudioOpenAICompatibleProvider &gt; buildHeaders &gt; should remove User-Agent header for LM Studio compatibility" time="0.000421329">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/lmstudio.test.ts" name="LMStudioOpenAICompatibleProvider &gt; unloadModel &gt; should attempt to unload the model without throwing an error" time="0.520479037">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/provider/openrouter.test.ts" timestamp="2025-10-08T23:26:53.931Z" hostname="uby" tests="13" failures="0" errors="0" skipped="0" time="0.007623551">
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; constructor &gt; should extend DefaultOpenAICompatibleProvider" time="0.001588206">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; isOpenRouterProvider &gt; should return true for openrouter.ai URLs" time="0.000294123">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; isOpenRouterProvider &gt; should return false for non-openrouter URLs" time="0.00023821">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; isOpenRouterProvider &gt; should handle missing baseUrl gracefully" time="0.000129409">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should include base headers from parent class" time="0.000377608">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should add OpenRouter-specific headers without referer by default" time="0.000712036">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should add HTTP-Referer when environment variable is provided" time="0.00017817">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should override parent headers if there are conflicts" time="0.000398917">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should handle unknown CLI version from parent" time="0.000207063">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildClient &gt; should inherit buildClient behavior from parent" time="0.00045472">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildRequest &gt; should inherit buildRequest behavior from parent" time="0.001103019">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; integration with parent class &gt; should properly call parent constructor" time="0.000569703">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; integration with parent class &gt; should maintain parent functionality while adding OpenRouter specifics" time="0.000163883">
        </testcase>
    </testsuite>
</testsuites>
