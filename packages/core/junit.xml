<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="2621" failures="0" errors="0" time="16.424938894">
    <testsuite name="src/index.test.ts" timestamp="2025-09-25T23:26:49.325Z" hostname="uby" tests="1" failures="0" errors="0" skipped="0" time="0.002458999">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.001247768">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-09-25T23:26:49.325Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.005382808">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.001928177">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.000163844">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000097911">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.000091068">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.000076031">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.000079507">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.000069639">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.000084857">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.000283474">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.000138196">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.000093342">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle Content" time="0.000099614">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of Contents" time="0.000091339">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle Part" time="0.000050173">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of Parts" time="0.000046826">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle string" time="0.000137755">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of strings" time="0.000111286">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should convert thought parts to text parts for API compatibility" time="0.00010848">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should combine text and thought for text parts with thoughts" time="0.00007535">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should preserve non-thought properties while removing thought" time="0.000123829">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should convert invalid text content to valid text part with thought" time="0.000101949">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-09-25T23:26:49.327Z" hostname="uby" tests="15" failures="0" errors="0" skipped="0" time="0.062972508">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform a web login" time="0.011725542">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform login with user code" time="0.004899765">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should attempt to load cached credentials first" time="0.004019516">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should use Compute to get a client if no cached credentials exist" time="0.00220495">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should not cache the credentials after fetching them via ADC" time="0.001906187">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should return the Compute client on successful ADC authentication" time="0.001853308">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should throw an error if ADC fails" time="0.003048189">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; credential loading order &gt; should prioritize default cached credentials over GOOGLE_APPLICATION_CREDENTIALS" time="0.002747874">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; credential loading order &gt; should fall back to GOOGLE_APPLICATION_CREDENTIALS if default cache is missing" time="0.001551941">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should use GOOGLE_CLOUD_ACCESS_TOKEN when GOOGLE_GENAI_USE_GCA is true" time="0.001428333">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should not use GCP token if GOOGLE_CLOUD_ACCESS_TOKEN is not set" time="0.002446025">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should not use GCP token if GOOGLE_GENAI_USE_GCA is not set" time="0.001400691">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; clearCachedCredentialFile &gt; should clear cached credentials and Google account" time="0.013692911">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; clearCachedCredentialFile &gt; should handle Qwen module clearing gracefully" time="0.006460271">
            <system-err>
Failed to clear cached credentials: Error: ENOENT: no such file or directory, open &apos;/tmp/qwen-code-test-home-MJUTx8/.qwen/google_accounts.json&apos;
[90m    at open (node:internal/fs/promises:642:25)[39m
[90m    at Object.writeFile (node:internal/fs/promises:1249:14)[39m
    at UserAccountManager.clearCachedGoogleAccount [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/userAccountManager.ts:138:5[90m)[39m
    at Module.clearCachedCredentialFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/code_assist/oauth2.ts:395:5[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/code_assist/oauth2.test.ts:572:7
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/tmp/qwen-code-test-home-MJUTx8/.qwen/google_accounts.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; clearCachedCredentialFile &gt; should clear the in-memory OAuth client cache" time="0.002125543">
            <system-out>
Loaded cached credentials.

Loaded cached credentials.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-09-25T23:26:49.328Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.024793898">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.003333598">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.005039262">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.002956951">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.003410479">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.00292427">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.002056525">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.003495106">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/setup.test.ts" timestamp="2025-09-25T23:26:49.329Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.007195892">
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should use GOOGLE_CLOUD_PROJECT when set and project from server is undefined" time="0.002719752">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should ignore GOOGLE_CLOUD_PROJECT when project from server is set" time="0.000447438">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.000885318">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should use GOOGLE_CLOUD_PROJECT when set and onboard a new paid user" time="0.000871733">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should onboard a new free user when GOOGLE_CLOUD_PROJECT is not set" time="0.000432921">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should use GOOGLE_CLOUD_PROJECT when onboard response has no project ID" time="0.000225848">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.000273806">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-09-25T23:26:49.329Z" hostname="uby" tests="47" failures="0" errors="0" skipped="0" time="0.08022814">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if checkpointing is enabled and GitService fails" time="0.009266182">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should not throw an error if checkpointing is disabled and GitService fails" time="0.007802444">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if initialized more than once" time="0.006231549">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should refresh auth and update config" time="0.002234915">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should preserve conversation history when refreshing auth" time="0.001184692">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should handle case when no existing client is initialized" time="0.000823062">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should strip thoughts when switching from GenAI to Vertex" time="0.000709834">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should not strip thoughts when switching from Vertex to GenAI" time="0.000758624">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.00051879">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.000452557">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.000477463">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.000355107">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.000575866">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.000764905">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should initialize WorkspaceContext with includeDirectories" time="0.001397365">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.000690347">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.000573351">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.000557531">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.000726184">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; defaults usage statistics to enabled if not specified" time="0.025786915">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; sets usage statistics based on the provided value (enabled: true)" time="0.000818584">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; sets usage statistics based on the provided value (enabled: false)" time="0.000391915">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.000327546">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.000245986">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.000190212">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.000141211">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.000132776">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.000197055">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.000142533">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.00023232">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP protocol" time="0.000186385">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP protocol if not provided" time="0.000125212">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP protocol if telemetry object is not provided" time="0.000124991">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should default useRipgrep to false when not provided" time="0.000153324">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should set useRipgrep to true when provided as true" time="0.000192497">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should set useRipgrep to false when explicitly provided as false" time="0.000191494">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should default useRipgrep to false when undefined" time="0.000174413">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; createToolRegistry &gt; should register a tool if coreTools contains an argument-specific pattern" time="0.003164925">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should throw an error when setting YOLO mode in an untrusted folder" time="0.000550258">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should throw an error when setting AUTO_EDIT mode in an untrusted folder" time="0.000292872">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting DEFAULT mode in an untrusted folder" time="0.000178921">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting PLAN mode in an untrusted folder" time="0.000156139">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting any mode in a trusted folder" time="0.000349947">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting any mode if trustedFolder is undefined" time="0.000407334">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; Model Switch Logging &gt; should log model switch when setModel is called with different model" time="0.003117397">
            <system-out>
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; Model Switch Logging &gt; should not log when setModel is called with same model" time="0.002000852">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; Model Switch Logging &gt; should use default reason when no options provided" time="0.0019567">
            <system-out>
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-09-25T23:26:49.331Z" hostname="uby" tests="6" failures="0" errors="0" skipped="0" time="0.038062405">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.031123728">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842805281.bak
Logger not initialized or session ID missing. Cannot log message.

Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842805283.bak

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at InstallationManager.readInstallationIdFromFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:21:50[90m)[39m
    at InstallationManager.getInstallationId [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:42:33[90m)[39m
    at QwenLogger.generateUserId [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:123:53[90m)[39m
    at new QwenLogger [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:114:24[90m)[39m
    at QwenLogger.getInstance [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:131:29[90m)[39m
    at logCliConfiguration [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/loggers.ts:85:14[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:452:5[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/config/flashFallback.test.ts:22:14
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20

            </system-err>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.00089727">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842805284.bak
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fall back to initial model if contentGeneratorConfig is not available" time="0.002142854">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842805285.bak

Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842805286.bak

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should start as false for new session" time="0.000700406">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842805287.bak

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should remain false if no model switch occurs" time="0.000673065">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842805288.bak

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should persist switched state throughout session" time="0.000692491">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842805288.bak
Logger not initialized or session ID missing. Cannot log message.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/config/storage.test.ts" timestamp="2025-09-25T23:26:49.331Z" hostname="uby" tests="5" failures="0" errors="0" skipped="0" time="0.002874758">
        <testcase classname="src/config/storage.test.ts" name="Storage – getGlobalSettingsPath &gt; returns path to ~/.qwen/settings.json" time="0.001261384">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getWorkspaceSettingsPath returns project/.qwen/settings.json" time="0.000184782">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getUserCommandsDir returns ~/.qwen/commands" time="0.000121885">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getProjectCommandsDir returns project/.qwen/commands" time="0.000094285">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getMcpOAuthTokensPath returns ~/.qwen/mcp-oauth-tokens.json" time="0.000093262">
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-09-25T23:26:49.332Z" hostname="uby" tests="70" failures="0" errors="0" skipped="1" time="0.963936472">
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for non-positive numbers" time="0.002058417">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for a fraction greater than or equal to 1" time="0.000249461">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction in the middle" time="0.000239313">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction that results in the last index" time="0.00007023">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle an empty history" time="0.000040224">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a history with only one item" time="0.000038992">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle history with weird parts" time="0.000083144">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.017499724">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.006342523">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.008250934">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.006322948">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.006850143">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.008368342">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.005355417">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.009703802">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.011385843">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should allow overriding model and config" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.008042168">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.008601903">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; uses the truncated history for compression" time="0.008036537">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; allows compression to be forced/manual after a failure" time="0.029732995">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; yields the result even if the compression inflated the tokens" time="0.007222772">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; does not manipulate the source chat" time="0.025641747">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; restores the history back to the original" time="0.010014677">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; will not attempt to compress context after a failure" time="0.008067806">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; attempts to compress with a maxOutputTokens set to the original token count" time="0.03292443">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.014446826">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; logs a telemetry event when compressing" time="0.014322607">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold with contextPercentageThreshold setting" time="0.018483855">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not compress across a function call response" time="0.014401482">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.017861744">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should use current model from config for token counting after sendMessage" time="0.013030776">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; injects a plan mode reminder before user queries when approval mode is PLAN" time="0.012771797">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; emits a compression event when the context was automatically compressed" time="0.018133687">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 2" time="0.021377968">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 4" time="0.016862615">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 3" time="0.012178821">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should include editor context when ideMode is enabled" time="0.019877012">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not add context if ideMode is enabled but no open files" time="0.016737354">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should add context if ideMode is enabled and there is one active file" time="0.016544667">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should add context if ideMode is enabled and there are open files but no active file" time="0.016401563">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.012750508">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.043422631">
            <system-out>
checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should yield MaxSessionTurns and stop when session turn limit is reached" time="0.023158252">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.01930332">
            <system-out>
Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when active file changes&apos;" time="0.024617441">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when cursor line changes&apos;" time="0.018203105">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when cursor character cha…&apos;" time="0.016944407">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text changes&apos;" time="0.013021259">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text is add…&apos;" time="0.016396783">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text is rem…&apos;" time="0.01264904">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;does not send context when nothing ch…&apos;" time="0.021515463">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; sends full context when history is cleared, even if editor state is unchanged" time="0.015553243">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should NOT add IDE context when a tool call is pending" time="0.016931523">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should add IDE context when no tool call is pending" time="0.010959274">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should send the latest IDE context on the next message after a skipped context" time="0.015931342">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should send a context DELTA on the next message after a skipped context" time="0.011707098">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not call checkNextSpeaker when turn.run() yields an error" time="0.012471662">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not call checkNextSpeaker when turn.run() yields a value then an error" time="0.012971306">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not run loop checks when skipLoopDetection is true" time="0.014203316">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; runs loop checks when skipLoopDetection is false" time="0.019655492">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.019806692">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use current model from config for content generation" time="0.013918108">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; handleFlashFallback &gt; should use current model from config when checking for fallback" time="0.016862025">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; setHistory &gt; should strip thought signatures when stripThoughts is true" time="0.012384581">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; setHistory &gt; should not strip thought signatures when stripThoughts is false" time="0.023290066">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; initialize &gt; should accept extraHistory parameter and pass it to startChat" time="0.017533687">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; initialize &gt; should use empty array when no extraHistory is provided" time="0.011937665">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; reinitialize &gt; should reinitialize with preserved user history" time="0.015271522">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; reinitialize &gt; should not throw error when chat is not initialized" time="0.01189195">
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-09-25T23:26:49.334Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.00596788">
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a CodeAssistContentGenerator" time="0.001728788">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator" time="0.001046627">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator with client install id logging disabled" time="0.000224736">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Gemini using GEMINI_API_KEY when set" time="0.001041356">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Gemini if GEMINI_API_KEY is empty" time="0.000300536">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GOOGLE_API_KEY when set" time="0.000176897">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GCP project and location when set" time="0.000195272">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Vertex AI if required env vars are empty" time="0.000162891">
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-09-25T23:26:49.335Z" hostname="uby" tests="24" failures="0" errors="0" skipped="0" time="0.239558919">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.027156078">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; plan mode enforcement &gt; returns plan reminder and skips execution for edit tools" time="0.00230288">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; plan mode enforcement &gt; allows read tools to execute in plan mode" time="0.012220428">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; plan mode enforcement &gt; enforces shell command restrictions in plan mode" time="0.01378906">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; getToolSuggestion &gt; should suggest the top N closest tool names for a typo" time="0.000690207">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler with payload &gt; should update args and diff and execute tool when payload is provided" time="0.004461214">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.000244251">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.000168442">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.00011862">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.00014591">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.000103491">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.00015167">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.000078224">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.000095206">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.000062997">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.000050594">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.000071061">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler edit cancellation &gt; should preserve diff when an edit is cancelled" time="0.001214437">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler YOLO mode &gt; should execute tool requiring confirmation directly without waiting" time="0.002542814">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler cancellation during executing with live output &gt; sets status to cancelled and preserves last output" time="0.104475117">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should queue a request if another is running" time="0.012925593">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should auto-approve a tool call if it is on the allowedTools list" time="0.001633683">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should handle two synchronous calls to schedule" time="0.00109762">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should auto-approve remaining tool calls when first tool call is approved with ProceedAlways" time="0.051868225">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-09-25T23:26:49.336Z" hostname="uby" tests="31" failures="0" errors="0" skipped="0" time="5.5408015">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should retain the initial user message when an automatic function call occurs" time="0.003284266">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should throw an error when attempting to add a user turn after another user turn" time="0.001664078">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should preserve text parts that are in the same response as a thought" time="0.00232975">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should add a placeholder model turn when a tool call is followed by an empty model response" time="0.000569434">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.002130341">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should succeed if a tool call is followed by an empty part" time="0.002138877">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should fail if the stream ends with an empty part and has no finishReason" time="1.50376744">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should succeed if the stream ends with an invalid part but has a finishReason and contained a valid part" time="0.000683865">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should not consolidate text into a part that also contains a functionCall" time="0.000381225">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should consolidate subsequent text chunks after receiving an empty text chunk" time="0.00032977">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should consolidate adjacent text parts that arrive in separate stream chunks" time="0.000364364">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should preserve text parts that stream in the same chunk as a thought" time="0.000312588">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should add a placeholder model turn when a tool call is followed by an empty stream response" time="0.000489245">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.000541311">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate all consecutive model turns into a single turn" time="0.000379792">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add a placeholder model turn when a tool call is followed by an empty response" time="0.000294094">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.000279567">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent text parts from multiple content objects" time="0.000269168">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add an empty placeholder turn if modelOutput is empty" time="0.000381796">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should preserve model outputs with undefined or empty parts arrays" time="0.000403627">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should not consolidate content with different roles" time="0.000382548">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.000257497">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.000266874">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should yield a RETRY event when an invalid stream is encountered" time="0.501511566">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should retry on invalid content, succeed, and report metrics" time="0.502776045">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should fail after all retries on persistent invalid content and report metrics" time="1.504105682">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should correctly retry and append to an existing history mid-conversation" time="0.502316023">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; concurrency control &gt; should queue a subsequent sendMessage call until the first one completes" time="0.00194566">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should retry if the model returns a completely empty stream (no chunks)" time="0.501779008">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should queue a subsequent sendMessageStream call until the first stream is fully consumed" time="0.001037299">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should discard valid partial content from a failed attempt upon retry" time="0.501513979">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiRequest.test.ts" timestamp="2025-09-25T23:26:49.337Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.002771337">
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return the string value if the input is a string" time="0.000895056">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return a concatenated string if the input is an array of strings" time="0.000122387">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle videoMetadata" time="0.000083674">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle thought" time="0.000074398">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle codeExecutionResult" time="0.000067435">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle executableCode" time="0.000062646">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle fileData" time="0.000063708">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionCall" time="0.000081801">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionResponse" time="0.000103752">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle inlineData" time="0.000085939">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle text" time="0.000136112">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return an empty string for an unknown part type" time="0.000075019">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-09-25T23:26:49.337Z" hostname="uby" tests="40" failures="0" errors="0" skipped="0" time="0.116380812">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.010286349">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.003238371">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.003824746">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.002187847">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.005281942">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.003888363">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.005798647">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.004038642">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.003133416">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.004726845">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.004163783">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.007203286">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.000978971">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.000597826">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.001312578">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.00108668">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.000709042">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.001149366">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.002386715">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.00376235">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.001072424">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.000829214">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.002173601">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.001629354">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.001570556">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.002823193">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.004079156">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should delete the specified checkpoint file and return true" time="0.003180143">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should delete both new and old checkpoint files if they exist" time="0.003064829">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should return false if the checkpoint file does not exist" time="0.001346151">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should re-throw an error if file deletion fails for reasons other than not existing" time="0.00144362">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should return false if logger is not initialized" time="0.001138196">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should return true if the checkpoint file exists" time="0.000938156">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should return false if the checkpoint file does not exist" time="0.000654961">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should throw an error if logger is not initialized" time="0.000691379">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should re-throw an error if fs.access fails for reasons other than not existing" time="0.003899023">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; Backward compatibility &gt; should load from a checkpoint with a raw special character tag" time="0.002388959">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.004252758">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; Model Switch Logging &gt; should log model switch events correctly" time="0.002574803">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; Model Switch Logging &gt; should handle multiple model switch events" time="0.003775254">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-09-25T23:26:49.339Z" hostname="uby" tests="6" failures="0" errors="0" skipped="0" time="0.035650452">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.025905134">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.001014407">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool validation fails" time="0.000664189">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.001726133">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an unhandled exception error if execution throws" time="0.002989541">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.002029896">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-09-25T23:26:49.339Z" hostname="uby" tests="40" failures="0" errors="0" skipped="0" time="0.022121755">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.003887331">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.001015429">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.000671603">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.000678656">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.000496138">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.000488063">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000341612">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.000280939">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.000226408">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should use default prompt when GEMINI_SYSTEM_MD is &quot;false&quot;" time="0.000493092">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should use default prompt when GEMINI_SYSTEM_MD is &quot;0&quot;" time="0.000327857">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should throw error if GEMINI_SYSTEM_MD points to a non-existent file" time="0.00105402">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from default path when GEMINI_SYSTEM_MD is &quot;true&quot;" time="0.000993778">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from default path when GEMINI_SYSTEM_MD is &quot;1&quot;" time="0.000236106">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from custom path when GEMINI_SYSTEM_MD provides one, preserving case" time="0.00019431">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_SYSTEM_MD is set" time="0.000290618">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should not write to file when GEMINI_WRITE_SYSTEM_MD is &quot;false&quot;" time="0.000949457">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should not write to file when GEMINI_WRITE_SYSTEM_MD is &quot;0&quot;" time="0.000212092">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to default path when GEMINI_WRITE_SYSTEM_MD is &quot;true&quot;" time="0.000742904">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to default path when GEMINI_WRITE_SYSTEM_MD is &quot;1&quot;" time="0.000220758">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to custom path when GEMINI_WRITE_SYSTEM_MD provides one" time="0.000172419">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_WRITE_SYSTEM_MD is set" time="0.000263798">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_WRITE_SYSTEM_MD is just ~" time="0.000421289">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="URL matching with trailing slash compatibility &gt; should match URLs with and without trailing slash" time="0.000917838">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="URL matching with trailing slash compatibility &gt; should not match when URLs are different" time="0.00028123">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should use XML format for qwen3-coder model" time="0.000813405">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should use JSON format for qwen-vl model" time="0.00081051">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should use bracket format for generic models" time="0.000626659">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should use bracket format when no model is specified" time="0.00061043">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should preserve model-specific formats with user memory" time="0.000507138">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Model-specific tool call formats &gt; should preserve model-specific formats with sandbox environment" time="0.000337925">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getCustomSystemPrompt &gt; should handle string custom instruction without user memory" time="0.000165827">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getCustomSystemPrompt &gt; should handle string custom instruction with user memory" time="0.000078786">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getCustomSystemPrompt &gt; should handle Content object with parts array and user memory" time="0.000081441">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getSubagentSystemReminder &gt; should format single agent type correctly" time="0.000154887">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getSubagentSystemReminder &gt; should join multiple agent types with commas" time="0.000104493">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getSubagentSystemReminder &gt; should handle empty array" time="0.000046536">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getPlanModeSystemReminder &gt; should return plan mode system reminder with proper structure" time="0.000099685">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getPlanModeSystemReminder &gt; should include workflow instructions" time="0.000056946">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="getPlanModeSystemReminder &gt; should be deterministic" time="0.000035646">
        </testcase>
    </testsuite>
    <testsuite name="src/core/tokenLimits.test.ts" timestamp="2025-09-25T23:26:49.341Z" hostname="uby" tests="61" failures="0" errors="0" skipped="0" time="0.009171457">
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should lowercase and trim the model string" time="0.001644101">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should strip provider prefixes" time="0.000238601">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should handle pipe and colon separators" time="0.000102279">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should collapse whitespace to a single hyphen" time="0.000065862">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should remove date and version suffixes" time="0.000102971">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should remove quantization and numeric suffixes" time="0.000108761">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should handle a combination of normalization rules" time="0.000069138">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should handle empty or null input" time="0.000121355">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should remove preview suffixes" time="0.000108691">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="normalize &gt; should remove version numbers with dots when they are at the end" time="0.000296779">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 1.5 Pro" time="0.000203486">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 1.5 Flash" time="0.000130411">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 2.5 Pro" time="0.000111667">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 2.5 Flash" time="0.000098572">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 2.0 Flash with image generation" time="0.000126394">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Google Gemini &gt; should return the correct limit for Gemini 2.0 Flash" time="0.000114031">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for o3-mini" time="0.000100436">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for o3 models" time="0.000092812">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for o4-mini" time="0.000099784">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4o-mini" time="0.000136823">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4o" time="0.000090828">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4.1-mini" time="0.000035516">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4.1 models" time="0.000032941">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; OpenAI &gt; should return the correct limit for gpt-4" time="0.00004341">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Anthropic Claude &gt; should return the correct limit for Claude 3.5 Sonnet" time="0.00004866">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Anthropic Claude &gt; should return the correct limit for Claude 3.7 Sonnet" time="0.000046496">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Anthropic Claude &gt; should return the correct limit for Claude Sonnet 4" time="0.000042669">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Anthropic Claude &gt; should return the correct limit for Claude Opus 4" time="0.000056315">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen3-coder commercial models" time="0.000123919">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen3-coder open source models" time="0.000097981">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen3 2507 variants" time="0.000048169">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen2.5-1m" time="0.00006471">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen2.5" time="0.00005405">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen-plus" time="0.000077995">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen-flash" time="0.000045655">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Alibaba Qwen &gt; should return the correct limit for qwen-turbo" time="0.000063077">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; ByteDance Seed-OSS &gt; should return the correct limit for seed-oss" time="0.000094916">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Zhipu GLM &gt; should return the correct limit for glm-4.5v" time="0.000095156">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Zhipu GLM &gt; should return the correct limit for glm-4.5-air" time="0.000085448">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Zhipu GLM &gt; should return the correct limit for glm-4.5" time="0.000101067">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for deepseek-r1" time="0.000115664">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for deepseek-v3" time="0.000142674">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for deepseek-v3.1" time="0.000134358">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for kimi-k2-instruct" time="0.000074258">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for gpt-oss" time="0.000062436">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for llama-4-scout" time="0.000066322">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; Other models &gt; should return the correct limit for mistral-large-2" time="0.00003241">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; should return the default token limit for an unknown model" time="0.000066463">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; should return the correct limit for a complex model string" time="0.000034995">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit &gt; should handle case-insensitive model names" time="0.000051936">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Qwen models with output limits &gt; should return the correct output limit for qwen3-coder-plus" time="0.000084005">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Qwen models with output limits &gt; should return the correct output limit for qwen-vl-max-latest" time="0.000068306">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Default output limits &gt; should return the default output limit for unknown models" time="0.000152051">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Default output limits &gt; should return the default output limit for models without specific output patterns" time="0.000090427">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Input vs Output limits comparison &gt; should return different limits for input vs output for qwen3-coder-plus" time="0.000082342">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Input vs Output limits comparison &gt; should return different limits for input vs output for qwen-vl-max-latest" time="0.000078836">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Input vs Output limits comparison &gt; should return same default limits for unknown models" time="0.000084626">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Backward compatibility &gt; should default to input type when no type is specified" time="0.000109834">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Backward compatibility &gt; should work with explicit input type" time="0.000104334">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Model normalization with output limits &gt; should handle normalized model names for output limits" time="0.000094926">
        </testcase>
        <testcase classname="src/core/tokenLimits.test.ts" name="tokenLimit with output type &gt; Model normalization with output limits &gt; should handle complex model strings for output limits" time="0.000076572">
        </testcase>
    </testsuite>
    <testsuite name="src/core/turn.test.ts" timestamp="2025-09-25T23:26:49.343Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.0143733">
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; constructor &gt; should initialize pendingToolCalls and debugResponses" time="0.002612373">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield content events for text parts" time="0.002968662">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield tool_call_request events for function calls" time="0.000921665">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield UserCancelled event if signal is aborted" time="0.000536973">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield Error event and report if sendMessageStream throws" time="0.000731033">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle function calls with undefined name or args" time="0.001390823">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event when response has finish reason" time="0.000540129">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event for MAX_TOKENS finish reason" time="0.000277494">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event for SAFETY finish reason" time="0.000505605">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should not yield finished event when there is no finish reason" time="0.000218695">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle multiple responses with different finish reasons" time="0.000255743">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should not crash when cancelled request has malformed error" time="0.00056197">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield a Retry event when it receives one from the chat stream" time="0.000248089">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; getDebugResponses &gt; should return collected debug responses" time="0.000776807">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/detect-ide.test.ts" timestamp="2025-09-25T23:26:49.343Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.004692902">
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should return undefined if TERM_PROGRAM is not vscode" time="0.001406172">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Devin" time="0.000263297">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Replit" time="0.000103601">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cursor" time="0.000084947">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Codespaces" time="0.000074147">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cloud Shell via EDITOR_IN_CLOUD_SHELL" time="0.000114421">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cloud Shell via CLOUD_SHELL" time="0.000088894">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Trae" time="0.000066513">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Firebase Studio via MONOSPACE_ENV" time="0.000071873">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect VSCode when no other IDE is detected and command includes &quot;code&quot;" time="0.000065531">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect VSCodeFork when no other IDE is detected and command does not include &quot;code&quot;" time="0.00007007">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should prioritize other IDEs over VSCode detection" time="0.000080369">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Devin" time="0.000487582">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Replit" time="0.000074518">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Cursor" time="0.000049471">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for CloudShell" time="0.000040405">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Codespaces" time="0.000038802">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for FirebaseStudio" time="0.000041186">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for Trae" time="0.000148685">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for VSCode" time="0.000077413">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="getIdeInfo &gt; should return correct info for VSCodeFork" time="0.000045214">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ide-client.test.ts" timestamp="2025-09-25T23:26:49.344Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.016831869">
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should return invalid if QWEN_CODE_IDE_WORKSPACE_PATH is undefined" time="0.002517548">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should return invalid if QWEN_CODE_IDE_WORKSPACE_PATH is empty" time="0.000679156">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using HTTP when port is provided in config file" time="0.005963823">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using stdio when stdio config is provided in file" time="0.001429084">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via stdio

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should prioritize port over stdio when both are in config file" time="0.001128688">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using HTTP when port is provided in environment variables" time="0.001186756">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using stdio when stdio config is in environment variables" time="0.000866884">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via stdio

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should prioritize file config over environment variables" time="0.000742323">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should be disconnected if no config is found" time="0.000856404">
            <system-err>
[ERROR] [IDEClient] Failed to connect to IDE companion extension in VS Code. Please ensure the extension is running. To install the extension, run /ide install.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ide-installer.test.ts" timestamp="2025-09-25T23:26:49.345Z" hostname="uby" tests="10" failures="0" errors="0" skipped="0" time="0.011384752">
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; getIdeInstaller &gt; returns a VsCodeInstaller for &quot;&apos;vscode&apos;&quot;" time="0.003842278">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; getIdeInstaller &gt; returns a VsCodeInstaller for &quot;&apos;firebasestudio&apos;&quot;" time="0.000790442">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;win32&apos;" time="0.001149106">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;darwin&apos;" time="0.000406623">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;linux&apos;" time="0.000288674">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; installs the extension using code cli" time="0.001317107">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; returns that the cli was installed successfully" time="0.000618504">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; returns that the cli was installed successfully" time="0.000278976">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; should return a failure message if &apos;vscode&apos; is not installed" time="0.000447388">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; should return a failure message if &apos;firebasestudio&apos; is not installed" time="0.000877233">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ideContext.test.ts" timestamp="2025-09-25T23:26:49.345Z" hostname="uby" tests="16" failures="0" errors="0" skipped="0" time="0.011551801">
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should return undefined initially for ide context" time="0.001446546">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should set and retrieve the ide context" time="0.000724039">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should update the ide context when called multiple times" time="0.000193899">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should handle empty string for file path" time="0.000138436">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should notify subscribers when ide context changes" time="0.002985463">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should stop notifying a subscriber after unsubscribe" time="0.000391784">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should clear the ide context" time="0.000222491">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should validate a file with only required fields" time="0.001468156">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should validate a file with all fields" time="0.00032476">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should fail validation if path is missing" time="0.000557892">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should fail validation if timestamp is missing" time="0.000160547">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate an empty context" time="0.000119271">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with an empty workspaceState" time="0.000093653">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with an empty openFiles array" time="0.000805049">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with a valid file" time="0.000158063">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should fail validation with an invalid file" time="0.000166228">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/process-utils.test.ts" timestamp="2025-09-25T23:26:49.346Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.013231217">
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Unix &gt; should traverse up to find the shell and return grandparent process info" time="0.002353594">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Unix &gt; should return parent process info if grandparent lookup fails" time="0.006443119">
            <system-out>
Failed to get process info for pid 800: Error: ps failed
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/ide/process-utils.test.ts:57:32
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should traverse up and find the great-grandchild of the root process" time="0.000592777">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle non-existent process gracefully" time="0.000222081">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle malformed JSON output gracefully" time="0.001401603">
            <system-out>
Failed to get process info for pid 1000: SyntaxError: Unexpected token &apos;j&apos;, &quot;{&quot;invalid&quot;:json}&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at getProcessInfo [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/ide/process-utils.ts:46:16[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at getIdeProcessInfoForWindows [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/ide/process-utils.ts:136:29[90m)[39m

            </system-out>
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle PowerShell errors without crashing the process chain" time="0.000643901">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle partial JSON data with defaults" time="0.000202715">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/google-auth-provider.test.ts" timestamp="2025-09-25T23:26:49.346Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.011240595">
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should throw an error if no scopes are provided" time="0.002550469">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should use scopes from the config if provided" time="0.002818705">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should throw an error for a non-allowlisted host" time="0.000334909">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should allow luci.app" time="0.000541702">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should allow sub.luci.app" time="0.000360898">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should not allow googleapis.com without a subdomain" time="0.000126774">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; with provider instance &gt; should return credentials" time="0.001527946">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; with provider instance &gt; should return undefined if access token is not available" time="0.001625798">
            <system-err>
Failed to get access token from Google ADC

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-provider.test.ts" timestamp="2025-09-25T23:26:49.346Z" hostname="uby" tests="19" failures="0" errors="0" skipped="0" time="0.147632067">
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should perform complete OAuth flow with PKCE" time="0.019039002">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle OAuth discovery when no authorization URL provided" time="0.013153013">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should perform dynamic client registration when no client ID provided" time="0.012708601">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle OAuth callback errors" time="0.012466704">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle state mismatch in callback" time="0.012380634">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle token exchange failure" time="0.012185273">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle callback timeout" time="0.001879627">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should refresh token successfully" time="0.001623283">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should include client secret in refresh request when available" time="0.00150233">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should handle refresh token failure" time="0.001537614">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return valid token when not expired" time="0.001895496">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: false
Returning valid token for server: test-server

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should refresh expired token and return new token" time="0.001057166">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return null when no credentials exist" time="0.000625898">
            <system-out>
Getting valid token for server: test-server

No credentials found for server: test-server

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should handle refresh failure and remove invalid token" time="0.001027501">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return null for token without refresh capability" time="0.000638721">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; PKCE parameter generation &gt; should generate valid PKCE parameters" time="0.01225414">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should build correct authorization URL with all parameters" time="0.013757191">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should correctly append parameters to an authorization URL that already has query params" time="0.012678265">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should correctly append parameters to a URL with a fragment" time="0.012772909">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-token-storage.test.ts" timestamp="2025-09-25T23:26:49.347Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.011822692">
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should return empty map when token file does not exist" time="0.002672544">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should load tokens from file successfully" time="0.001405771">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should handle corrupted token file gracefully" time="0.001101387">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should handle file read errors other than ENOENT" time="0.000402365">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should save token with restricted permissions" time="0.000582227">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should update existing token for same server" time="0.000559035">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should handle write errors gracefully" time="0.001369944">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return token for existing server" time="0.00021621">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return null for non-existent server" time="0.000135982">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return null when no tokens file exists" time="0.000099353">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should remove token for specific server" time="0.000259701">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should remove token file when no tokens remain" time="0.000191715">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should handle removal of non-existent token gracefully" time="0.000141312">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should handle file operation errors gracefully" time="0.000206292">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return false for token without expiry" time="0.00015653">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return false for valid token" time="0.000111947">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return true for expired token" time="0.000098903">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return true for token expiring within buffer time" time="0.000076211">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should remove token file successfully" time="0.000197305">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should handle non-existent file gracefully" time="0.000122447">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should handle other file errors gracefully" time="0.000170425">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-utils.test.ts" timestamp="2025-09-25T23:26:49.348Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.010476631">
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should build standard root-based URLs by default" time="0.001798668">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should build path-based URLs when includePathSuffix is true" time="0.000337505">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should handle root path correctly" time="0.000247317">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should handle trailing slash in path" time="0.000143876">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchProtectedResourceMetadata &gt; should fetch protected resource metadata successfully" time="0.000723899">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchProtectedResourceMetadata &gt; should return null when fetch fails" time="0.000276883">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchAuthorizationServerMetadata &gt; should fetch authorization server metadata successfully" time="0.000283866">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchAuthorizationServerMetadata &gt; should return null when fetch fails" time="0.00012964">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; discoverAuthorizationServerMetadata &gt; should handle URLs without path components correctly" time="0.000418715">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; discoverAuthorizationServerMetadata &gt; should handle URLs with path components correctly" time="0.000344818">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; metadataToOAuthConfig &gt; should convert metadata to OAuth config" time="0.000856404">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; metadataToOAuthConfig &gt; should handle empty scopes" time="0.000531803">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; parseWWWAuthenticateHeader &gt; should parse resource metadata URI from WWW-Authenticate header" time="0.000336883">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; parseWWWAuthenticateHeader &gt; should return null when no resource metadata URI is found" time="0.000267776">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; extractBaseUrl &gt; should extract base URL from MCP server URL" time="0.000268597">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; extractBaseUrl &gt; should handle URLs with ports" time="0.000240525">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return true for SSE endpoints" time="0.000277674">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return true for non-MCP endpoints" time="0.000179202">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return false for MCP endpoints" time="0.00013497">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildResourceParameter &gt; should build resource parameter from endpoint URL" time="0.000132395">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildResourceParameter &gt; should handle URLs with ports" time="0.000100596">
        </testcase>
    </testsuite>
    <testsuite name="src/qwen/qwenContentGenerator.test.ts" timestamp="2025-09-25T23:26:49.349Z" hostname="uby" tests="44" failures="0" errors="0" skipped="0" time="0.204906473">
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Core Content Generation Methods &gt; should generate content with valid token" time="0.003602405">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Core Content Generation Methods &gt; should generate content stream with valid token" time="0.002104813">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Core Content Generation Methods &gt; should count tokens without requiring authentication" time="0.000587687">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Core Content Generation Methods &gt; should embed content with valid token" time="0.001319791">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token Management and Refresh Logic &gt; should refresh token on auth error and retry" time="0.000662656">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token Management and Refresh Logic &gt; should refresh token on auth error and retry for content stream" time="0.000444482">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token Management and Refresh Logic &gt; should handle token refresh failure" time="0.010255713">
            <system-err>
Failed to get token from shared manager: Error: Failed to obtain valid Qwen access token. Please re-authenticate.
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:532:9
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token Management and Refresh Logic &gt; should update endpoint when token is refreshed" time="0.000626269">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Endpoint URL Normalization &gt; should use default endpoint when no custom endpoint provided" time="0.000694716">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Endpoint URL Normalization &gt; should normalize hostname-only endpoints by adding https protocol" time="0.000603065">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Endpoint URL Normalization &gt; should preserve existing protocol in endpoint URLs" time="0.0004597">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Endpoint URL Normalization &gt; should not duplicate /v1 suffix if already present" time="0.0002756">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Client State Management &gt; should set dynamic credentials during operations" time="0.000253249">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Client State Management &gt; should set credentials even when operation throws" time="0.000387897">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Handling and Retry Logic &gt; should retry once on authentication errors" time="0.0007784">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Handling and Retry Logic &gt; should not retry non-authentication errors" time="0.001029054">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Handling and Retry Logic &gt; should handle error response from token refresh" time="0.002373621">
            <system-err>
Failed to get token from shared manager: Error: Failed to obtain valid Qwen access token. Please re-authenticate.
    at SharedTokenManager.getValidCredentials [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:175:19[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at QwenContentGenerator.getValidToken [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.ts:91:27[90m)[39m
    at attemptOperation [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.ts:130:35[90m)[39m
    at QwenContentGenerator.executeWithCredentialManagement [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.ts:141:14[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:908:7
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token State Management &gt; should cache and return current token" time="0.000768943">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token State Management &gt; should clear token on clearToken()" time="0.000503902">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token State Management &gt; should handle concurrent token refresh requests" time="0.153822068">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Logging Suppression &gt; should suppress logging for authentication errors" time="0.001439743">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Error Logging Suppression &gt; should not suppress logging for non-auth errors" time="0.000873897">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Integration Tests &gt; should handle complete workflow: get token, use it, refresh on auth error, retry" time="0.000937505">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; SharedTokenManager Integration &gt; should use SharedTokenManager to get valid credentials" time="0.001498813">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; SharedTokenManager Integration &gt; should handle SharedTokenManager errors gracefully" time="0.001375635">
            <system-err>
Failed to get token from shared manager: Error: Token manager error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:1154:30
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; SharedTokenManager Integration &gt; should handle missing access token from credentials" time="0.001005731">
            <system-err>
Failed to get token from shared manager: Error: No access token available
    at QwenContentGenerator.getValidToken [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.ts:96:15[90m)[39m
    at attemptOperation [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.ts:130:35[90m)[39m
    at QwenContentGenerator.executeWithCredentialManagement [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.ts:141:14[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; getCurrentEndpoint Method &gt; should handle URLs with custom ports" time="0.00044349">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; getCurrentEndpoint Method &gt; should handle URLs with existing paths" time="0.000356499">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; getCurrentEndpoint Method &gt; should handle undefined resource URL" time="0.000428082">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; getCurrentEndpoint Method &gt; should handle empty resource URL" time="0.000437079">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; isAuthError Method Enhanced &gt; should identify auth errors by numeric status codes" time="0.000509933">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; isAuthError Method Enhanced &gt; should identify auth errors by message content variations" time="0.000557822">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; isAuthError Method Enhanced &gt; should not identify non-auth errors" time="0.000841336">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; isAuthError Method Enhanced &gt; should handle complex error objects" time="0.000611731">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Stream Error Handling &gt; should set credentials when stream generation fails" time="0.000826439">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Stream Error Handling &gt; should set credentials for successful streams" time="0.00084894">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token and Endpoint Management &gt; should get current token from SharedTokenManager" time="0.000703051">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token and Endpoint Management &gt; should return null when no credentials available" time="0.00063818">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token and Endpoint Management &gt; should return null when credentials have no access token" time="0.00079489">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Token and Endpoint Management &gt; should clear token through SharedTokenManager" time="0.000804769">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Constructor and Initialization &gt; should initialize with configured base URL when provided" time="0.000659219">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Constructor and Initialization &gt; should get SharedTokenManager instance" time="0.000602535">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Edge Cases and Error Conditions &gt; should handle token retrieval with warning when SharedTokenManager fails" time="0.001876923">
        </testcase>
        <testcase classname="src/qwen/qwenContentGenerator.test.ts" name="QwenContentGenerator &gt; Edge Cases and Error Conditions &gt; should handle method types with token failure (except countTokens)" time="0.001827181">
            <system-err>
Failed to get token from shared manager: Error: Token error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:1658:30
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

Failed to get token from shared manager: Error: Token error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:1658:30
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

Failed to get token from shared manager: Error: Token error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenContentGenerator.test.ts:1658:30
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/qwen/qwenOAuth2.test.ts" timestamp="2025-09-25T23:26:49.350Z" hostname="uby" tests="82" failures="0" errors="0" skipped="0" time="2.063520751">
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="PKCE Code Generation &gt; generateCodeVerifier &gt; should generate a code verifier with correct length" time="0.001238912">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="PKCE Code Generation &gt; generateCodeVerifier &gt; should generate different verifiers on subsequent calls" time="0.000645784">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="PKCE Code Generation &gt; generateCodeChallenge &gt; should generate code challenge from verifier" time="0.000405861">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="PKCE Code Generation &gt; generatePKCEPair &gt; should generate valid PKCE pair" time="0.000198167">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceAuthorizationSuccess &gt; should return true for successful authorization response" time="0.000107369">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceAuthorizationSuccess &gt; should return false for error response" time="0.00005403">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenPending &gt; should return true for pending response" time="0.000054922">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenPending &gt; should return false for success response" time="0.000059399">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenPending &gt; should return false for error response" time="0.000047468">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return true for successful token response" time="0.000058408">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return false for pending response" time="0.000047728">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return false for error response" time="0.000038862">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return false for null access token" time="0.000036197">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isDeviceTokenSuccess &gt; should return false for empty access token" time="0.000045474">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isErrorResponse &gt; should return true for error responses" time="0.000063057">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Type Guards &gt; isErrorResponse &gt; should return false for successful responses" time="0.000039072">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; requestDeviceAuthorization &gt; should successfully request device authorization" time="0.001685949">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; requestDeviceAuthorization &gt; should handle error response" time="0.001526073">
            <system-out>
Device authorization result: {
  error: [32m&apos;INVALID_REQUEST&apos;[39m,
  error_description: [32m&apos;The request parameters are invalid&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken &gt; should successfully refresh access token" time="0.000528517">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken &gt; should handle refresh error" time="0.000361328">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken &gt; should successfully refresh access token and update credentials" time="0.000943525">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken &gt; should use new refresh token if provided in response" time="0.000225047">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; getAccessToken &gt; should return access token if valid and not expired" time="0.000230506">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; getAccessToken &gt; should refresh token if access token is expired" time="0.00019492">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; getAccessToken &gt; should return undefined if no access token and no refresh token" time="0.006857006">
            <system-err>
Failed to get access token from shared manager: Error: No credentials available
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:530:30
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should successfully poll for device token" time="0.000366108">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should return pending status when authorization is pending" time="0.000167419">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should handle HTTP error responses" time="0.000297119">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should include status code in error for better handling" time="0.000183109">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should handle authorization_pending with HTTP 400 according to RFC 8628" time="0.000128859">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; pollDeviceToken &gt; should handle slow_down with HTTP 429 according to RFC 8628" time="0.000100175">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken error handling &gt; should throw error if no refresh token available" time="0.000170616">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken error handling &gt; should handle 400 status as expired refresh token" time="0.000412242">
            <system-out>
Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; refreshAccessToken error handling &gt; should handle other HTTP error statuses" time="0.000191194">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; credentials management &gt; should set and get credentials correctly" time="0.000098923">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client &gt; credentials management &gt; should handle empty credentials" time="0.000108621">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient &gt; should load cached credentials if available" time="0.000898062">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient &gt; should handle cached credentials refresh failure" time="0.00167016">
            <system-out>
Shared token manager failed, attempting device flow: Error: Token refresh failed
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:807:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_request&apos;[39m,
  error_description: [32m&apos;Invalid request parameters&apos;[39m
}

            </system-out>
            <system-err>
Failed to get access token from shared manager: Error: Token refresh failed
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:807:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization flow failed: Device authorization failed: invalid_request - Invalid request parameters

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="CredentialsClearRequiredError &gt; should create error with correct name and message" time="0.000217412">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="CredentialsClearRequiredError &gt; should work without originalError" time="0.000177348">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="clearQwenCredentials &gt; should successfully clear credentials file" time="0.000456174">
            <system-out>
Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="clearQwenCredentials &gt; should handle file not found error gracefully" time="0.000185894">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="clearQwenCredentials &gt; should handle other file system errors gracefully" time="0.000323979">
            <system-err>
Warning: Failed to clear cached Qwen credentials: Error: Permission denied
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:886:29
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="QwenOAuth2Client - Additional Error Scenarios &gt; requestDeviceAuthorization HTTP errors &gt; should handle HTTP error response with non-ok status" time="0.000270621">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient - Enhanced Error Scenarios &gt; should handle generic refresh token errors" time="0.0009239">
            <system-out>
Shared token manager failed, attempting device flow: Error: Refresh failed
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:966:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_request&apos;[39m,
  error_description: [32m&apos;Invalid request parameters&apos;[39m
}

            </system-out>
            <system-err>
Failed to get access token from shared manager: Error: Refresh failed
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:966:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization flow failed: Device authorization failed: invalid_request - Invalid request parameters

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient - Enhanced Error Scenarios &gt; should handle different authentication failure reasons - timeout" time="2.00890791">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1001:28
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m0.1[39m
}

Waiting for authorization...

polling for token...

            </system-out>
            <system-err>

Authorization timeout, please restart the process.

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient - Enhanced Error Scenarios &gt; should handle authentication failure reason - rate limit" time="0.001798808">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1050:28
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

Waiting for authorization...

polling for token...


Too many requests. The server is rate limiting our requests. Please select a different authentication method or try again later.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="getQwenOAuthClient - Enhanced Error Scenarios &gt; should handle authentication failure reason - error" time="0.001030767">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1101:28
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_request&apos;[39m,
  error_description: [32m&apos;Invalid request parameters&apos;[39m
}

            </system-out>
            <system-err>
Device authorization flow failed: Device authorization failed: invalid_request - Invalid request parameters

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="authWithQwenDeviceFlow - Comprehensive Testing &gt; should handle device authorization error response" time="0.002014597">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1160:28
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_client&apos;[39m,
  error_description: [32m&apos;Client authentication failed&apos;[39m
}

            </system-out>
            <system-err>
Device authorization flow failed: Device authorization failed: invalid_client - Client authentication failed

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="authWithQwenDeviceFlow - Comprehensive Testing &gt; should handle successful authentication flow" time="0.000411511">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="authWithQwenDeviceFlow - Comprehensive Testing &gt; should handle 401 error during token polling" time="0.001143064">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1234:28
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

Waiting for authorization...

polling for token...

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="authWithQwenDeviceFlow - Comprehensive Testing &gt; should handle token polling with browser launch suppressed" time="0.001207333">
            <system-out>
Shared token manager failed, attempting device flow: Error: No credentials
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1282:28
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Browser Launch and Error Handling &gt; should handle browser launch failure gracefully" time="0.001257056">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Browser Launch and Error Handling &gt; should handle browser child process error gracefully" time="0.001450404">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Event Emitter Integration &gt; should export qwenOAuth2Events as EventEmitter" time="0.000162591">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Event Emitter Integration &gt; should define correct event enum values" time="0.000173952">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Utility Functions &gt; objectToUrlEncoded &gt; should encode object properties to URL-encoded format" time="0.00038414">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Utility Functions &gt; objectToUrlEncoded &gt; should handle special characters" time="0.000150679">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Utility Functions &gt; objectToUrlEncoded &gt; should handle empty object" time="0.000157101">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Utility Functions &gt; getQwenCachedCredentialPath &gt; should return correct path to cached credentials" time="0.000786725">
            <system-out>
Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Credential Caching Functions &gt; cacheQwenCredentials &gt; should create directory and write credentials to file" time="0.000222171">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Credential Caching Functions &gt; loadCachedQwenCredentials &gt; should load and validate cached credentials successfully" time="0.001424856">
            <system-out>
Shared token manager failed, attempting device flow: Error: No cached creds
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1593:30
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

            </system-out>
            <system-err>
Failed to get access token from shared manager: Error: No cached creds
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1593:30
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Credential Caching Functions &gt; loadCachedQwenCredentials &gt; should handle invalid cached credentials gracefully" time="0.001036157">
            <system-out>
Shared token manager failed, attempting device flow: Error: No cached creds
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1654:30
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Credential Caching Functions &gt; loadCachedQwenCredentials &gt; should handle file access errors" time="0.000786525">
            <system-out>
Shared token manager failed, attempting device flow: Error: No cached creds
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:1712:30
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  error: [32m&apos;invalid_request&apos;[39m,
  error_description: [32m&apos;Invalid request parameters&apos;[39m
}

            </system-out>
            <system-err>
Device authorization flow failed: Device authorization failed: invalid_request - Invalid request parameters

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; QwenOAuth2Client getAccessToken enhanced scenarios &gt; should return undefined when SharedTokenManager fails (no fallback)" time="0.001747653">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; QwenOAuth2Client getAccessToken enhanced scenarios &gt; should return undefined when both manager and cache fail" time="0.000315964">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; QwenOAuth2Client getAccessToken enhanced scenarios &gt; should handle missing credentials gracefully" time="0.0001945">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced requestDeviceAuthorization scenarios &gt; should include x-request-id header" time="0.001181035">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced requestDeviceAuthorization scenarios &gt; should include correct Content-Type and Accept headers" time="0.00062161">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced requestDeviceAuthorization scenarios &gt; should send correct form data" time="0.000923929">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced pollDeviceToken scenarios &gt; should handle JSON parsing error during error response" time="0.000385042">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced pollDeviceToken scenarios &gt; should include status code in thrown errors" time="0.00048109">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced pollDeviceToken scenarios &gt; should handle authorization_pending with correct status" time="0.000231057">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced refreshAccessToken scenarios &gt; should call clearQwenCredentials on 400 error" time="0.000551951">
            <system-out>
Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced refreshAccessToken scenarios &gt; should throw CredentialsClearRequiredError on 400 error" time="0.000736312">
            <system-out>
Cached Qwen credentials cleared successfully.

Cached Qwen credentials cleared successfully.

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced refreshAccessToken scenarios &gt; should preserve existing refresh token when new one not provided" time="0.000247819">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Enhanced Error Handling and Edge Cases &gt; Enhanced refreshAccessToken scenarios &gt; should include resource_url when provided in response" time="0.000158563">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="SharedTokenManager Integration in QwenOAuth2Client &gt; should use SharedTokenManager instance in constructor" time="0.000064409">
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="SharedTokenManager Integration in QwenOAuth2Client &gt; should handle TokenManagerError types correctly in getQwenOAuthClient" time="0.004944928">
            <system-out>
Shared token manager failed, attempting device flow: TokenManagerError: NO_REFRESH_TOKEN
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:2155:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

Shared token manager failed, attempting device flow: TokenManagerError: REFRESH_FAILED
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:2155:26
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

Shared token manager failed, attempting device flow: TokenManagerError: NETWORK_ERROR
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:2155:26
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

Shared token manager failed, attempting device flow: TokenManagerError: REFRESH_FAILED
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/qwen/qwenOAuth2.test.ts:2155:26
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}


=== Qwen OAuth Device Authorization ===
Please visit the following URL in your browser to authorize:

https://chat.qwen.ai/device?code=TEST123

Waiting for authorization to complete...

Waiting for authorization...

polling for token...

Authentication successful! Access token obtained.

            </system-out>
            <system-err>
Token manager error: NO_REFRESH_TOKEN

Token manager error: REFRESH_FAILED

Token manager error: NETWORK_ERROR

Token manager error: REFRESH_FAILED

            </system-err>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Constants and Configuration &gt; should have correct OAuth endpoints" time="0.000330431">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Constants and Configuration &gt; should use correct client ID in requests" time="0.000286861">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/qwen/qwenOAuth2.test.ts" name="Constants and Configuration &gt; should use correct default scope" time="0.000218164">
            <system-out>
Device authorization result: {
  device_code: [32m&apos;test-device-code&apos;[39m,
  user_code: [32m&apos;TEST123&apos;[39m,
  verification_uri: [32m&apos;https://chat.qwen.ai/device&apos;[39m,
  verification_uri_complete: [32m&apos;https://chat.qwen.ai/device?code=TEST123&apos;[39m,
  expires_in: [33m1800[39m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/qwen/sharedTokenManager.test.ts" timestamp="2025-09-25T23:26:49.354Z" hostname="uby" tests="31" failures="0" errors="0" skipped="0" time="0.261108526">
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Singleton Pattern &gt; should return the same instance when called multiple times" time="0.002509522">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Singleton Pattern &gt; should create a new instance after reset" time="0.000940089">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should return valid cached credentials without refresh" time="0.000776897">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should refresh expired credentials" time="0.001469438">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should force refresh when forceRefresh is true" time="0.000487602">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should throw TokenManagerError when refresh token is missing" time="0.001774372">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should throw TokenManagerError when refresh fails" time="0.000506207">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should handle network errors during refresh" time="0.00047571">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should wait for ongoing refresh and return same result" time="0.000531172">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; getValidCredentials &gt; should reload credentials from file when file is modified" time="0.000401193">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Cache Management &gt; should clear cache" time="0.000163963">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Cache Management &gt; should return current credentials from cache" time="0.000155117">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Cache Management &gt; should return null when no credentials are cached" time="0.000079086">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Refresh Status &gt; should return false when no refresh is in progress" time="0.000083355">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Refresh Status &gt; should return true when refresh is in progress" time="0.000635406">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Debug Info &gt; should return complete debug information" time="0.00060533">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Debug Info &gt; should indicate expired credentials in debug info" time="0.000190101">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Debug Info &gt; should indicate no credentials in debug info" time="0.000087783">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should create TokenManagerError with correct type and message" time="0.000209337">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should handle file access errors gracefully" time="0.000278115">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should handle missing file gracefully" time="0.000207363">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should handle lock timeout scenarios" time="0.238342429">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Error Handling &gt; should handle refresh response without access token" time="0.001130631">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; File System Operations &gt; should handle file reload failures gracefully" time="0.000631168">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; File System Operations &gt; should handle invalid JSON in credentials file" time="0.000539749">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; File System Operations &gt; should handle directory creation during save" time="0.00204884">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Lock File Management &gt; should clean up lock file during process cleanup" time="0.000445654">
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; Lock File Management &gt; should handle stale lock cleanup" time="0.00147566">
            <system-err>
Removed stale lock file: /home/user/.qwen/oauth_creds.lock (age: 1758842802119ms)

            </system-err>
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; CredentialsClearRequiredError handling &gt; should clear memory cache when CredentialsClearRequiredError is thrown during refresh" time="0.001208376">
            <system-out>
SharedTokenManager: Clearing memory cache due to credentials clear requirement

            </system-out>
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; CredentialsClearRequiredError handling &gt; should convert CredentialsClearRequiredError to TokenManagerError" time="0.000684306">
            <system-out>
SharedTokenManager: Clearing memory cache due to credentials clear requirement

            </system-out>
        </testcase>
        <testcase classname="src/qwen/sharedTokenManager.test.ts" name="SharedTokenManager &gt; CredentialsClearRequiredError handling &gt; should properly clean up timeout when file operation completes before timeout" time="0.000484677">
        </testcase>
    </testsuite>
    <testsuite name="src/services/chatRecordingService.test.ts" timestamp="2025-09-25T23:26:49.355Z" hostname="uby" tests="10" failures="0" errors="0" skipped="0" time="0.012985974">
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; initialize &gt; should create a new session if none is provided" time="0.004413565">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; initialize &gt; should resume from an existing session if provided" time="0.0008972">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessage &gt; should record a new message" time="0.001323629">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessage &gt; should append to the last message if append is true and types match" time="0.000802234">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordThought &gt; should queue a thought" time="0.000604709">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessageTokens &gt; should update the last message with token info" time="0.000706407">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessageTokens &gt; should queue token info if the last message already has tokens" time="0.000436428">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordToolCalls &gt; should add new tool calls to the last message" time="0.000652266">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordToolCalls &gt; should create a new message if the last message is not from gemini" time="0.000919982">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; deleteSession &gt; should delete the session file" time="0.00077861">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-09-25T23:26:49.355Z" hostname="uby" tests="13" failures="0" errors="0" skipped="0" time="0.046991243">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default in a git repo" time="0.007875289">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not load git repo patterns when not in a git repo" time="0.004033232">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should load .qwenignore patterns even when not in a git repo" time="0.004490156">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored and gemini-ignored files by default" time="0.00317826">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.00392467">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGeminiIgnore is false" time="0.003703461">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.003731934">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return true for git-ignored files" time="0.002854792">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return false for non-git-ignored files" time="0.003860652">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return true for gemini-ignored files" time="0.002499865">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return false for non-gemini-ignored files" time="0.001958082">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.001407474">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.001897841">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileSystemService.test.ts" timestamp="2025-09-25T23:26:49.356Z" hostname="uby" tests="3" failures="0" errors="0" skipped="0" time="0.006767189">
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; readTextFile &gt; should read file content using fs" time="0.003581095">
        </testcase>
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; readTextFile &gt; should propagate fs.readFile errors" time="0.001499373">
        </testcase>
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; writeTextFile &gt; should write file content using fs" time="0.000257055">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-09-25T23:26:49.356Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.038320722">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance" time="0.004840054">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.002303101">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.00546531">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.001206642">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.001508591">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.003387497">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.003203015">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.004066834">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.002008846">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.002258919">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not create a .gitignore in shadow repo if project .gitignore does not exist" time="0.001582177">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.001571116">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.001910415">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.001319361">
        </testcase>
    </testsuite>
    <testsuite name="src/services/loopDetectionService.test.ts" timestamp="2025-09-25T23:26:49.356Z" hostname="uby" tests="35" failures="0" errors="0" skipped="0" time="0.257321129">
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for fewer than TOOL_CALL_LOOP_THRESHOLD identical calls" time="0.00202177">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on the TOOL_CALL_LOOP_THRESHOLD-th identical call" time="0.000905054">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on subsequent identical calls" time="0.000213555">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for different tool calls" time="0.000332875">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not reset tool call counter for other event types" time="0.000290558">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for random content" time="0.195347259">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should detect a loop when a chunk of content repeats consecutively" time="0.001137655">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop if repetitions are very far apart" time="0.011813776">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect a loop when repetitive content is inside a code block" time="0.000349597">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect loops when content transitions into a code block" time="0.000710213">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should skip loop detection when already inside a code block (this.inCodeBlock)" time="0.00029218">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should correctly track inCodeBlock state with multiple fence transitions" time="0.000187407">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should detect a loop when repetitive content is outside a code block" time="0.001004488">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should handle content with multiple code blocks and no loops" time="0.000113109">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should handle content with mixed code blocks and looping text" time="0.000752272">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect a loop for a long code block with some repeating tokens" time="0.000290237">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a code fence is found" time="0.000935751">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a table is detected" time="0.00173504">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a list item is detected" time="0.001445685">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a heading is detected" time="0.00143244">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a blockquote is detected" time="0.001161699">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various list item formats" time="0.006452436">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various table formats" time="0.004776367">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various heading levels" time="0.007803136">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Edge Cases &gt; should handle empty content" time="0.00017312">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Divider Content Detection &gt; should not detect a loop for repeating divider-like content" time="0.000303982">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Divider Content Detection &gt; should not detect a loop for repeating complex box-drawing dividers" time="0.00044318">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Reset Functionality &gt; tool call should reset content count" time="0.000306958">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; General Behavior &gt; should return false for unhandled event types" time="0.000106187">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not trigger LLM check before LLM_CHECK_AFTER_TURNS" time="0.00052449">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should trigger LLM check on the 30th turn" time="0.000523679">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should detect a cognitive loop when confidence is high" time="0.003905284">
            <system-err>
Repetitive actions

            </system-err>
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not detect a loop when confidence is low" time="0.000341581">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should adjust the check interval based on confidence" time="0.000183579">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should handle errors from generateJson gracefully" time="0.006722656">
            <system-out>
Error: API error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/services/loopDetectionService.test.ts:718:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/services/shellExecutionService.test.ts" timestamp="2025-09-25T23:26:49.357Z" hostname="uby" tests="30" failures="0" errors="0" skipped="0" time="0.048534147">
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should execute a command and capture output" time="0.01285998">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should strip ANSI codes from output" time="0.003649882">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should correctly decode multi-byte characters split across chunks" time="0.004022611">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should handle commands with no output" time="0.001457596">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should capture a non-zero exit code" time="0.002525633">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should capture a termination signal" time="0.000976066">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should handle a synchronous spawn error" time="0.001143927">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Aborting Commands &gt; should abort a running process and set the aborted flag" time="0.001188268">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Binary Output &gt; should detect binary output and switch to progress events" time="0.001287041">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Binary Output &gt; should not emit data events after binary is detected" time="0.003168893">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Platform-Specific Behavior &gt; should use cmd.exe on Windows" time="0.001170015">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Platform-Specific Behavior &gt; should use bash on Linux" time="0.001031628">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should execute a command and capture stdout and stderr" time="0.00301608">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should strip ANSI codes from output" time="0.000652798">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should correctly decode multi-byte characters split across chunks" time="0.000539698">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should handle commands with no output" time="0.000401282">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should capture a non-zero exit code and format output correctly" time="0.000377459">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should capture a termination signal" time="0.000300696">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should handle a spawn error" time="0.000284627">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; handles errors that do not fire the exit event" time="0.000284507">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; on &apos;linux&apos; &gt; should abort a running process and set the aborted flag" time="0.000469208">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; on &apos;win32&apos; &gt; should abort a running process and set the aborted flag" time="0.000350869">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; should gracefully attempt SIGKILL on linux if SIGTERM fails" time="0.002046406">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Binary Output &gt; should detect binary output and switch to progress events" time="0.000512358">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Binary Output &gt; should not emit data events after binary is detected" time="0.00049165">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Platform-Specific Behavior &gt; should use cmd.exe on Windows" time="0.000446777">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Platform-Specific Behavior &gt; should use bash and detached process group on Linux" time="0.000315704">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should use node-pty when shouldUseNodePty is true and pty is available" time="0.000919761">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should use child_process when shouldUseNodePty is false" time="0.000355578">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should fall back to child_process if pty is not available even if shouldUseNodePty is true" time="0.000325873">
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/builtin-agents.test.ts" timestamp="2025-09-25T23:26:49.358Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.006037589">
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgents &gt; should return array of builtin agents with correct properties" time="0.002308812">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgents &gt; should include general-purpose agent" time="0.000345419">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgent &gt; should return correct agent for valid name" time="0.000214227">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgent &gt; should return null for invalid name" time="0.000151169">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; isBuiltinAgent &gt; should return true for valid builtin agent names" time="0.000180364">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; isBuiltinAgent &gt; should return false for invalid names" time="0.000301388">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; getBuiltinAgentNames &gt; should return array of agent names" time="0.000758152">
        </testcase>
        <testcase classname="src/subagents/builtin-agents.test.ts" name="BuiltinAgentRegistry &gt; consistency &gt; should maintain consistency across all methods" time="0.000325772">
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/subagent-manager.test.ts" timestamp="2025-09-25T23:26:49.358Z" hostname="uby" tests="52" failures="0" errors="0" skipped="0" time="0.095716513">
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should parse valid markdown content" time="0.031467705">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getInstallationIdPath [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:40:30[90m)[39m
    at InstallationManager.getInstallationIdPath [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:14:20[90m)[39m
    at InstallationManager.readInstallationIdFromFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:18:37[90m)[39m
    at InstallationManager.getInstallationId [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:42:33[90m)[39m
    at QwenLogger.generateUserId [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:123:53[90m)[39m
    at new QwenLogger [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:114:24[90m)[39m
    at QwenLogger.getInstance [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:131:29[90m)[39m
    at logCliConfiguration [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/loggers.ts:85:14[90m)[39m {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should parse content with tools" time="0.001825627">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should parse content with model config" time="0.000765867">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should parse content with run config" time="0.000568441">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should handle numeric name and description values" time="0.000827611">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should handle boolean name and description values" time="0.00072398">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should determine level from file path" time="0.000533768">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should throw error for invalid frontmatter format" time="0.000701187">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should throw error for missing name" time="0.000590242">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should throw error for missing description" time="0.000499694">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; parseSubagentContent &gt; should not warn when filename matches subagent name" time="0.000785714">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; serializeSubagent &gt; should serialize basic configuration" time="0.00074612">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; serializeSubagent &gt; should serialize configuration with tools" time="0.000548544">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; serializeSubagent &gt; should serialize configuration with model config" time="0.000558604">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; serializeSubagent &gt; should not include empty optional fields" time="0.000597716">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should create subagent successfully" time="0.003728698">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should throw error if file already exists and overwrite is false" time="0.002466633">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should overwrite file when overwrite is true" time="0.001202044">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should use custom path when provided" time="0.001218665">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; createSubagent &gt; should throw error on file write failure" time="0.001082092">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should load subagent from project level first" time="0.001179993">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should fall back to user level if project level fails" time="0.001091158">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should return null if not found at either level" time="0.000984832">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should load subagent even when filename does not match name" time="0.001034224">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should search user level when filename mismatch at project level" time="0.001714562">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; loadSubagent &gt; should handle specific level search with filename mismatch" time="0.000951601">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; updateSubagent &gt; should update existing subagent" time="0.001125973">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; updateSubagent &gt; should throw error if subagent not found" time="0.001876091">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; updateSubagent &gt; should throw error on write failure" time="0.001682222">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should delete subagent from specified level" time="0.000977117">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should delete from both levels if no level specified" time="0.000729299">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should throw error if subagent not found" time="0.000781646">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should succeed if deleted from at least one level" time="0.000945048">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should delete subagent with mismatched filename" time="0.000866272">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; deleteSubagent &gt; should handle deletion when multiple files exist but only one matches" time="0.00080538">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should list subagents from both levels" time="0.001139778">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should prioritize project level over user level" time="0.001933096">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should filter by level" time="0.001158823">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should sort by name" time="0.000944457">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should handle empty directories" time="0.000963362">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; listSubagents &gt; should handle directory read errors" time="0.000903932">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; findSubagentByName &gt; should find existing subagent" time="0.00088071">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; findSubagentByName &gt; should return null for non-existent subagent" time="0.000807695">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; isNameAvailable &gt; should return true for available names" time="0.000715624">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; isNameAvailable &gt; should return false for existing names" time="0.000705806">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; isNameAvailable &gt; should check specific level when provided" time="0.007904313">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; convertToRuntimeConfig &gt; should convert basic configuration" time="0.00158928">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; convertToRuntimeConfig &gt; should include tool configuration when tools are specified" time="0.002064088">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; convertToRuntimeConfig &gt; should transform display names to tool names in tool configuration" time="0.001214497">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
            <system-err>
Tool &quot;unknown_tool&quot; not found in tool registry, preserving as-is

            </system-err>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; convertToRuntimeConfig &gt; should merge custom model and run configurations" time="0.000753704">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; mergeConfigurations &gt; should merge basic properties" time="0.000834204">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/subagents/subagent-manager.test.ts" name="SubagentManager &gt; Runtime Configuration Methods &gt; mergeConfigurations &gt; should merge nested configurations" time="0.000740169">
            <system-out>
Failed to initialize logger: TypeError: The &quot;path&quot; argument must be of type string. Received undefined
[90m    at Proxy.join (node:path:1339:7)[39m
    at Storage.getGlobalGeminiDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:26:19[90m)[39m
    at Storage.getGlobalTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:56:30[90m)[39m
    at Storage.getProjectTempDir [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/storage.ts:65:29[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:144:33[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:440:17[90m)[39m
    at Module.makeFakeConfig [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/test-utils/config.ts:33:10[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent-manager.test.ts:58:18
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20 {
  code: [32m&apos;ERR_INVALID_ARG_TYPE&apos;[39m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/subagent-statistics.test.ts" timestamp="2025-09-25T23:26:49.361Z" hostname="uby" tests="29" failures="0" errors="0" skipped="0" time="0.018665501">
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; basic statistics tracking &gt; should track execution time" time="0.00150819">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; basic statistics tracking &gt; should track rounds" time="0.000203667">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; basic statistics tracking &gt; should track tool calls" time="0.000257616">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; basic statistics tracking &gt; should track tokens" time="0.000178009">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; tool usage statistics &gt; should track individual tool usage" time="0.000844512">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatCompact &gt; should format basic execution summary" time="0.010780554">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatCompact &gt; should handle zero tool calls" time="0.000277624">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatCompact &gt; should show zero tokens when no tokens recorded" time="0.000146381">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatDetailed &gt; should include quality assessment" time="0.000595522">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatDetailed &gt; should include speed assessment" time="0.000202725">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatDetailed &gt; should show top tools" time="0.000204809">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; formatDetailed &gt; should include performance insights" time="0.000148294">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; quality categories &gt; should categorize excellent execution" time="0.000114883">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; quality categories &gt; should categorize good execution" time="0.000116586">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; quality categories &gt; should categorize poor execution" time="0.000074077">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; speed categories &gt; should categorize fast completion" time="0.000078194">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; speed categories &gt; should categorize good speed" time="0.000062997">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; speed categories &gt; should categorize moderate duration" time="0.000067765">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; speed categories &gt; should categorize long execution" time="0.000075269">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should suggest reviewing low success rate" time="0.000087281">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should suggest breaking down long tasks" time="0.000081731">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should suggest optimizing high token usage" time="0.000084536">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should identify high token usage per call" time="0.000084206">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should identify network failures" time="0.000079157">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; performance tips &gt; should identify slow tools" time="0.000075389">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; duration formatting &gt; should format milliseconds" time="0.00006504">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; duration formatting &gt; should format seconds" time="0.000060913">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; duration formatting &gt; should format minutes and seconds" time="0.000061093">
        </testcase>
        <testcase classname="src/subagents/subagent-statistics.test.ts" name="SubagentStatistics &gt; duration formatting &gt; should format hours and minutes" time="0.000063067">
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/subagent.test.ts" timestamp="2025-09-25T23:26:49.362Z" hostname="uby" tests="16" failures="0" errors="0" skipped="0" time="0.083521012">
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; ContextState &gt; should set and get values correctly" time="0.002026609">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; ContextState &gt; should return undefined for missing keys" time="0.000187577">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should create a SubAgentScope successfully with minimal config" time="0.025166748">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should not block creation when a tool may require confirmation" time="0.002060202">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should succeed if tools do not require confirmation" time="0.001748033">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should allow creation regardless of tool parameter requirements" time="0.001998527">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should correctly template the system prompt and initialize GeminiChat" time="0.012683965">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should use initialMessages instead of systemPrompt if provided" time="0.002479817">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should throw an error if template variables are missing" time="0.002885969">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should validate that systemPrompt and initialMessages are mutually exclusive" time="0.001659139">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should terminate with GOAL if no outputs are expected and model stops" time="0.00264854">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should terminate with GOAL when model provides final text" time="0.002246236">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should execute external tools and provide the response to the model" time="0.005014497">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with MAX_TURNS if the limit is reached" time="0.002861674">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with TIMEOUT if the time limit is reached during an LLM call" time="0.006047688">
        </testcase>
        <testcase classname="src/subagents/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with ERROR if the model call throws" time="0.00989235">
            <system-err>
Error during subagent execution: Error: API Failure
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/subagents/subagent.test.ts:694:49
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/types.test.ts" timestamp="2025-09-25T23:26:49.363Z" hostname="uby" tests="3" failures="0" errors="0" skipped="0" time="0.003434604">
        <testcase classname="src/subagents/types.test.ts" name="SubagentError &gt; should create error with message and code" time="0.00145991">
        </testcase>
        <testcase classname="src/subagents/types.test.ts" name="SubagentError &gt; should create error with subagent name" time="0.000300006">
        </testcase>
        <testcase classname="src/subagents/types.test.ts" name="SubagentError &gt; should have correct error codes" time="0.000204479">
        </testcase>
    </testsuite>
    <testsuite name="src/subagents/validation.test.ts" timestamp="2025-09-25T23:26:49.363Z" hostname="uby" tests="37" failures="0" errors="0" skipped="0" time="0.014607093">
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should accept valid names" time="0.002602063">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject empty or whitespace names" time="0.000835124">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names that are too short" time="0.000198347">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names that are too long" time="0.000144006">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names with invalid characters" time="0.000313631">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names starting with special characters" time="0.000265251">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject names ending with special characters" time="0.000220548">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should reject reserved names" time="0.000404939">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should warn about naming conventions" time="0.001780634">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateName &gt; should warn about mixed separators" time="0.000160267">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should accept valid system prompts" time="0.000291359">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should reject empty prompts" time="0.000238972">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should reject prompts that are too short" time="0.000115694">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should reject prompts that are too long" time="0.000112378">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateSystemPrompt &gt; should warn about long prompts" time="0.000130061">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should accept valid tool arrays" time="0.000180473">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should reject non-array inputs" time="0.000100877">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should warn about empty arrays" time="0.000091459">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should warn about duplicate tools" time="0.000063047">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should reject non-string tool names" time="0.000377629">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateTools &gt; should reject empty tool names" time="0.000281892">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should accept valid model configurations" time="0.000586525">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should reject invalid model names" time="0.000181105">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should reject invalid temperature values" time="0.000163763">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should warn about high temperature" time="0.000106266">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateModelConfig &gt; should reject invalid top_p values" time="0.000119641">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should accept valid run configurations" time="0.000376987">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should reject invalid max_time_minutes" time="0.000144076">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should warn about very long execution times" time="0.00011341">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should reject invalid max_turns" time="0.000127406">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateRunConfig &gt; should warn about high turn limits" time="0.000084947">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateConfig &gt; should accept valid configurations" time="0.000200952">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateConfig &gt; should collect errors from all validation steps" time="0.000142664">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateConfig &gt; should collect warnings from all validation steps" time="0.00017342">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateOrThrow &gt; should not throw for valid configurations" time="0.000521735">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateOrThrow &gt; should throw SubagentError for invalid configurations" time="0.000233101">
        </testcase>
        <testcase classname="src/subagents/validation.test.ts" name="SubagentValidator &gt; validateOrThrow &gt; should include subagent name in error" time="0.000134899">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-09-25T23:26:49.364Z" hostname="uby" tests="15" failures="0" errors="0" skipped="0" time="0.036300335">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logChatCompression &gt; logs the chat compression event to QwenLogger" time="0.023329509">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logChatCompression &gt; records the chat compression event to OTEL" time="0.001430476">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.000862466">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.000608286">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.00043212">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.001159825">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.000400291">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.000311366">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.000424155">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFlashFallback &gt; should log flash fallback event" time="0.000780504">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.001420238">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.001069609">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.001009167">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.00089188">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.000499404">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-09-25T23:26:49.365Z" hostname="uby" tests="13" failures="0" errors="0" skipped="0" time="0.136225675">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordChatCompressionMetrics &gt; does not record metrics if not initialized" time="0.031620327">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordChatCompressionMetrics &gt; records token compression with the correct attributes" time="0.013524299">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.01017286">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.006286069">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.007207985">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.006309913">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.006572259">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.00873025">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.005375234">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.015555176">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should include diffStat when provided" time="0.004375655">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not include diffStat attributes when diffStat is not provided" time="0.004743886">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should handle diffStat with all zero values" time="0.013507448">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/sdk.test.ts" timestamp="2025-09-25T23:26:49.365Z" hostname="uby" tests="4" failures="0" errors="0" skipped="0" time="0.017077974">
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use gRPC exporters when protocol is grpc" time="0.008041377">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use HTTP exporters when protocol is http" time="0.00235157">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should parse gRPC endpoint correctly" time="0.00357308">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should parse HTTP endpoint correctly" time="0.001252067">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry-utils.test.ts" timestamp="2025-09-25T23:26:49.366Z" hostname="uby" tests="6" failures="0" errors="0" skipped="0" time="0.007995461">
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when file_path is present" time="0.002745269">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when absolute_path is present" time="0.00036173">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when path is present" time="0.000106527">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return undefined when no file path is present" time="0.000104904">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should handle unknown file extensions gracefully" time="0.000079106">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should handle files with no extension" time="0.000074748">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-09-25T23:26:49.366Z" hostname="uby" tests="2" failures="0" errors="0" skipped="0" time="0.00968144">
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should initialize the telemetry service" time="0.006256334">
        </testcase>
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should shutdown the telemetry service" time="0.00253506">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-09-25T23:26:49.366Z" hostname="uby" tests="19" failures="0" errors="0" skipped="0" time="0.043430756">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.001883685">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.001423273">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.000267545">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.000297119">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.000303702">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.000221219">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.000155778">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.028234393">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.000926424">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.001601383">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.00127014">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.001968902">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.00137796">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should reset the last prompt token count to 0" time="0.000162841">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should emit an update event when resetLastPromptTokenCount is called" time="0.000180524">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should not affect other metrics when resetLastPromptTokenCount is called" time="0.000083354">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should work correctly when called multiple times" time="0.000156209">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event with Line Count Metadata &gt; should aggregate valid line count metadata" time="0.000760688">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event with Line Count Metadata &gt; should ignore null/undefined values in line count metadata" time="0.000627711">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/diffOptions.test.ts" timestamp="2025-09-25T23:26:49.367Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.007278815">
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should return 0 for all stats when there are no changes" time="0.003550849">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report AI additions" time="0.000651645">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report AI removals" time="0.000370806">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report AI modifications" time="0.000229424">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user additions" time="0.000173912">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user removals" time="0.000164113">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user modifications" time="0.000277915">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should handle complex changes from both AI and user" time="0.000262496">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should report a single line modification as one addition and one removal" time="0.000193077">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-09-25T23:26:49.367Z" hostname="uby" tests="42" failures="0" errors="0" skipped="1" time="0.134349964">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return newString if isNewFile is true" time="0.002493022">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.000433462">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.00023201">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should replace oldString with newString in currentContent" time="0.0002106">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.000191504">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.021158573">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.001801703">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001872234">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should throw an error if params are invalid" time="0.002175455">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.004270761">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found" time="0.003095116">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found" time="0.002375605">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.002143295">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should throw error if file path is not absolute" time="0.002189831">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should throw error if file path is empty" time="0.002193257">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.009593058">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.003874899">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.00370258">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.003306137">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.003352182">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.003474317">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.002570225">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.002679807">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.002765546">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.003163433">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string and new_string are identical" time="0.003253519">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return EDIT_NO_CHANGE error if replacement results in identical content" time="0.003133196">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return FILE_NOT_FOUND error" time="0.002283384">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return ATTEMPT_TO_CREATE_EXISTING_FILE error" time="0.001957651">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return NO_OCCURRENCE_FOUND error" time="0.001813585">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return EXPECTED_OCCURRENCE_MISMATCH error" time="0.005786775">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return NO_CHANGE error" time="0.002352973">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should throw INVALID_PARAMETERS error for relative path" time="0.001990763">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return FILE_WRITE_FAILURE on write error" time="0.00305953">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.002385093">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.002865822">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.002693452">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.003400641">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.002722156">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.002348234">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; IDE mode &gt; should call ideClient.openDiff and update params on confirmation" time="0.004653488">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/exitPlanMode.test.ts" timestamp="2025-09-25T23:26:49.368Z" hostname="uby" tests="17" failures="0" errors="0" skipped="0" time="0.006824605">
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; constructor and metadata &gt; should have correct tool name" time="0.001555397">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; constructor and metadata &gt; should have correct display name" time="0.000133127">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; constructor and metadata &gt; should have correct kind" time="0.000081601">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; constructor and metadata &gt; should have correct schema" time="0.000642318">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should accept valid parameters" time="0.000198307">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should reject missing plan parameter" time="0.00008633">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should reject empty plan parameter" time="0.00006502">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should reject whitespace-only plan parameter" time="0.000057076">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; validateToolParams &gt; should reject non-string plan parameter" time="0.000066313">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should execute successfully through tool interface after approval" time="0.0013029">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should request confirmation with plan details" time="0.000255884">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should remain in plan mode when confirmation is rejected" time="0.000211621">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should have correct description" time="0.000092571">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should handle execution errors gracefully" time="0.000490567">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool execution &gt; should return empty tool locations" time="0.000136202">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool description &gt; should contain usage guidelines" time="0.000285969">
        </testcase>
        <testcase classname="src/tools/exitPlanMode.test.ts" name="ExitPlanModeTool &gt; tool description &gt; should contain examples" time="0.000160066">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-09-25T23:26:49.369Z" hostname="uby" tests="34" failures="0" errors="0" skipped="0" time="1.625496446">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.139073774">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.069225947">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.054932795">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.056793437">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.055164012">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.055687511">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.054434302">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.057607572">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files with special characters in the name" time="0.056396442">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files with special characters like [] and () in the path" time="0.057833611">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.057300214">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return a PATH_NOT_IN_WORKSPACE error if path is outside workspace" time="0.056365936">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return a GLOB_EXECUTION_ERROR on glob failure" time="0.060742142">
            <system-err>
GlobLogic execute Error: Glob failed Error: Glob failed
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/tools/glob.test.ts:229:46
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.055683934">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.055950718">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.060398455">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.055793998">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.054443529">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.05617912">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should pass if path is provided but is not a string (type coercion)" time="0.054931673">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should pass if case_sensitive is provided but is not a boolean (type coercion)" time="0.055982857">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.054477272">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.055771827">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.056478194">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should validate search paths are within workspace boundaries" time="0.054524859">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should provide clear error messages when path is outside workspace" time="0.056163722">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should work with paths in workspace subdirectories" time="0.055219134">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.008002394">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.000284106">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.000150238">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.000087572">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.000121124">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.000454912">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.000149566">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-09-25T23:26:49.370Z" hostname="uby" tests="29" failures="0" errors="0" skipped="0" time="0.297375679">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.03924891">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.007596693">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.004566478">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.005003907">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.004812673">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.007666933">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.005390893">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.017534208">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.010894835">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.014413655">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.012721194">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.008926363">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.008091629">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.01159455">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should throw an error if params are invalid" time="0.004621099">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return a GREP_EXECUTION_ERROR on failure" time="0.00789724">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
            <system-err>
GrepLogic: Error in performGrepSearch (Strategy: javascript fallback): filesIterator is not async iterable

Error during GrepLogic execution: TypeError: filesIterator is not async iterable

            </system-err>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; multi-directory workspace &gt; should search across all workspace directories when no path is specified" time="0.015460521">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; multi-directory workspace &gt; should search only specified path within workspace directories" time="0.010191785">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.004676562">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.005994299">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.005733287">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should indicate searching across all workspace directories when no path specified" time="0.003599138">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.004388258">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.004921775">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; Result limiting &gt; should limit results to default 20 matches" time="0.021595581">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; Result limiting &gt; should respect custom maxResults parameter" time="0.012164674">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; Result limiting &gt; should not show truncation warning when all results fit" time="0.018936953">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; Result limiting &gt; should validate maxResults parameter" time="0.00748619">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; Result limiting &gt; should accept valid maxResults parameter" time="0.008783599">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/ls.test.ts" timestamp="2025-09-25T23:26:49.371Z" hostname="uby" tests="22" failures="0" errors="0" skipped="0" time="0.102096387">
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should accept valid absolute paths within workspace" time="0.041305354">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should reject relative paths" time="0.00487539">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should reject paths outside workspace with clear error message" time="0.002815879">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should accept paths in secondary workspace directory" time="0.002388118">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should list files in a directory" time="0.003257586">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should list files from secondary workspace directory" time="0.00255166">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle empty directories" time="0.00232942">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect ignore patterns" time="0.002575865">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect gitignore patterns" time="0.002592637">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect geminiignore patterns" time="0.002537274">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle non-directory paths" time="0.002272194">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle non-existent paths" time="0.002636958">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should sort directories first, then files alphabetically" time="0.002874458">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle permission errors gracefully" time="0.002568281">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should throw for invalid params at build time" time="0.002171267">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle errors accessing individual files during listing" time="0.004928387">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; getDescription &gt; should return shortened relative path" time="0.003777308">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; getDescription &gt; should handle paths in secondary workspace" time="0.002226569">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should accept paths in primary workspace directory" time="0.002123599">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should accept paths in secondary workspace directory" time="0.002520483">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should reject paths outside all workspace directories" time="0.002381726">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should list files from secondary workspace directory" time="0.002122466">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client-manager.test.ts" timestamp="2025-09-25T23:26:49.372Z" hostname="uby" tests="1" failures="0" errors="0" skipped="0" time="0.002172659">
        <testcase classname="src/tools/mcp-client-manager.test.ts" name="McpClientManager &gt; should discover tools from all servers" time="0.001457206">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-09-25T23:26:49.372Z" hostname="uby" tests="42" failures="0" errors="0" skipped="0" time="0.018279427">
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should discover tools" time="0.004095958">
            <system-err>
Error discovering prompts from test-server: mcpClient.getServerCapabilities is not a function

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should skip tools if a parameter is missing a type" time="0.002240755">
            <system-err>
Error discovering prompts from test-server: mcpClient.getServerCapabilities is not a function

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should handle errors when discovering prompts" time="0.002346551">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should do nothing if no MCP servers or command are configured" time="0.000459189">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should discover tools via mcpServerCommand" time="0.00071902">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should handle error if mcpServerCommand parsing fails" time="0.000250514">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; without headers" time="0.000279417">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; with headers" time="0.000208896">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; without headers" time="0.000234704">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; with headers" time="0.000166979">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via command" time="0.0008434">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should use GoogleCredentialProvider when specified" time="0.000422973">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should use GoogleCredentialProvider with SSE transport" time="0.00023223">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should throw an error if no URL is provided with GoogleCredentialProvider" time="0.000295327">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if no include or exclude lists are provided" time="0.000228944">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in the exclude list" time="0.000154295">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list" time="0.000146952">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list with parentheses" time="0.000120453">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the include list exists but does not contain the tool" time="0.000106347">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in both the include and exclude lists" time="0.000113199">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the function declaration has no name" time="0.000278816">
            <system-err>
Discovered a function declaration without a name from MCP server &apos;myServer&apos;. Skipping.

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with anyOf" time="0.000158102">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with anyOf" time="0.000119461">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with allOf" time="0.000153734">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with allOf" time="0.000098893">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with oneOf" time="0.000099554">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with oneOf" time="0.000095908">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with nested subschemas" time="0.000104944">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with nested subschemas" time="0.000098061">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with a type and subschemas" time="0.000103712">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for a schema with no type and no subschemas" time="0.000104564">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema" time="0.00009732">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if a parameter is missing a type" time="0.000094615">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if a nested parameter is missing a type" time="0.00010269">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if an array item is missing a type" time="0.000098672">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with no properties" time="0.00013533">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with an empty properties object" time="0.000166498">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if only url is provided" time="0.000208956">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if only httpUrl is provided" time="0.000165967">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if both url and httpUrl are provided" time="0.000179271">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return false if neither url nor httpUrl is provided" time="0.000219776">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return false for an empty config object" time="0.000191314">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-09-25T23:26:49.374Z" hostname="uby" tests="33" failures="0" errors="0" skipped="0" time="0.045514761">
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should return a valid name for a simple function" time="0.001225397">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should replace invalid characters with underscores" time="0.000140299">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should truncate long names" time="0.000091048">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names with only invalid characters" time="0.000073125">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are exactly 63 characters long" time="0.000094925">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are exactly 64 characters long" time="0.000056986">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are longer than 64 characters" time="0.000057897">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly" time="0.033532745">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.000211021">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.001974142">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.000313179">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.001067294">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should return a structured error if MCP tool reports an error" time="0.000487782">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should return a structured error if MCP tool reports an error" time="0.000166368">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should consider a ToolResult with isError ${description} to be a success" time="0.000277293">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should consider a ToolResult with isError ${description} to be a success" time="0.000137875">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a simple text response correctly" time="0.000354406">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an AudioBlock response" time="0.000325492">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a ResourceLinkBlock response" time="0.000281441">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an embedded text ResourceBlock response" time="0.000284206">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an embedded binary ResourceBlock response" time="0.000274217">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a mix of content block types" time="0.000257516">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should ignore unknown content block types" time="0.00023228">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a complex mix of content block types" time="0.00026505">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.000202675">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.000089927">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.000081501">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.00036771">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.000237299">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.000184161">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should handle Cancel confirmation outcome" time="0.000197044">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should handle ProceedOnce confirmation outcome" time="0.000196313">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; DiscoveredMCPToolInvocation &gt; should return the stringified params from getDescription" time="0.000153644">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-09-25T23:26:49.375Z" hostname="uby" tests="29" failures="0" errors="0" skipped="0" time="0.054623262">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.001474067">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.000289776">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.000894515">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.001852528">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.000366167">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.000272384">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.000186586">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.000197836">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.000194149">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.0064273">
            <system-err>
[MemoryTool] Error adding memory entry to /mock/home/.qwen/QWEN.md: Error: Disk full
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/tools/memoryTool.test.ts:185:49
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.000577889">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success for global scope" time="0.031166057">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success for project scope" time="0.000480148">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.000343636">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.000655643">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot; in global: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return error when executing without scope parameter" time="0.000323087">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return confirmation details when memory file is not allowlisted for global scope" time="0.002099404">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return confirmation details when memory file is not allowlisted for project scope" time="0.000552091">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return false when memory file is already allowlisted for global scope" time="0.000208485">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return false when memory file is already allowlisted for project scope" time="0.000161248">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should add memory file to allowlist when ProceedAlways is confirmed for global scope" time="0.000365816">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should add memory file to allowlist when ProceedAlways is confirmed for project scope" time="0.000310815">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should not add memory file to allowlist when other outcomes are confirmed" time="0.000314602">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should handle existing memory file with content for global scope" time="0.000519642">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should prompt for scope selection when scope is not specified" time="0.001359455">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should show correct file paths in scope selection prompt" time="0.000575325">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; getDescription &gt; should return correct description for global scope" time="0.000261824">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; getDescription &gt; should return correct description for project scope" time="0.000148765">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; getDescription &gt; should show choice prompt when scope is not specified" time="0.000152903">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-09-25T23:26:49.376Z" hostname="uby" tests="11" failures="0" errors="0" skipped="0" time="0.041732724">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.017958252">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.002114522">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.001552462">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.002707088">
            <system-err>
Error deleting temp diff file: /tmp/qwen-code-tool-modify-diffs/qwen-code-modify-test-old-1758842804217.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.003579723">
            <system-err>
Error deleting temp diff file: /tmp/qwen-code-tool-modify-diffs/qwen-code-modify-test-new-1758842804221.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.00263269">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.002985613">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.003160797">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.003082503">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.000312699">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.000094865">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-09-25T23:26:49.376Z" hostname="uby" tests="25" failures="0" errors="0" skipped="0" time="0.185168999">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should return an invocation for valid params (absolute path within root)" time="0.055419625">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if file path is relative" time="0.003292151">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if path is outside root" time="0.002960406">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if path is empty" time="0.001981376">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if offset is negative" time="0.00287595">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if limit is zero or negative" time="0.002317387">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return relative path without limit/offset" time="0.003999609">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return shortened path when file path is deep" time="0.002703852">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should handle non-normalized file paths correctly" time="0.00322695">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.002547072">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if file does not exist" time="0.004002865">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.006347163">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if path is a directory" time="0.004084867">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error for a file that is too large" time="0.053216449">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle text file with lines exceeding maximum length" time="0.00395151">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle image file and return appropriate content" time="0.004312398">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle PDF file and return appropriate content" time="0.003265751">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle binary file and skip content" time="0.003584892">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle SVG file as text" time="0.002179633">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle large SVG file" time="0.003167199">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle empty file" time="0.002711226">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should support offset and limit for text files" time="0.002509994">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .qwenignore &gt; should throw error if path is ignored by a .qwenignore pattern" time="0.002443791">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .qwenignore &gt; should throw error if file is in an ignored directory" time="0.002014848">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .qwenignore &gt; should allow reading non-ignored files" time="0.003672494">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-09-25T23:26:49.377Z" hostname="uby" tests="31" failures="0" errors="0" skipped="0" time="0.28488395">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid relative paths within root" time="0.025067004">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid glob patterns within root" time="0.003911776">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for paths trying to escape the root (e.g., ../) as execute handles this" time="0.003063567">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for absolute paths as execute handles this" time="0.002481961">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if paths array is empty" time="0.003901708">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid exclude and include patterns" time="0.003730442">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if paths array contains an empty string" time="0.004672634">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should coerce non-string elements in include array" time="0.000763032">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if exclude array contains non-string elements" time="0.004901799">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.023312608">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.008160988">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.008875389">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.006570285">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle nonexistent specific files gracefully" time="0.004094274">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.005687912">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.007832821">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.007752942">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.008109031">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.008879648">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.006543345">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.006685909">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .qwenignore pattern" time="0.005179602">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files from multiple workspace directories" time="0.005631959">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should add a warning for truncated files" time="0.012585753">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files with special characters like [] and () in the path" time="0.009161719">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files with special characters in the name" time="0.006546591">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Error handling &gt; should return an INVALID_TOOL_PARAMS error if no paths are provided" time="0.003093833">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Error handling &gt; should return a READ_MANY_FILES_SEARCH_ERROR on glob failure" time="0.002519701">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should process files in parallel" time="0.01778898">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should handle batch processing errors gracefully" time="0.007036547">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should execute file operations concurrently" time="0.058312968">
            <system-out>
Execution order: [
  [32m&apos;start:file1.txt&apos;[39m,
  [32m&apos;start:file2.txt&apos;[39m,
  [32m&apos;start:file3.txt&apos;[39m,
  [32m&apos;end:file1.txt&apos;[39m,
  [32m&apos;end:file2.txt&apos;[39m,
  [32m&apos;end:file3.txt&apos;[39m
]

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/ripGrep.test.ts" timestamp="2025-09-25T23:26:49.378Z" hostname="uby" tests="36" failures="0" errors="0" skipped="0" time="0.357132848">
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.035748634">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.00481641">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.004191865">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.002706346">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for what would be an invalid regex pattern" time="0.004557441">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.004680949">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.003716626">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.007835115">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches in a specific path" time="0.011590212">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches with an include glob" time="0.006868507">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.010677934">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.008880098">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should return an error from ripgrep for invalid regex pattern" time="0.011055853">
            <system-err>
GrepLogic: ripgrep failed: ripgrep exited with code 2: 

Error during GrepLogic execution: Error: ripgrep exited with code 2: 

            </system-err>
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.014006772">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.009050854">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should throw an error if params are invalid" time="0.004211571">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; multi-directory workspace &gt; should search across all workspace directories when no path is specified" time="0.029721945">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; multi-directory workspace &gt; should search only specified path within workspace directories" time="0.00656758">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; abort signal handling &gt; should handle AbortSignal during search" time="0.005901057">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; abort signal handling &gt; should abort streaming search when signal is triggered" time="0.011638191">
            <system-err>
GrepLogic: ripgrep failed: ripgrep exited with code null: 

Error during GrepLogic execution: Error: ripgrep exited with code null: 

            </system-err>
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle workspace boundary violations" time="0.00492477">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle empty directories gracefully" time="0.010752451">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle empty files correctly" time="0.01488119">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle special characters in file names" time="0.011499715">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle deeply nested directories" time="0.023982848">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle complex regex patterns" time="0.024656705">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle case sensitivity correctly in JS fallback" time="0.011914692">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle escaped regex special characters" time="0.010628903">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; include pattern filtering &gt; should handle multiple file extensions in include pattern" time="0.009171067">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; include pattern filtering &gt; should handle directory patterns in include" time="0.007428442">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.004783009">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.003111576">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.006022652">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should indicate searching across all workspace directories when no path specified" time="0.004098281">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.003735962">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.004337785">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-09-25T23:26:49.379Z" hostname="uby" tests="37" failures="0" errors="0" skipped="0" time="0.101171716">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; isCommandAllowed &gt; should allow a command if no restrictions are provided" time="0.002561369">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; isCommandAllowed &gt; should block a command with command substitution using $()" time="0.000820117">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should return an invocation for a valid command" time="0.022362861">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should throw an error for an empty command" time="0.002838161">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should throw an error for a non-existent directory" time="0.003074849">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should include background indicator in description when is_background is true" time="0.00274078">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should not include background indicator in description when is_background is false" time="0.002251946">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should wrap command on linux and parse pgrep output" time="0.003345539">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should add ampersand to command when is_background is true and command does not end with &amp;" time="0.001814948">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should not add extra ampersand when is_background is true and command already ends with &amp;" time="0.001430206">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should not add ampersand when is_background is false" time="0.001267044">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should not wrap command on windows" time="0.001917777">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should format error messages correctly" time="0.001419356">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should return a SHELL_EXECUTE_ERROR for a command failure" time="0.001246216">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should throw an error for invalid parameters" time="0.001341843">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should throw an error for invalid directory" time="0.004120713">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should summarize output when configured" time="0.002724019">
            <system-err>
missing pgrep output

            </system-err>
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should clean up the temp file on synchronous execution error" time="0.002085177">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; Streaming to `updateOutput` &gt; should throttle text output updates" time="0.004565436">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; Streaming to `updateOutput` &gt; should immediately show binary detection message and throttle progress" time="0.003223232">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should add co-author to git commit with double quotes" time="0.003317617">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should add co-author to git commit with single quotes" time="0.002882242">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should handle git commit with additional flags" time="0.002320753">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should not modify non-git commands" time="0.002450834">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should not modify git commands without -m flag" time="0.002525742">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should handle git commit with escaped quotes in message" time="0.002008306">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should not add co-author when disabled in config" time="0.001895837">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; addCoAuthorToGitCommit &gt; should use custom name and email from config" time="0.001752843">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should not request confirmation for read-only commands" time="0.002227601">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should request confirmation for a new command and whitelist it on &quot;Always&quot;" time="0.002112107">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should throw an error if validation fails" time="0.00154051">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; getDescription &gt; should return the windows description when on windows" time="0.001010089">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; getDescription &gt; should return the non-windows description when not on windows" time="0.000434223">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="validateToolParams &gt; should return null for valid directory" time="0.001241046">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="validateToolParams &gt; should return error for directory outside workspace" time="0.001300055">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="build &gt; should return an invocation for valid directory" time="0.001494084">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="build &gt; should throw an error for directory outside workspace" time="0.001197655">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/task.test.ts" timestamp="2025-09-25T23:26:49.381Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.01541114">
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should initialize with correct name and properties" time="0.002762701">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should load available subagents during initialization" time="0.000551069">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should update description with available subagents" time="0.00036232">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should handle empty subagents list gracefully" time="0.000251185">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; initialization &gt; should handle subagent loading errors gracefully" time="0.002040725">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; schema generation &gt; should generate schema with subagent names as enum" time="0.000705465">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; schema generation &gt; should generate schema without enum when no subagents available" time="0.000424235">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should validate valid parameters" time="0.000321084">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should reject empty description" time="0.000271102">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should reject empty prompt" time="0.000290548">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should reject empty subagent_type" time="0.0002758">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; validateToolParams &gt; should reject non-existent subagent" time="0.000241366">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; refreshSubagents &gt; should refresh available subagents and update description" time="0.00027589">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should execute subagent successfully" time="0.001445925">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should handle subagent not found error" time="0.000401773">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should handle execution errors gracefully" time="0.001144407">
            <system-err>
[TaskTool] Error running subagent: Creation failed

            </system-err>
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should execute subagent without live output callback" time="0.000585153">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should set context variables correctly" time="0.000343465">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should return structured display object" time="0.000609467">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should not require confirmation" time="0.000456434">
        </testcase>
        <testcase classname="src/tools/task.test.ts" name="TaskTool &gt; TaskToolInvocation &gt; should provide correct description" time="0.000441336">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/todoWrite.test.ts" timestamp="2025-09-25T23:26:49.381Z" hostname="uby" tests="17" failures="0" errors="0" skipped="0" time="0.019106937">
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should validate correct parameters" time="0.003599008">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should accept empty todos array" time="0.000771557">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should accept single todo" time="0.00034029">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should reject todos with empty content" time="0.000397906">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should reject todos with empty id" time="0.000256925">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should reject todos with invalid status" time="0.000249332">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; validateToolParams &gt; should reject todos with duplicate IDs" time="0.000190623">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; execute &gt; should create new todos file when none exists" time="0.003418284">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; execute &gt; should replace todos with new ones" time="0.000991945">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; execute &gt; should handle file write errors" time="0.001482803">
            <system-err>
[TodoWriteTool] Error executing todo_write: Write failed

            </system-err>
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; execute &gt; should handle empty todos array" time="0.000575175">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; tool properties &gt; should have correct tool name" time="0.00075708">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; tool properties &gt; should have correct display name" time="0.000293553">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; tool properties &gt; should have correct kind" time="0.000240975">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; tool properties &gt; should have schema with required properties" time="0.000805521">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; getDescription &gt; should return &quot;Create todos&quot; when no todos file exists" time="0.000414297">
        </testcase>
        <testcase classname="src/tools/todoWrite.test.ts" name="TodoWriteTool &gt; getDescription &gt; should return &quot;Update todos&quot; when todos file exists" time="0.002834644">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-09-25T23:26:49.382Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.087182947">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.038408645">
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at InstallationManager.readInstallationIdFromFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:21:50[90m)[39m
    at InstallationManager.getInstallationId [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:42:33[90m)[39m
    at QwenLogger.generateUserId [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:123:53[90m)[39m
    at new QwenLogger [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:114:24[90m)[39m
    at QwenLogger.getInstance [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:131:29[90m)[39m
    at logCliConfiguration [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/loggers.ts:85:14[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:452:5[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/tools/tool-registry.test.ts:120:14
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllTools &gt; should return all registered tools sorted alphabetically by displayName" time="0.003209467">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllToolNames &gt; should return all registered tool names" time="0.001966989">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.001669569">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name, sorted by name" time="0.002865842">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should will preserve tool parametersJsonSchema during discovery from command" time="0.002883224">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should return a DISCOVERED_TOOL_EXECUTION_ERROR on tool failure" time="0.029418583">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.002438891">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; DiscoveredToolInvocation &gt; should return the stringified params from getDescription" time="0.002580915">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tools.test.ts" timestamp="2025-09-25T23:26:49.382Z" hostname="uby" tests="11" failures="0" errors="0" skipped="0" time="0.007414516">
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return INVALID_TOOL_PARAMS error if build fails" time="0.004060011">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return EXECUTION_FAILED error if execute fails" time="0.000794831">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return the result of execute on success" time="0.000304934">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a simple direct cycle" time="0.000493333">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle from object properties referencing parent properties" time="0.000117317">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle from array items referencing parent properties" time="0.000090577">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle between sibling properties" time="0.000066052">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should not detect a cycle in a valid schema" time="0.000068537">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should handle non-cyclic sibling refs" time="0.000068948">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should handle nested but not cyclic refs" time="0.00004856">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should return false for an empty schema" time="0.000032029">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-09-25T23:26:49.383Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.069829353">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should throw validation error when url parameter is missing" time="0.03709748">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should return WEB_FETCH_FALLBACK_FAILED on fetch failure" time="0.008729249">
            <system-out>
[WebFetchTool] Private IP detected for https://private.ip, using direct fetch
[WebFetchTool] Fetching content from: https://private.ip

            </system-out>
            <system-err>
[WebFetchTool] Error during fetch for https://private.ip: fetch failed Error: fetch failed
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/tools/web-fetch.test.ts:55:9
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should return WEB_FETCH_FALLBACK_FAILED on API processing failure" time="0.011339338">
            <system-out>
[WebFetchTool] Public URL detected for https://public.ip, using direct fetch
[WebFetchTool] Fetching content from: https://public.ip

[WebFetchTool] Successfully fetched content from https://public.ip

[WebFetchTool] Converted HTML to text (12 characters)
[WebFetchTool] Processing content with prompt: &quot;summarize this&quot;

            </system-out>
            <system-err>
[WebFetchTool] Error during fetch for https://public.ip: API error Error: API error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/tools/web-fetch.test.ts:70:45
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.002958593">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return github urls as-is in confirmation details" time="0.001845885">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.003373881">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.002899374">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-search.test.ts" timestamp="2025-09-25T23:26:49.383Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.063076239">
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should return an invocation for a valid query" time="0.033285087">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should throw an error for an empty query" time="0.004096589">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should throw an error for a query with only whitespace" time="0.003575394">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; getDescription &gt; should return a description of the search" time="0.003583049">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should return search results for a successful query" time="0.003115213">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should handle no search results found" time="0.002305475">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should handle API errors gracefully" time="0.007842058">
            <system-err>
Error during web search for query &quot;error query&quot;: API Failure Error: API Failure
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/tools/web-search.test.ts:123:39
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should correctly format results with sources" time="0.00370825">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-09-25T23:26:49.383Z" hostname="uby" tests="25" failures="0" errors="0" skipped="0" time="0.083646635">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should return an invocation for a valid absolute path within root" time="0.02228135">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error for a relative path" time="0.002745329">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error for a path outside root" time="0.0017084">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error if path is a directory" time="0.0016162">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should coerce null content into an empty string" time="0.000397856">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw error if the file_path is empty" time="0.00123805">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should return proposed content unchanged for a new file" time="0.001229254">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should return proposed content unchanged for an existing file" time="0.004878856">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.002429054">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.003056294">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file" time="0.003816811">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file" time="0.002341703">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.002584651">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file and return diff" time="0.003973631">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file and return diff" time="0.00387028">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.002447547">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.002172459">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.002782247">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.002392175">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.001757822">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.001626038">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return PERMISSION_DENIED error when write fails with EACCES" time="0.002453579">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return NO_SPACE_LEFT error when write fails with ENOSPC" time="0.003208165">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return TARGET_IS_DIRECTORY error when write fails with EISDIR" time="0.002665922">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return FILE_WRITE_FAILURE for generic write errors" time="0.002152762">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-09-25T23:26:49.384Z" hostname="uby" tests="11" failures="0" errors="0" skipped="0" time="0.052741501">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.005066022">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a nested directory" time="0.002891069">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find multiple files with the same name" time="0.003361188">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should return an empty array if no file is found" time="0.002119801">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore directories specified in ignoreDirs" time="0.005655843">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect the maxDirs limit and not find the file" time="0.004444482">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect the maxDirs limit and find the file" time="0.00175163">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should ignore gitignored files" time="0.004160266">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should ignore geminiignored files" time="0.002456795">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should not ignore files if respect flags are false" time="0.001818263">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find all files in a complex directory structure" time="0.017334038">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-09-25T23:26:49.385Z" hostname="uby" tests="108" failures="0" errors="0" skipped="0" time="0.037554275">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if first command &quot;code&quot; exists on non-windows" time="0.003125392">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if none of the commands exist on non-windows" time="0.000349717">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if first command &quot;code.cmd&quot; exists on windows" time="0.000366398">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if none of the commands exist on windows" time="0.00019461">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if first command &quot;codium&quot; exists on non-windows" time="0.000211441">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if none of the commands exist on non-windows" time="0.000126994">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if first command &quot;codium.cmd&quot; exists on windows" time="0.000143715">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if none of the commands exist on windows" time="0.000101818">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if first command &quot;windsurf&quot; exists on non-windows" time="0.000144497">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if none of the commands exist on non-windows" time="0.000101989">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if first command &quot;windsurf&quot; exists on windows" time="0.000180504">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if none of the commands exist on windows" time="0.00007569">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if first command &quot;cursor&quot; exists on non-windows" time="0.000077263">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if none of the commands exist on non-windows" time="0.0000487">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if first command &quot;cursor&quot; exists on windows" time="0.000055973">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if none of the commands exist on windows" time="0.000043781">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if first command &quot;vim&quot; exists on non-windows" time="0.000097851">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if none of the commands exist on non-windows" time="0.000077172">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if first command &quot;vim&quot; exists on windows" time="0.000110976">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if none of the commands exist on windows" time="0.000077002">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if first command &quot;nvim&quot; exists on non-windows" time="0.000120122">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if none of the commands exist on non-windows" time="0.000082673">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if first command &quot;nvim&quot; exists on windows" time="0.000098322">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if none of the commands exist on windows" time="0.000078676">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command &quot;zed&quot; exists on non-windows" time="0.000101367">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command doesn&apos;t exist but second command &quot;zeditor&quot; exists on non-windows" time="0.000213525">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if none of the commands exist on non-windows" time="0.000088012">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command &quot;zed&quot; exists on windows" time="0.000096268">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if none of the commands exist on windows" time="0.000048009">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return true if first command &quot;emacs&quot; exists on non-windows" time="0.000083785">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return false if none of the commands exist on non-windows" time="0.000054381">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return true if first command &quot;emacs.exe&quot; exists on windows" time="0.00005394">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return false if none of the commands exist on windows" time="0.000064529">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;code&quot; when it exists on non-windows" time="0.000322737">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;code&quot; when none exist on non-windows" time="0.000133337">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;code.cmd&quot; when it exists on windows" time="0.000106868">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;code.cmd&quot; when none exist on windows" time="0.001053549">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;codium&quot; when it exists on non-windows" time="0.000202675">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;codium&quot; when none exist on non-windows" time="0.000126204">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;codium.cmd&quot; when it exists on windows" time="0.000083865">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;codium.cmd&quot; when none exist on windows" time="0.000066233">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;windsurf&quot; when it exists on non-windows" time="0.000066513">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;windsurf&quot; when none exist on non-windows" time="0.000062395">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;windsurf&quot; when it exists on windows" time="0.000063718">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;windsurf&quot; when none exist on windows" time="0.000061033">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;cursor&quot; when it exists on non-windows" time="0.000062335">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;cursor&quot; when none exist on non-windows" time="0.000052247">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;cursor&quot; when it exists on windows" time="0.000047047">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;cursor&quot; when none exist on windows" time="0.000034564">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;zed&quot; when it exists on non-windows" time="0.000121745">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use second command &quot;zeditor&quot; when first doesn&apos;t exist on non-windows" time="0.000255412">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;zeditor&quot; when none exist on non-windows" time="0.000114782">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;zed&quot; when it exists on windows" time="0.000069579">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;zed&quot; when none exist on windows" time="0.000125222">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.00017313">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.00009742">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for emacs" time="0.000402084">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.0002212">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.001818284">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.001440425">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.000402635">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.000361198">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.000251234">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.003079127">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.000590322">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.000657326">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.000256114">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.000318379">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.000222812">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.000795912">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.000389381">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.000246556">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.000208035">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.000389491">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.000346411">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.000117577">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.000080479">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for emacs on non-windows" time="0.000117387">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for emacs on windows" time="0.000092892">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.000318399">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for execSync editors" time="0.000178621">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for execSync editors when an error is thrown" time="0.007674278">
            <system-err>
Error in onEditorClose callback: Error: test error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/editor.test.ts:437:17
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at Module.openDiff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/editor.ts:211:11[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/editor.test.ts:440:9
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should not call onEditorClose for spawn editors" time="0.000630577">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.000375304">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.000152492">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow emacs in sandbox mode" time="0.000207634">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow emacs when not in sandbox mode" time="0.000207033">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.000146501">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.000107208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.00010281">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.000083434">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.00007041">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.000060963">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.00005973">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.000060953">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.000060131">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.000055513">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.000038591">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.00008077">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.000160497">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000087261">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.000077964">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.000130612">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.00015674">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.000143635">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.000212383">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for emacs when installed and in sandbox mode" time="0.000164995">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.00010796">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/environmentContext.test.ts" timestamp="2025-09-25T23:26:49.388Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.031521554">
        <testcase classname="src/utils/environmentContext.test.ts" name="getDirectoryContextString &gt; should return context string for a single directory" time="0.002258959">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getDirectoryContextString &gt; should return context string for multiple directories" time="0.000404027">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should return basic environment context for a single directory" time="0.017097511">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should return basic environment context for multiple directories" time="0.001062906">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should include full file context when getFullContext is true" time="0.001226529">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle read_many_files returning no content" time="0.001608585">
            <system-err>
Full context requested, but read_many_files returned no content.

            </system-err>
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle read_many_files tool not being found" time="0.001506296">
            <system-err>
Full context requested, but read_many_files tool not found.

            </system-err>
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle errors when reading full file context" time="0.004920873">
            <system-err>
Error reading full file context: Error: Read error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/environmentContext.test.ts:205:44
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorParsing.test.ts" timestamp="2025-09-25T23:26:49.388Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.00394073">
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a valid API error JSON" time="0.00097321">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the default message" time="0.000253529">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the personal message" time="0.000170756">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the vertex message" time="0.000066112">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should return the original message if it is not a JSON error" time="0.00004331">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should return the original message for malformed JSON" time="0.000042459">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle JSON that does not match the ApiError structure" time="0.000040104">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a nested API error" time="0.000165797">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a StructuredError" time="0.000075891">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 StructuredError with the vertex message" time="0.000057807">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle an unknown error type" time="0.000033933">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Free tier)" time="0.000158213">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a regular 429 API error with standard message for Google auth" time="0.000155097">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with generic quota exceeded message for Google auth" time="0.000082673">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should prioritize Pro quota message over generic quota message for Google auth" time="0.000080809">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Standard tier)" time="0.000087813">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Legacy tier)" time="0.000071512">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle different Gemini 2.5 version strings in Pro quota exceeded errors" time="0.000074188">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should not match non-Pro models with similar version strings" time="0.000077955">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a generic quota exceeded message for Google auth (Standard tier)" time="0.000079367">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a regular 429 API error with standard message for Google auth (Standard tier)" time="0.000063768">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-09-25T23:26:49.389Z" hostname="uby" tests="6" failures="0" errors="0" skipped="0" time="0.025437439">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.005475319">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.001186174">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.002152492">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.007947813">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.005369884">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.001539398">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-09-25T23:26:49.389Z" hostname="uby" tests="40" failures="0" errors="0" skipped="0" time="0.055161758">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.002317638">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.000434855">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.00036226">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.000277293">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.000274909">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.000234143">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.000328538">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.001647047">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.00077841">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.00062209">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.000674037">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.00121103">
            <system-err>
Failed to check if file is binary: /tmp/fileUtils-test-knvBJ3/binaryCheck.tmp ENOENT: no such file or directory, open &apos;/tmp/fileUtils-test-knvBJ3/binaryCheck.tmp&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts, mts, cts, tsx)" time="0.001196474">
            <system-err>
Failed to check if file is binary: component.tsx ENOENT: no such file or directory, open &apos;component.tsx&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.000398908">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.000399729">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect svg type by extension" time="0.000432891">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.000786966">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.000696438">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.000443962">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.000509042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.00039468">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.004711666">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.001012683">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.001770235">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.000618524">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.001209798">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.000754326">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.000871733">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.00072957">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read an SVG file as text when under 1MB" time="0.000687212">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.000562861">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.000435686">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.001505295">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should identify truncation when reading the end of a file" time="0.000812573">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.00084891">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.000987246">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate when line count exceeds the limit" time="0.000673817">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate when a line length exceeds the character limit" time="0.000903141">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate both line count and line length when both exceed limits" time="0.00092398">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.018797626">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.ts" timestamp="2025-09-25T23:26:49.391Z" hostname="uby" tests="4" failures="0" errors="0" skipped="0" time="0.197741507">
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.035741661">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842804147.bak

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at InstallationManager.readInstallationIdFromFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:21:50[90m)[39m
    at InstallationManager.getInstallationId [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/installationManager.ts:42:33[90m)[39m
    at QwenLogger.generateUserId [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:123:53[90m)[39m
    at new QwenLogger [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:114:24[90m)[39m
    at QwenLogger.getInstance [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/qwen-logger/qwen-logger.ts:131:29[90m)[39m
    at logCliConfiguration [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/telemetry/loggers.ts:85:14[90m)[39m
    at new Config [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/config/config.ts:452:5[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/flashFallback.integration.test.ts:33:14
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.008196053">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842804149.bak

            </system-out>
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/flashFallback.integration.test.ts:69:30
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.151609224">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842804158.bak

            </system-out>
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/flashFallback.integration.test.ts:109:51
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/flashFallback.integration.test.ts:109:51
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/flashFallback.integration.test.ts:109:51
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/flashFallback.integration.test.ts:109:51
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.001011321">
            <system-out>
Invalid JSON in log file /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json. Backing up and starting fresh. SyntaxError: &quot;undefined&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at Logger._readLogFile [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:91:31[90m)[39m
    at Logger.initialize [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/core/logger.ts:155:19[90m)[39m

Backed up corrupted log file to /home/atmandk/.qwen/tmp/b306d9ff847c120dd7eb00fcebe5f118b9875b09db67ad8f0834aea7a0d8cb8c/logs.json.invalid_json.1758842804309.bak

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-09-25T23:26:49.391Z" hostname="uby" tests="29" failures="0" errors="0" skipped="0" time="0.011977227">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.001200981">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.000283074">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.00328143">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.000210789">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.000094475">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.000207805">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.000093413">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.000232981">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.000958353">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.000225658">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.000138126">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.00014617">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.000120593">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.000158423">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.000117317">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.00013521">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.000076231">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.000174973">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.000363883">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.000257417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.000091018">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.000528908">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.000148875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.000081792">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.000051786">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.000078916">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.000104764">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.0000593">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.00007038">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-09-25T23:26:49.392Z" hostname="uby" tests="15" failures="0" errors="0" skipped="0" time="0.039548664">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.006472785">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.000734529">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.002585153">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.001095617">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.00083778">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.001869178">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.002571708">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.003164234">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.00287002">
            <system-err>
Warning: Could not read directory /tmp/folder-structure-test-4PfQSu/non-existent: ENOENT: no such file or directory, scandir &apos;/tmp/folder-structure-test-4PfQSu/non-existent&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.001570496">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.001794349">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with gitignore &gt; should ignore files and folders specified in .gitignore" time="0.004253258">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.001742563">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with geminiignore &gt; should ignore geminiignore files by default" time="0.003261284">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with geminiignore &gt; should not ignore files if respectGeminiIgnore is false" time="0.002844352">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-09-25T23:26:49.393Z" hostname="uby" tests="18" failures="0" errors="0" skipped="0" time="0.028236016">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.004809418">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.00521624">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.004572058">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.000845384">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .qwenignore exists" time="0.000402344">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.001279587">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.00122709">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.000797816">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.000636428">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.000790853">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.000587707">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.000515303">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.000699043">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.000731062">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle root path &quot;/&quot; without throwing error" time="0.001001142">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute-like paths without throwing error" time="0.000704573">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths that start with forward slash" time="0.000746621">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.000617141">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/ignorePatterns.test.ts" timestamp="2025-09-25T23:26:49.393Z" hostname="uby" tests="28" failures="0" errors="0" skipped="0" time="0.011124">
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getCoreIgnorePatterns &gt; should return basic ignore patterns" time="0.001974072">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should return comprehensive patterns by default" time="0.00067">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should respect includeDefaults option" time="0.000216501">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should include custom patterns" time="0.000099224">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should include runtime patterns" time="0.000076531">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should respect includeDynamicPatterns option" time="0.00010292">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getReadManyFilesExcludes &gt; should provide legacy compatibility" time="0.000143706">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getGlobExcludes &gt; should return core patterns for glob operations" time="0.000276001">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getGlobExcludes &gt; should include additional excludes" time="0.000165846">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should use config custom excludes when available" time="0.000635927">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should handle config without getCustomExcludes method" time="0.001894124">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should include config custom excludes in glob patterns" time="0.00035687">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; buildExcludePatterns &gt; should be an alias for getDefaultExcludePatterns" time="0.00087058">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include common binary file extensions" time="0.000203557">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include additional binary extensions" time="0.000121074">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include media file extensions" time="0.000133727">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should be sorted" time="0.000126944">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should not contain invalid extensions from brace patterns" time="0.000132405">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should extract simple extensions" time="0.000137795">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle brace expansion patterns" time="0.000261003">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should combine simple and brace expansion patterns" time="0.000193699">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle empty brace expansion" time="0.000105184">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should ignore invalid patterns" time="0.000082873">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should remove duplicates and sort results" time="0.000271242">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle complex brace patterns with multiple extensions" time="0.000122507">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle compound extensions correctly using path.extname" time="0.000080319">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle dotfiles correctly" time="0.00008117">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle edge cases with path.extname" time="0.000069348">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/installationManager.test.ts" timestamp="2025-09-25T23:26:49.394Z" hostname="uby" tests="4" failures="0" errors="0" skipped="0" time="0.0058595">
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should create and write a new installation ID if one does not exist" time="0.002938095">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should read an existing installation ID from a file" time="0.00046984">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should return the same ID on subsequent calls" time="0.000552001">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should handle read errors and return a fallback ID" time="0.000712858">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-09-25T23:26:49.394Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.076766186">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.005840655">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.017628522">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.004771046">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.002723298">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.002912067">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.002177949">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.002422802">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.004326855">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.004650644">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect the maxDirs parameter during downward scan" time="0.013441116">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.002365306">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load memory from included directories" time="0.003620448">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should handle multiple directories and files in parallel correctly" time="0.004627431">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should preserve order and prevent duplicates when processing multiple directories" time="0.003617292">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-09-25T23:26:49.395Z" hostname="uby" tests="23" failures="0" errors="0" skipped="0" time="0.034199488">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.014557611">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should import non-md files just like md files" time="0.001450744">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.000790342">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.000888534">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.00079424">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.000789441">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.001714602">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.001657907">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should ignore imports inside code blocks" time="0.001660152">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should ignore imports inside inline code" time="0.000961639">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested tokens and non-unique content correctly" time="0.000483274">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should allow imports from parent and subdirectories within project root" time="0.000483564">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should reject imports outside project root" time="0.000273957">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should build import tree structure" time="0.001736883">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should produce flat output in Claude-style with unique files in order" time="0.001266283">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should not duplicate files in flat output if imported multiple times" time="0.000537525">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports in flat output" time="0.000455663">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.000244823">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.000269909">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000277303">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.000369253">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.00033504">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.000504143">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-09-25T23:26:49.396Z" hostname="uby" tests="10" failures="0" errors="0" skipped="0" time="0.038707708">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.006197485">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.003034354">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.003519291">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.003254922">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.002768862">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.003583369">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.005872895">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.002928578">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.003312959">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should call generateJson with DEFAULT_QWEN_FLASH_MODEL" time="0.002837018">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/partUtils.test.ts" timestamp="2025-09-25T23:26:49.396Z" hostname="uby" tests="37" failures="0" errors="0" skipped="0" time="0.006595401">
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return empty string for undefined or null" time="0.001254952">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return string input unchanged" time="0.000116065">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should concatenate strings from an array" time="0.00006513">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return text property when provided a text part" time="0.000053039">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return empty string for non-text parts" time="0.000065972">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return empty string for undefined or null" time="0.000128859">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return string input unchanged" time="0.000050824">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should join parts if the value is an array" time="0.0000538">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return the text property if the part is an object with text" time="0.000046847">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for videoMetadata part" time="0.000040264">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for thought part" time="0.000042949">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for codeExecutionResult part" time="0.000045084">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for executableCode part" time="0.000037991">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for fileData part" time="0.000038721">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for functionCall part" time="0.000038321">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for functionResponse part" time="0.00009195">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for inlineData part" time="0.000107459">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return an empty string for an unknown part type" time="0.000060091">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should handle complex nested arrays with various part types" time="0.00005966">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null when no candidates exist" time="0.000143956">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return concatenated text from first candidate" time="0.000074217">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should ignore parts without text" time="0.00004298">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null when candidate has no parts" time="0.000032259">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null if the first candidate has no content property" time="0.000042669">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should return an empty array for empty input" time="0.000500586">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform a simple string input" time="0.000161178">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform a single text part object" time="0.000084827">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform an array of text parts and flatten the result" time="0.000099434">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should pass through non-text parts unmodified" time="0.000052818">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should handle a mix of text and non-text parts in an array" time="0.000076903">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should handle a transform that returns an empty array" time="0.000068216">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to an empty prompt" time="0.000095998">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to a prompt with a string as the last part" time="0.000733987">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to a prompt with a text part object as the last part" time="0.000129229">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append a new text part if the last part is not a text part" time="0.000065291">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should not append anything if the text to append is empty" time="0.000039212">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should use a custom separator" time="0.000033723">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/pathReader.test.ts" timestamp="2025-09-25T23:26:49.397Z" hostname="uby" tests="16" failures="0" errors="0" skipped="0" time="0.056661893">
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a text file from the CWD" time="0.007049331">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a file from a secondary workspace directory" time="0.00152941">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should prioritize CWD when file exists in both CWD and secondary dir" time="0.000955858">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read an image file and return it as inlineData (Part object)" time="0.001023324">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a generic binary file and return an info string" time="0.000634745">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a file from an absolute path if within workspace" time="0.00110293">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should expand a directory and read the content of its files" time="0.006731593">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should recursively expand a directory and read all nested files" time="0.00170235">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should handle mixed content and include files from subdirectories" time="0.003064589">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should handle an empty directory" time="0.001085498">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; File Ignoring &gt; should return an empty array for an ignored file" time="0.001478004">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; File Ignoring &gt; should not read ignored files when expanding a directory" time="0.00130803">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should throw an error for an absolute path outside the workspace" time="0.001192847">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should throw an error if a relative path is not found anywhere" time="0.000443431">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should return an error string if reading a file with no permissions" time="0.001680219">
            <system-err>
Failed to check if file is binary: /test/cwd/unreadable.txt EACCES, permission denied &apos;/test/cwd/unreadable.txt&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should return an error string for files exceeding the size limit" time="0.024247787">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/paths.test.ts" timestamp="2025-09-25T23:26:49.398Z" hostname="uby" tests="55" failures="0" errors="0" skipped="0" time="0.006040304">
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape spaces" time="0.00103254">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape tabs" time="0.000117377">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape parentheses" time="0.000053078">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape square brackets" time="0.000056785">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape curly braces" time="0.000067695">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape semicolons" time="0.000059741">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape ampersands" time="0.000058799">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape pipes" time="0.000082733">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape asterisks" time="0.000055733">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape question marks" time="0.000034473">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape dollar signs" time="0.000032129">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape backticks" time="0.000034554">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape single quotes" time="0.000032139">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape double quotes" time="0.000028783">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape hash symbols" time="0.000039863">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape exclamation marks" time="0.000063388">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape tildes" time="0.000049031">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape less than and greater than signs" time="0.000045324">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle multiple special characters" time="0.000069098">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should not double-escape already escaped characters" time="0.000076842">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle escaped backslashes correctly" time="0.000109703">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle complex escaped backslash scenarios" time="0.000085388">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle paths without special characters" time="0.000092832">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle complex real-world examples" time="0.0000919">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle empty strings" time="0.00004289">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle paths with only special characters" time="0.00004316">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape spaces" time="0.000147263">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape tabs" time="0.000045584">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape parentheses" time="0.000035746">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape square brackets" time="0.000044673">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape curly braces" time="0.000045694">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape multiple special characters" time="0.00002723">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle paths without escaped characters" time="0.000034504">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle all special characters" time="0.000029144">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should be the inverse of escapePath" time="0.000101598">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle empty strings" time="0.000031849">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should not affect backslashes not followed by special characters" time="0.000056905">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle escaped backslashes in unescaping" time="0.000076953">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return true for a direct subpath" time="0.000137454">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return true for the same path" time="0.000055001">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return false for a parent path" time="0.000051546">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return false for a completely different path" time="0.000049551">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle relative paths" time="0.000122828">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle paths with .." time="0.000067274">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle root paths" time="0.000069779">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle trailing slashes" time="0.000079447">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return true for a direct subpath on Windows" time="0.000124671">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return true for the same path on Windows" time="0.000050664">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return false for a parent path on Windows" time="0.000058217">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return false for a different drive on Windows" time="0.000050193">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should be case-insensitive for drive letters on Windows" time="0.00004881">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should be case-insensitive for path components on Windows" time="0.00005907">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle mixed slashes on Windows" time="0.000049281">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle trailing slashes on Windows" time="0.000047247">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle relative paths correctly on Windows" time="0.000139719">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/quotaErrorDetection.test.ts" timestamp="2025-09-25T23:26:49.399Z" hostname="uby" tests="27" failures="0" errors="0" skipped="0" time="0.004488273">
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect insufficient_quota error message" time="0.001369764">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect free allocated quota exceeded error message" time="0.00016757">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect quota exceeded error message" time="0.000149656">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect quota exceeded in string error" time="0.000079497">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect quota exceeded in structured error" time="0.000062986">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should detect quota exceeded in API error" time="0.000090527">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should not detect throttling errors as quota exceeded" time="0.000056304">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenQuotaExceededError &gt; should not detect unrelated errors" time="0.000043661">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect throttling error with 429 status" time="0.000141171">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect requests throttling triggered with 429 status" time="0.000054701">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect rate limit error with 429 status" time="0.000039553">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect too many requests with 429 status" time="0.000041226">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect throttling in string error" time="0.000041286">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect throttling in structured error with 429" time="0.000035777">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should detect throttling in API error with 429" time="0.000042148">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should not detect throttling without 429 status in structured error" time="0.000030597">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should not detect quota exceeded as throttling" time="0.000031348">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isQwenThrottlingError &gt; should not detect unrelated errors as throttling" time="0.00003227">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isProQuotaExceededError &gt; should detect Gemini Pro quota exceeded error" time="0.000114662">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isProQuotaExceededError &gt; should detect Gemini preview Pro quota exceeded error" time="0.00006507">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isProQuotaExceededError &gt; should not detect non-Pro quota errors" time="0.000037119">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isGenericQuotaExceededError &gt; should detect generic quota exceeded error" time="0.000069598">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; isGenericQuotaExceededError &gt; should not detect non-quota errors" time="0.000051756">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; type guards &gt; isApiError &gt; should detect valid API error" time="0.00004842">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; type guards &gt; isApiError &gt; should not detect invalid API error" time="0.000036227">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; type guards &gt; isStructuredError &gt; should detect valid structured error" time="0.000039162">
        </testcase>
        <testcase classname="src/utils/quotaErrorDetection.test.ts" name="quotaErrorDetection &gt; type guards &gt; isStructuredError &gt; should not detect invalid structured error" time="0.000044662">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-09-25T23:26:49.400Z" hostname="uby" tests="20" failures="0" errors="0" skipped="0" time="0.035044993">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.00372461">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.009665391">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:63:21
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.003390753">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:79:21
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.000668527">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.000694495">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.000567931">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.002295917">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:162:21
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.001990543">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m
    at runRetry [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:191:7[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:198:22
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:24:32
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m
    at runRetry [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:191:7[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:213:22
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.001575224">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.000639704">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.000525232">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.001506016">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.001539658">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:378:36
    at mockCall (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/spy[24m/dist/index.js:96:15)
    at spy (file:///home/atmandk/LowCal-Code/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.ts:98:20[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:389:23
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should retry for Qwen OAuth 429 errors that are throttling-related" time="0.00126995">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should throw immediately for Qwen OAuth with insufficient_quota message" time="0.00045938">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should throw immediately for Qwen OAuth with free allocated quota exceeded message" time="0.000319972">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should retry for Qwen OAuth with throttling message" time="0.000720723">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should retry for Qwen OAuth with throttling error" time="0.000582598">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should throw immediately for Qwen OAuth with quota message" time="0.000400671">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Qwen OAuth 429 error handling &gt; should retry normal errors for Qwen OAuth (not quota-related)" time="0.000917567">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Network error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:550:38
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Network error
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/retry.test.ts:550:38
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1729:8) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonParse.test.ts" timestamp="2025-09-25T23:26:49.401Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.007958843">
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; valid JSON parsing &gt; should parse valid JSON correctly" time="0.00204352">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; valid JSON parsing &gt; should parse valid JSON arrays" time="0.000206091">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; valid JSON parsing &gt; should parse valid JSON with nested objects" time="0.000384581">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; malformed JSON with jsonrepair fallback &gt; should handle malformed JSON with single quotes" time="0.001049031">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; malformed JSON with jsonrepair fallback &gt; should handle malformed JSON with unquoted keys" time="0.000373391">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; malformed JSON with jsonrepair fallback &gt; should handle malformed JSON with trailing commas" time="0.000244122">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; malformed JSON with jsonrepair fallback &gt; should handle malformed JSON with comments" time="0.000192777">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return fallback value for empty string" time="0.000101979">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return fallback value for null input" time="0.000091118">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return fallback value for undefined input" time="0.000084256">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return empty object as default fallback" time="0.000154957">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; fallback behavior &gt; should return custom fallback when parsing fails" time="0.000121044">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; type safety &gt; should preserve generic type when parsing valid JSON" time="0.000279307">
        </testcase>
        <testcase classname="src/utils/safeJsonParse.test.ts" name="safeJsonParse &gt; type safety &gt; should return fallback type when parsing fails" time="0.000174273">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonStringify.test.ts" timestamp="2025-09-25T23:26:49.402Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.004025036">
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should stringify normal objects without issues" time="0.001355869">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references by replacing them with [Circular]" time="0.000403948">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle complex circular structures like HttpsProxyAgent" time="0.000289856">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should respect the space parameter for formatting" time="0.000132184">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references with formatting" time="0.000095176">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle arrays with circular references" time="0.000096338">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle null and undefined values" time="0.000088193">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle primitive values" time="0.000112728">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/secure-browser-launcher.test.ts" timestamp="2025-09-25T23:26:49.402Z" hostname="uby" tests="14" failures="0" errors="0" skipped="0" time="0.014828783">
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should allow valid HTTP URLs" time="0.004457697">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should allow valid HTTPS URLs" time="0.000720653">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject non-HTTP(S) protocols" time="0.002196884">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject invalid URLs" time="0.000391545">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject URLs with control characters" time="0.000369563">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should prevent PowerShell command injection on Windows" time="0.000522056">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should handle URLs with special shell characters safely" time="0.001267925">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should properly escape single quotes in URLs on Windows" time="0.000320803">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use correct command on macOS" time="0.000362521">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use PowerShell on Windows" time="0.000916646">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use xdg-open on Linux" time="0.000414196">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should throw on unsupported platforms" time="0.000343064">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Error handling &gt; should handle browser launch failures gracefully" time="0.00046471">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Error handling &gt; should try fallback browsers on Linux" time="0.000554566">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/shell-utils.test.ts" timestamp="2025-09-25T23:26:49.402Z" hostname="uby" tests="51" failures="0" errors="0" skipped="0" time="0.008501607">
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a command if no restrictions are provided" time="0.001738336">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a command if it is in the global allowlist" time="0.000177538">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command if it is not in a strict global allowlist" time="0.000122086">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command if it is in the blocked list" time="0.000088984">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should prioritize the blocklist over the allowlist" time="0.000082041">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow any command when a wildcard is in coreTools" time="0.000067865">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block any command when a wildcard is in excludeTools" time="0.000068627">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command on the blocklist even with a wildcard allow" time="0.000084607">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a chained command if all parts are on the global allowlist" time="0.000101668">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a chained command if any part is blocked" time="0.000081571">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using `$(...)`" time="0.000134799">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using `&lt;(...)`" time="0.000069479">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using backticks" time="0.000062446">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should allow substitution-like patterns inside single quotes" time="0.000069709">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed success object for an allowed command" time="0.000503211">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed failure object for a blocked command" time="0.000123339">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed failure object for a command not on a strict allowlist" time="0.000094124">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a command on the sessionAllowlist" time="0.000088053">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a command not on the sessionAllowlist or global allowlist" time="0.000113219">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a command on the global allowlist even if not on the session allowlist" time="0.000073687">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a chained command if parts are on different allowlists" time="0.000058689">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a command on the sessionAllowlist if it is also globally blocked" time="0.000058498">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a chained command if one part is not on any allowlist" time="0.000071482">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should return a single command" time="0.000180344">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should handle paths and return the binary name" time="0.00010781">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should return an empty array for an empty string" time="0.000045184">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should handle a mix of operators" time="0.000054571">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should correctly parse a chained command with quotes" time="0.000046055">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip sh -c with quotes" time="0.000125843">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip bash -c with extra whitespace" time="0.000063988">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip zsh -c without quotes" time="0.000035966">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip cmd.exe /c" time="0.000029955">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should not strip anything if no wrapper is present" time="0.000033121">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; POSIX (bash) &gt; should use shell-quote for escaping" time="0.000734209">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; POSIX (bash) &gt; should handle empty strings" time="0.000136663">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should wrap simple arguments in double quotes" time="0.000089425">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should escape internal double quotes by doubling them" time="0.000073526">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should handle empty strings" time="0.000054181">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should wrap simple arguments in single quotes" time="0.000067365">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should escape internal single quotes by doubling them" time="0.000046286">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should handle double quotes without escaping them" time="0.000044673">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should handle empty strings" time="0.000039593">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; should return bash configuration on Linux" time="0.000178961">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; should return bash configuration on macOS (darwin)" time="0.000073636">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return cmd.exe configuration by default" time="0.000079998">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should respect ComSpec for cmd.exe" time="0.000071092">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return PowerShell configuration if ComSpec points to powershell.exe" time="0.000065682">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return PowerShell configuration if ComSpec points to pwsh.exe" time="0.0000594">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should be case-insensitive when checking ComSpec" time="0.000055923">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandNeedPermission &gt; returns false for read-only commands" time="0.000278966">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandNeedPermission &gt; returns true for mutating commands with reason" time="0.000110564">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/shellReadOnlyChecker.test.ts" timestamp="2025-09-25T23:26:49.404Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.003078806">
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; allows simple read-only command" time="0.001492211">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects mutating commands like rm" time="0.000183569">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects redirection output" time="0.000072254">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects command substitution" time="0.000062726">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; allows git status but rejects git commit" time="0.000155047">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects find with exec" time="0.000114512">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects sed in-place" time="0.000097911">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; rejects empty command" time="0.000038652">
        </testcase>
        <testcase classname="src/utils/shellReadOnlyChecker.test.ts" name="evaluateShellCommandReadOnly &gt; respects environment prefix followed by allowed command" time="0.000051736">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/subagentGenerator.test.ts" timestamp="2025-09-25T23:26:49.404Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.0485142">
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error for empty user description" time="0.006500616">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should successfully generate content with valid LLM response" time="0.005451856">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error when LLM response is missing required fields" time="0.004451976">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error when LLM response has empty fields" time="0.003735841">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error when generateJson throws an error" time="0.003608716">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should call generateJson with correct schema and model" time="0.008674227">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should include user description in the prompt" time="0.003976727">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error for null response from generateJson" time="0.005567951">
        </testcase>
        <testcase classname="src/utils/subagentGenerator.test.ts" name="subagentGenerator &gt; should throw error for undefined response from generateJson" time="0.004950688">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/summarizer.test.ts" timestamp="2025-09-25T23:26:49.405Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.020495576">
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is shorter than maxLength" time="0.004800671">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is empty" time="0.001781896">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should call generateContent if text is longer than maxLength" time="0.001678885">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if generateContent throws an error" time="0.002450403">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should construct the correct prompt for summarization" time="0.001288233">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should summarize tool output using summarizeToolOutput" time="0.002150749">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should handle different llmContent types" time="0.001937996">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; defaultSummarizer &gt; should stringify the llmContent" time="0.003190432">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/systemEncoding.test.ts" timestamp="2025-09-25T23:26:49.405Z" hostname="uby" tests="38" failures="0" errors="0" skipped="0" time="0.017393658">
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should map common Windows code pages correctly" time="0.001768021">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should return null for unmapped code pages and warn" time="0.001652076">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should handle all Windows-specific code pages" time="0.000417573">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should detect encoding using chardet successfully" time="0.001270861">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should handle chardet returning mixed case encoding" time="0.000264429">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet fails" time="0.00143257">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet returns null" time="0.00022699">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet returns non-string" time="0.00018926">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should parse Windows chcp output correctly" time="0.000716986">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should handle different chcp output formats" time="0.000274188">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should handle chcp output with extra whitespace" time="0.000191975">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when chcp command fails" time="0.000633562">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when chcp output cannot be parsed" time="0.000314331">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when code page is not a number" time="0.000380394">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when code page maps to null" time="0.000283775">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LC_ALL environment variable" time="0.000267856">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LC_CTYPE when LC_ALL is not set" time="0.000166608">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LANG when LC_ALL and LC_CTYPE are not set" time="0.000171938">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale charmap command when environment variables are empty" time="0.000246666">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale charmap with mixed case" time="0.000175073">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should return null when locale charmap fails" time="0.000312268">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale without encoding (no dot)" time="0.000191745">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle empty locale environment variables" time="0.000165566">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should return locale as-is when locale format has no dot" time="0.00014576">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should prioritize LC_ALL over other environment variables" time="0.000195983">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should prioritize LC_CTYPE over LANG" time="0.000196193">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should use cached system encoding on subsequent calls" time="0.00039438">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should fall back to buffer detection when system encoding fails" time="0.000356479">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should fall back to utf-8 when both system and buffer detection fail" time="0.000470591">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should not cache buffer detection results" time="0.000358994">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should handle Windows system encoding" time="0.000210449">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should cache null system encoding result" time="0.000342904">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should work correctly on macOS" time="0.00017297">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should work correctly on other Unix-like systems" time="0.000121124">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should handle unknown platforms as Unix-like" time="0.000190262">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle empty buffer gracefully" time="0.00017839">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle very large buffers" time="0.000456154">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle Unicode content" time="0.000142173">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tool-utils.test.ts" timestamp="2025-09-25T23:26:49.406Z" hostname="uby" tests="7" failures="0" errors="0" skipped="0" time="0.00197821">
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should not match a partial command prefix" time="0.000885889">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should match an exact command" time="0.000097981">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should match a command that is a prefix" time="0.000054281">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool name" time="0.000056755">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool class name" time="0.000042759">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should not match if neither name is in the patterns" time="0.000036076">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool name when passed as a string" time="0.000033462">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/userAccountManager.test.ts" timestamp="2025-09-25T23:26:49.407Z" hostname="uby" tests="23" failures="0" errors="0" skipped="0" time="0.028113128">
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should create directory and write initial account file" time="0.002960938">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should update active account and move previous to old" time="0.0050272">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should not add a duplicate to the old list" time="0.000841136">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should handle corrupted JSON by starting fresh" time="0.00250305">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should handle valid JSON with incorrect schema by starting fresh" time="0.00144914">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return the active account if file exists and is valid" time="0.00038404">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if file does not exist" time="0.000455332">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if file is empty" time="0.000378179">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null and log if file is corrupted" time="0.000493693">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if active key is missing" time="0.000457717">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should set active to null and move it to old" time="0.004827682">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should handle empty file gracefully" time="0.001236407">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should handle corrupted JSON by creating a fresh file" time="0.001339348">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should be idempotent if active account is already null" time="0.001144116">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should not add a duplicate to the old list" time="0.000666923">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file does not exist" time="0.000228643">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is empty" time="0.000217021">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is corrupted" time="0.000439403">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 1 if there is only an active account" time="0.000240164">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should correctly count old accounts when active is null" time="0.000238">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should correctly count both active and old accounts" time="0.000311346">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should handle valid JSON with incorrect schema by returning 0" time="0.000301978">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should not double count if active account is also in old list" time="0.000247448">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/workspaceContext.test.ts" timestamp="2025-09-25T23:26:49.407Z" hostname="uby" tests="34" failures="0" errors="0" skipped="0" time="0.03413009">
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should initialize with a single directory (cwd)" time="0.002503441">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should validate and resolve directories to absolute paths" time="0.000540179">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should handle empty initialization" time="0.00127598">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should add valid directories" time="0.000515183">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should resolve relative paths to absolute" time="0.000353644">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should prevent duplicate directories" time="0.000620557">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should handle symbolic links correctly" time="0.000521515">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should accept paths within workspace directories" time="0.000819867">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should accept non-existent paths within workspace directories" time="0.00067021">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should reject paths outside workspace" time="0.000399189">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should reject non-existent paths outside workspace" time="0.00031922">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle nested directories correctly" time="0.000718249">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle edge cases (root, parent references)" time="0.000450704">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle non-existent paths correctly" time="0.000328358">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept dir paths" time="0.000511586">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept non-existent paths" time="0.000465561">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept non-existent deep paths" time="0.000432811">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject dir paths" time="0.000466783">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject non-existent paths" time="0.000474127">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject non-existent deep paths" time="0.000466764">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject partially non-existent deep paths" time="0.000520032">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should reject symbolic file links outside the workspace" time="0.000895517">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should reject non-existent symbolic file links outside the workspace" time="0.000324129">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should handle circular symlinks gracefully" time="0.000309673">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should call listener when adding a directory" time="0.001211551">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not call listener when adding a duplicate directory" time="0.000914812">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should call listener when setting different directories" time="0.00062175">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not call listener when setting same directories" time="0.000412233">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should support multiple listeners" time="0.000384361">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should allow unsubscribing a listener" time="0.000445544">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not fail if a listener throws an error" time="0.009778941">
            <system-err>
Error in WorkspaceContext listener: Error: test error
    at errorListener [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/workspaceContext.test.ts:350:15[90m)[39m
    at WorkspaceContext.notifyDirectoriesChanged [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/workspaceContext.ts:53:9[90m)[39m
    at WorkspaceContext.addDirectory [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/workspaceContext.ts:73:12[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/workspaceContext.test.ts:357:26
    at Proxy.assertThrows (file:///home/atmandk/LowCal-Code/node_modules/[4mchai[24m/chai.js:2723:5)
    at Proxy.methodWrapper (file:///home/atmandk/LowCal-Code/node_modules/[4mchai[24m/chai.js:1618:25)
    at Proxy.&lt;anonymous&gt; (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/expect[24m/dist/index.js:1088:12)
    at Proxy.overwritingMethodWrapper (file:///home/atmandk/LowCal-Code/node_modules/[4mchai[24m/chai.js:1670:33)
    at Proxy.&lt;anonymous&gt; (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/expect[24m/dist/index.js:1420:16)
    at Proxy.&lt;anonymous&gt; (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/expect[24m/dist/index.js:1029:14)

            </system-err>
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; getDirectories &gt; should return a copy of directories array" time="0.000822392">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with optional directories &gt; should skip a missing optional directory and log a warning" time="0.001555888">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with optional directories &gt; should include an existing optional directory" time="0.001092682">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/yaml-parser.test.ts" timestamp="2025-09-25T23:26:49.409Z" hostname="uby" tests="18" failures="0" errors="0" skipped="0" time="0.004709653">
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; parse &gt; should parse simple key-value pairs" time="0.001526434">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; parse &gt; should parse arrays" time="0.000172138">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; parse &gt; should parse nested objects" time="0.000114111">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; should stringify simple objects" time="0.000208956">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; should stringify arrays" time="0.000084466">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; should stringify nested objects" time="0.000060973">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should properly escape strings with quotes" time="0.000058338">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should properly escape strings with backslashes" time="0.000071222">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should properly escape strings with backslash-quote sequences" time="0.000099113">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should handle complex escaping scenarios" time="0.000200852">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should maintain round-trip integrity for escaped strings" time="0.000281631">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should not quote strings that do not need quoting" time="0.00005916">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should quote strings with colons" time="0.000039774">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should quote strings with hash symbols" time="0.000049382">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; string escaping security &gt; should quote strings with leading/trailing whitespace" time="0.000053008">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; numeric string handling &gt; should parse unquoted numeric values as numbers" time="0.000087522">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; numeric string handling &gt; should parse quoted numeric values as strings" time="0.000089736">
        </testcase>
        <testcase classname="src/utils/yaml-parser.test.ts" name="yaml-parser &gt; stringify &gt; numeric string handling &gt; should handle mixed numeric and string values" time="0.000090187">
        </testcase>
    </testsuite>
    <testsuite name="src/core/__tests__/openaiTimeoutHandling.test.ts" timestamp="2025-09-25T23:26:49.409Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.018777388">
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout error identification through actual requests &gt; should handle various timeout error formats correctly" time="0.007598868">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout error identification through actual requests &gt; should handle non-timeout errors without timeout messaging" time="0.002135321">
            <system-err>
OpenAI API Error: Invalid API key

OpenAI API Error: Rate limit exceeded

OpenAI API Error: Model not found

OpenAI API Error: Auth error

OpenAI API Error: API error

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContent timeout handling &gt; should handle timeout errors with helpful message" time="0.001662265">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContent timeout handling &gt; should handle non-timeout errors normally" time="0.000691509">
            <system-err>
OpenAI API Error: Invalid API key

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContent timeout handling &gt; should include troubleshooting tips for timeout errors" time="0.000801293">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContentStream timeout handling &gt; should handle streaming timeout errors" time="0.000873576">
            <system-err>
OpenAI API Streaming Error: Streaming request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; generateContentStream timeout handling &gt; should include streaming-specific troubleshooting tips" time="0.000757581">
            <system-err>
OpenAI API Streaming Error: Streaming request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout configuration &gt; should use default timeout configuration" time="0.000564284">
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout configuration &gt; should use custom timeout from config" time="0.000425077">
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; timeout configuration &gt; should handle missing timeout config gracefully" time="0.000479497">
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; token estimation on timeout &gt; should surface a clear timeout error when request times out" time="0.000615849">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
        <testcase classname="src/core/__tests__/openaiTimeoutHandling.test.ts" name="OpenAIContentGenerator Timeout Handling &gt; token estimation on timeout &gt; should fall back to character-based estimation if countTokens fails" time="0.000733237">
            <system-err>
OpenAI API Error: Request timeout after 0s. Try reducing input length or increasing timeout in config.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/converter.test.ts" timestamp="2025-09-25T23:26:49.410Z" hostname="uby" tests="3" failures="0" errors="0" skipped="0" time="0.003300396">
        <testcase classname="src/core/openaiContentGenerator/converter.test.ts" name="OpenAIContentConverter &gt; resetStreamingToolCalls &gt; should clear streaming tool calls accumulator" time="0.001751811">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/converter.test.ts" name="OpenAIContentConverter &gt; resetStreamingToolCalls &gt; should be safe to call multiple times" time="0.000170946">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/converter.test.ts" name="OpenAIContentConverter &gt; resetStreamingToolCalls &gt; should be safe to call on empty accumulator" time="0.000211811">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/errorHandler.test.ts" timestamp="2025-09-25T23:26:49.410Z" hostname="uby" tests="38" failures="0" errors="0" skipped="0" time="0.018330111">
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; constructor &gt; should create instance with default shouldSuppressLogging function" time="0.002269058">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; constructor &gt; should create instance with custom shouldSuppressLogging function" time="0.000301577">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should throw the original error for non-timeout errors" time="0.001016842">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should log error message for non-timeout errors" time="0.001562751">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should log streaming error message for streaming requests" time="0.000499795">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should throw enhanced error message for timeout errors" time="0.000401674">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should not log error when suppression is enabled" time="0.000919241">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should handle string errors" time="0.000344016">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; handle method &gt; should handle null/undefined errors" time="0.000598277">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; shouldSuppressErrorLogging method &gt; should return false by default" time="0.000306366">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; shouldSuppressErrorLogging method &gt; should use custom suppression function" time="0.000330131">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: timeout in message" time="0.000317397">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: timed out in message" time="0.001597375">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: connection timeout" time="0.000202174">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: request timeout" time="0.000122366">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: read timeout" time="0.000132325">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: etimedout" time="0.000143295">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: esockettimedout" time="0.000158754">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: deadline exceeded" time="0.000125633">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: ETIMEDOUT code" time="0.000150228">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: ESOCKETTIMEDOUT code" time="0.000133917">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should detect timeout error: timeout type" time="0.000149136">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should not detect non-timeout errors as timeout" time="0.00032954">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; timeout error detection &gt; should handle case-insensitive timeout detection" time="0.000246777">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should build timeout error message for non-streaming requests" time="0.000258238">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should build timeout error message for streaming requests" time="0.000337785">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should use original error message for non-timeout errors" time="0.000250333">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should handle non-Error objects" time="0.00020557">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should convert non-Error objects to strings for timeout errors" time="0.000324901">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; error message building &gt; should handle different duration values correctly" time="0.000238541">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; troubleshooting tips generation &gt; should provide general troubleshooting tips for non-streaming requests" time="0.000170886">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; troubleshooting tips generation &gt; should provide streaming-specific troubleshooting tips for streaming requests" time="0.000140981">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; ErrorHandler interface compliance &gt; should implement ErrorHandler interface correctly" time="0.00016209">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle zero duration" time="0.000200561">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle negative duration" time="0.000222772">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle very large duration" time="0.000175785">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle empty error message" time="0.000179382">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/errorHandler.test.ts" name="EnhancedErrorHandler &gt; edge cases &gt; should handle error with only whitespace message" time="0.000105325">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" timestamp="2025-09-25T23:26:49.411Z" hostname="uby" tests="8" failures="0" errors="0" skipped="0" time="0.007179732">
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; constructor &gt; should initialize with basic configuration" time="0.002111997">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; generateContent &gt; should delegate to pipeline.execute" time="0.000452286">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; generateContentStream &gt; should delegate to pipeline.executeStream" time="0.000652797">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; countTokens &gt; should count tokens using tiktoken" time="0.000895156">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; countTokens &gt; should fall back to character approximation if tiktoken fails" time="0.000706447">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; embedContent &gt; should delegate to pipeline.client.embeddings.create" time="0.000201031">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; shouldSuppressErrorLogging &gt; should return false by default" time="0.000450363">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/openaiContentGenerator.test.ts" name="OpenAIContentGenerator (Refactored) &gt; shouldSuppressErrorLogging &gt; should allow subclasses to override error suppression behavior" time="0.000475339">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/pipeline.test.ts" timestamp="2025-09-25T23:26:49.412Z" hostname="uby" tests="17" failures="0" errors="0" skipped="0" time="0.026901868">
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; constructor &gt; should initialize with correct configuration" time="0.002844843">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; execute &gt; should successfully execute non-streaming request" time="0.003035075">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; execute &gt; should handle tools in request" time="0.000900195">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; execute &gt; should handle errors and log them" time="0.002356279">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should successfully execute streaming request" time="0.003154186">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should filter empty responses" time="0.001467364">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should handle streaming errors and reset tool calls" time="0.001709944">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should merge finishReason and usageMetadata from separate chunks" time="0.001312228">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should handle ideal case where last chunk has both finishReason and usageMetadata" time="0.001469879">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should handle providers that send zero usage in finish chunk (like modelscope)" time="0.001175605">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; executeStream &gt; should handle providers that send finishReason and valid usage in same chunk" time="0.000952252">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; buildRequest &gt; should build request with sampling parameters" time="0.000738877">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; buildRequest &gt; should use config sampling parameters when request parameters are not provided" time="0.000737935">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; buildRequest &gt; should allow provider to enhance request" time="0.000788588">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; createRequestContext &gt; should create context with correct properties for non-streaming request" time="0.00066998">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; createRequestContext &gt; should create context with correct properties for streaming request" time="0.000766689">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/pipeline.test.ts" name="ContentGenerationPipeline &gt; createRequestContext &gt; should collect all OpenAI chunks for logging even when Gemini responses are filtered" time="0.001100836">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" timestamp="2025-09-25T23:26:49.412Z" hostname="uby" tests="51" failures="0" errors="0" skipped="0" time="0.017428101">
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Basic functionality &gt; should initialize with empty state" time="0.001716385">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Basic functionality &gt; should handle simple complete JSON in single chunk" time="0.00049221">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Basic functionality &gt; should accumulate chunks until complete JSON" time="0.000158724">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Basic functionality &gt; should handle empty chunks gracefully" time="0.00008678">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; JSON depth tracking &gt; should track nested objects correctly" time="0.000214236">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; JSON depth tracking &gt; should track nested arrays correctly" time="0.000202415">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; JSON depth tracking &gt; should handle mixed nested structures" time="0.000222261">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should handle strings with special characters" time="0.00011935">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should handle strings with braces and brackets" time="0.000118429">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should track string boundaries correctly across chunks" time="0.000130061">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should handle escaped quotes in strings" time="0.000131924">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; String handling &gt; should handle backslash escapes correctly" time="0.000099003">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Error handling and repair &gt; should return error for malformed JSON at depth 0" time="0.000236007">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Error handling and repair &gt; should auto-repair unclosed strings" time="0.001961269">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Error handling and repair &gt; should not attempt repair when still in nested structure" time="0.000148775">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Error handling and repair &gt; should handle repair failure gracefully" time="0.000128718">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Multiple tool calls &gt; should handle multiple tool calls with different indices" time="0.000220157">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Multiple tool calls &gt; should handle interleaved chunks from multiple tool calls" time="0.000186635">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Multiple tool calls &gt; should maintain separate state for each index" time="0.000159054">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call metadata handling &gt; should store and retrieve tool call metadata" time="0.000100696">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call metadata handling &gt; should handle metadata-only chunks" time="0.000109763">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call metadata handling &gt; should update metadata incrementally" time="0.000125803">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call metadata handling &gt; should detect new tool call with same index and reassign to new index" time="0.000274027">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should return completed tool calls" time="0.000278105">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should handle completed tool calls with repair" time="0.000295607">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should use safeJsonParse as fallback for malformed JSON" time="0.000523959">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should not return tool calls without function name" time="0.000166197">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Completed tool calls &gt; should not return tool calls with empty buffer" time="0.000118239">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle very large JSON objects" time="0.00086456">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle deeply nested structures" time="0.000856965">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle JSON with unicode characters" time="0.00016734">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle JSON with null and boolean values" time="0.000110424">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle JSON with numbers" time="0.000246896">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle whitespace-only chunks" time="0.00011312">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Edge cases &gt; should handle chunks with only structural characters" time="0.000083835">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Real-world streaming scenarios &gt; should handle typical OpenAI streaming pattern" time="0.000234183">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Real-world streaming scenarios &gt; should handle multiple concurrent tool calls streaming" time="0.000267084">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Real-world streaming scenarios &gt; should handle malformed streaming that gets repaired" time="0.000295627">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call ID collision detection and mapping &gt; should handle tool call ID reuse correctly" time="0.000176186">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call ID collision detection and mapping &gt; should detect index collision and find new index" time="0.00042735">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call ID collision detection and mapping &gt; should handle continuation chunks without ID correctly" time="0.000190713">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Tool call ID collision detection and mapping &gt; should find most recent incomplete tool call for continuation chunks" time="0.00024869">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Index management and reset functionality &gt; should reset individual index correctly" time="0.000305765">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Index management and reset functionality &gt; should find next available index when all lower indices are occupied" time="0.0002758">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Index management and reset functionality &gt; should reuse incomplete index when available" time="0.000105315">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Repair functionality and flags &gt; should test repair functionality in getCompletedToolCalls" time="0.000186035">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Repair functionality and flags &gt; should not set repaired flag for normal parsing" time="0.000878585">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Repair functionality and flags &gt; should not attempt repair when still in nested structure" time="0.000143886">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Repair functionality and flags &gt; should handle repair failure gracefully" time="0.000138426">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Complex collision scenarios &gt; should handle rapid tool call switching at same index" time="0.000234885">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/streamingToolCallParser.test.ts" name="StreamingToolCallParser &gt; Complex collision scenarios &gt; should handle interleaved chunks from multiple tool calls with ID mapping" time="0.000234794">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/telemetryService.test.ts" timestamp="2025-09-25T23:26:49.414Z" hostname="uby" tests="33" failures="0" errors="0" skipped="0" time="0.020703792">
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; constructor &gt; should create instance with default OpenAI logging disabled" time="0.001646616">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; constructor &gt; should create instance with OpenAI logging enabled when specified" time="0.000331654">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should log API response event with complete response data" time="0.003490307">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should handle response without responseId" time="0.000619395">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should handle response without usage metadata" time="0.000423914">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should not log OpenAI interaction when logging is disabled" time="0.001461864">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should log OpenAI interaction when logging is enabled" time="0.000583971">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logSuccess &gt; should not log OpenAI interaction when request or response is missing" time="0.000336933">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should log API error event with Error instance" time="0.000964555">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should handle error without requestID" time="0.000454782">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should handle non-Error objects" time="0.000332385">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should handle null/undefined errors" time="0.00034058">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should not log OpenAI interaction when logging is disabled" time="0.000276261">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should log OpenAI interaction when logging is enabled" time="0.00030855">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logError &gt; should not log OpenAI interaction when request is missing" time="0.000207614">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should log streaming success with multiple responses" time="0.00050267">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should handle empty responses array" time="0.000317557">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should handle responses without usage metadata" time="0.000286069">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should use the last response with usage metadata" time="0.000274808">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should not log OpenAI interaction when logging is disabled" time="0.000212704">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should log OpenAI interaction when logging is enabled" time="0.001210439">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; logStreamingSuccess &gt; should not log OpenAI interaction when request or chunks are missing" time="0.000379091">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; RequestContext interface &gt; should have all required properties" time="0.000384521">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; RequestContext interface &gt; should support streaming context" time="0.000213996">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should combine simple text chunks correctly" time="0.000430115">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should combine tool call chunks correctly" time="0.000418034">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should handle mixed content and tool calls" time="0.000319261">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should handle chunks with no content or tool calls" time="0.000280279">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should use default values when usage is missing" time="0.000338686">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should use default finish_reason when missing" time="0.000361229">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; combineOpenAIChunksForLogging &gt; should filter out empty tool calls" time="0.000354416">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; integration with telemetry events &gt; should create ApiResponseEvent with correct structure" time="0.000444612">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/telemetryService.test.ts" name="DefaultTelemetryService &gt; integration with telemetry events &gt; should create ApiErrorEvent with correct structure" time="0.000438872">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/token-storage/base-token-storage.test.ts" timestamp="2025-09-25T23:26:49.415Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.007551731">
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should validate valid credentials" time="0.003289536">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing server name" time="0.000416461">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing token" time="0.000212353">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing access token" time="0.000204268">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing token type" time="0.000343996">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return false for tokens without expiry" time="0.000257146">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return false for valid tokens" time="0.000134289">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return true for expired tokens" time="0.000121485">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should apply 5-minute buffer for expiry check" time="0.000554345">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should keep valid characters" time="0.000230968">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should replace invalid characters with underscore" time="0.000087301">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should handle special characters" time="0.000069007">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/clearcut-logger/clearcut-logger.test.ts" timestamp="2025-09-25T23:26:49.416Z" hostname="uby" tests="21" failures="0" errors="0" skipped="0" time="0.10037406">
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; returns an instance if usage statistics are enabled" time="0.011294745">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; returns an instance if usage statistics are enabled" time="0.013417763">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; is a singleton" time="0.001287371">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the total number of google accounts" time="0.001319471">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface from a github action" time="0.000854481">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs default metadata" time="0.001484195">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface" time="0.000680118">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;cursor&apos;, preempting vscode detection" time="0.000833331">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;vscode&apos;, preempting vscode detection" time="0.000576256">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;firebasestudio&apos;, preempting vscode detection" time="0.000947092">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;devin&apos;, preempting vscode detection" time="0.000765706">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;cloudshell&apos;, preempting vscode detection" time="0.00092988">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; logChatCompressionEvent &gt; logs an event with proper fields" time="0.001966198">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; enqueueLogEvent &gt; should add events to the queue" time="0.001003727">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; enqueueLogEvent &gt; should evict the oldest event when the queue is full" time="0.010558152">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; allows for usage with a configured proxy agent" time="0.01931351">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should clear events on successful flush" time="0.005992486">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should handle a network error and requeue events" time="0.004499924">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should handle an HTTP error and requeue events" time="0.005173841">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; requeueFailedEvents logic &gt; should limit the number of requeued events to max_retry_events" time="0.002170495">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; requeueFailedEvents logic &gt; should not requeue more events than available space in the queue" time="0.011331653">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/qwen-logger/qwen-logger.test.ts" timestamp="2025-09-25T23:26:49.416Z" hostname="uby" tests="16" failures="0" errors="0" skipped="0" time="0.019390522">
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; getInstance &gt; returns undefined when usage statistics are disabled" time="0.003328778">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; getInstance &gt; returns an instance when usage statistics are enabled" time="0.000904394">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; getInstance &gt; is a singleton" time="0.000501388">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event queue management &gt; should handle event overflow gracefully" time="0.002764644">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event queue management &gt; should handle enqueue errors gracefully" time="0.00115123">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; concurrent flush protection &gt; should handle concurrent flush requests" time="0.000649051">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; failed event retry mechanism &gt; should requeue failed events with size limits" time="0.001289967">
            <system-err>
QwenLogger: Dropping 50 events due to retry queue limit. Total events: 150, keeping: 100

            </system-err>
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; failed event retry mechanism &gt; should handle empty retry queue gracefully" time="0.000877474">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event handlers &gt; should log IDE connection events" time="0.001170335">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event handlers &gt; should log Kitty sequence overflow events" time="0.000672964">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event handlers &gt; should flush start session events immediately" time="0.000783921">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; event handlers &gt; should flush end session events immediately" time="0.000635836">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; flush timing &gt; should not flush if interval has not passed" time="0.000384602">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; flush timing &gt; should flush when interval has passed" time="0.000666252">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; error handling &gt; should handle flush errors gracefully with debug mode" time="0.001445714">
        </testcase>
        <testcase classname="src/telemetry/qwen-logger/qwen-logger.test.ts" name="QwenLogger &gt; constants export &gt; should export test constants" time="0.000339098">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/crawlCache.test.ts" timestamp="2025-09-25T23:26:49.417Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.008841957">
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a consistent hash" time="0.00146473">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different directories" time="0.000668136">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different ignore content" time="0.000128407">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different maxDepth values" time="0.000183539">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should write and read data from the cache" time="0.000709903">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should return undefined for a nonexistent key" time="0.000210429">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should clear the cache" time="0.000111937">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should automatically evict a cache entry after its TTL expires" time="0.003323489">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should reset the timer when an entry is updated" time="0.000675189">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/crawler.test.ts" timestamp="2025-09-25T23:26:49.417Z" hostname="uby" tests="18" failures="0" errors="0" skipped="0" time="0.051170425">
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should use .qwenignore rules" time="0.009064028">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should combine .gitignore and .qwenignore rules" time="0.003242328">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should use ignoreDirs option" time="0.002861534">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle negated directories" time="0.00264885">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle root-level file negation" time="0.001408506">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle directory negation with glob" time="0.001202455">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should correctly handle negated patterns in .gitignore" time="0.001306827">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should initialize correctly when ignore files are missing" time="0.000806782">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle empty or commented-only ignore files" time="0.00142706">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should always ignore the .git directory" time="0.00184863">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should hit the cache for subsequent crawls" time="0.004482803">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache when ignore rules change" time="0.003439904">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache after TTL expires" time="0.003179051">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache when maxDepth changes" time="0.001652958">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should only crawl top-level files when maxDepth is 0" time="0.00210253">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should crawl one level deep when maxDepth is 1" time="0.001896098">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should crawl two levels deep when maxDepth is 2" time="0.002481049">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should perform a full recursive crawl when maxDepth is undefined" time="0.004539538">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/fileSearch.test.ts" timestamp="2025-09-25T23:26:49.418Z" hostname="uby" tests="27" failures="0" errors="0" skipped="0" time="0.111951589">
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use .qwenignore rules" time="0.011218013">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should combine .gitignore and .qwenignore rules" time="0.007661333">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use ignoreDirs option" time="0.003347994">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle negated directories" time="0.004095386">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should filter results with a search pattern" time="0.007658068">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle root-level file negation" time="0.003035064">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle directory negation with glob" time="0.006511797">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should correctly handle negated patterns in .gitignore" time="0.002191715">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should initialize correctly when ignore files are missing" time="0.004174232">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should respect maxResults option in search" time="0.004855252">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use fzf for fuzzy matching when pattern does not contain wildcards" time="0.003592266">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should not use fzf for fuzzy matching when disableFuzzySearch is true" time="0.001975315">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use fzf for fuzzy matching when disableFuzzySearch is false" time="0.003608225">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should return empty array when no matches are found" time="0.001376206">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should throw AbortError when filter is aborted" time="0.004807453">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should throw an error if search is called before initialization" time="0.002978029">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle empty or commented-only ignore files" time="0.002840214">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should always ignore the .git directory" time="0.002399199">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should be cancellable via AbortSignal" time="0.012618494">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should leverage ResultCache for bestBaseQuery optimization" time="0.003224866">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should be case-insensitive by default" time="0.003192496">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should respect maxResults even when the cache returns an exact match" time="0.001970415">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle file paths with special characters that need escaping" time="0.001626809">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should search for files in the current directory" time="0.003947533">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should search for files in a subdirectory" time="0.002174032">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should list all files in a directory" time="0.001327826">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should respect ignore rules" time="0.001408145">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/ignore.test.ts" timestamp="2025-09-25T23:26:49.419Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.020357921">
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getDirectoryFilter &gt; should ignore directories matching directory patterns" time="0.002471562">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getDirectoryFilter &gt; should not ignore directories with file patterns" time="0.000523749">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getFileFilter &gt; should not ignore files with directory patterns" time="0.000205229">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getFileFilter &gt; should ignore files matching file patterns" time="0.000335541">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; should accumulate patterns across multiple add() calls" time="0.000296188">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; should return a stable and consistent fingerprint" time="0.000814447">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should load rules from .gitignore" time="0.002945499">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should load rules from .qwenignore" time="0.001758743">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should combine rules from .gitignore and .qwenignore" time="0.007949416">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should add ignoreDirs" time="0.000704674">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should handle missing ignore files gracefully" time="0.000523989">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should always add .git to the ignore list" time="0.000580564">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/result-cache.test.ts" timestamp="2025-09-25T23:26:49.420Z" hostname="uby" tests="3" failures="0" errors="0" skipped="0" time="0.004288654">
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache basic usage" time="0.002468496">
        </testcase>
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache cache hit/miss" time="0.000463517">
        </testcase>
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache best base query" time="0.000179372">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/request-tokenizer/imageTokenizer.test.ts" timestamp="2025-09-25T23:26:49.420Z" hostname="uby" tests="9" failures="0" errors="0" skipped="0" time="0.017696198">
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; token calculation &gt; should calculate tokens based on image dimensions with reference logic" time="0.001438912">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; token calculation &gt; should calculate tokens for larger images" time="0.000247047">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; token calculation &gt; should enforce minimum tokens per image with scaling" time="0.000109593">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; token calculation &gt; should handle very large images with scaling" time="0.000130321">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; PNG dimension extraction &gt; should extract dimensions from valid PNG" time="0.000515424">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; PNG dimension extraction &gt; should handle invalid PNG gracefully" time="0.008052867">
            <system-err>
Failed to extract image metadata: Error: Invalid PNG: buffer too short
    at ImageTokenizer.extractPngDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:131:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:91:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.test.ts:93:40
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:155:11
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:26
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:1574:12)

            </system-err>
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; batch processing &gt; should process multiple images serially" time="0.001165456">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; batch processing &gt; should handle mixed valid and invalid images" time="0.001040575">
            <system-err>
Failed to extract image metadata: Error: Invalid PNG: buffer too short
    at ImageTokenizer.extractPngDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:131:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:91:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at ImageTokenizer.calculateTokensBatch [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:320:37[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.test.ts:132:22
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/utils/request-tokenizer/imageTokenizer.test.ts" name="ImageTokenizer &gt; different image formats &gt; should handle different MIME types" time="0.003490558">
            <system-err>
Failed to extract image metadata: Error: Invalid JPEG signature
    at ImageTokenizer.extractJpegDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:159:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:95:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.test.ts:147:42
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Failed to extract image metadata: Error: Invalid WebP signature
    at ImageTokenizer.extractWebpDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:207:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:99:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.test.ts:147:42
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

Unsupported image format: image/gif

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/request-tokenizer/requestTokenizer.test.ts" timestamp="2025-09-25T23:26:49.420Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.528198827">
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; text token calculation &gt; should calculate tokens for simple text content" time="0.103254519">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; text token calculation &gt; should handle multiple text parts" time="0.077133205">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; text token calculation &gt; should handle string content" time="0.093409726">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; image token calculation &gt; should calculate tokens for image content" time="0.000917177">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; image token calculation &gt; should handle multiple images" time="0.00031876">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; mixed content &gt; should handle text and image content together" time="0.090521753">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; function content &gt; should handle function calls" time="0.087473334">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; empty content &gt; should handle empty request" time="0.000334709">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; empty content &gt; should handle undefined contents" time="0.000155829">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; configuration &gt; should use custom text encoding" time="0.066221859">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; configuration &gt; should process multiple images serially" time="0.000404959">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/requestTokenizer.test.ts" name="DefaultRequestTokenizer &gt; error handling &gt; should handle malformed image data gracefully" time="0.006159615">
            <system-err>
Failed to extract image metadata: Error: Invalid PNG: buffer too short
    at ImageTokenizer.extractPngDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:131:13[90m)[39m
    at ImageTokenizer.extractDimensions [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:91:19[90m)[39m
    at ImageTokenizer.extractImageMetadata [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:59:37[90m)[39m
    at ImageTokenizer.calculateTokensBatch [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/imageTokenizer.ts:320:37[90m)[39m
    at DefaultRequestTokenizer.calculateImageTokens [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/requestTokenizer.ts:136:35[90m)[39m
    at DefaultRequestTokenizer.calculateTokens [90m(/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/requestTokenizer.ts:72:38[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/home/atmandk/LowCal-Code/packages/core/[39msrc/utils/request-tokenizer/requestTokenizer.test.ts:287:22
    at file:///home/atmandk/LowCal-Code/node_modules/[4m@vitest/runner[24m/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/request-tokenizer/textTokenizer.test.ts" timestamp="2025-09-25T23:26:49.421Z" hostname="uby" tests="28" failures="0" errors="0" skipped="0" time="0.015327044">
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; constructor &gt; should create tokenizer with default encoding" time="0.002207965">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; constructor &gt; should create tokenizer with custom encoding" time="0.000285849">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should return 0 for empty text" time="0.00037301">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should return 0 for null/undefined text" time="0.000249802">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should calculate tokens using tiktoken when available" time="0.001559916">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should use fallback calculation when tiktoken fails to load" time="0.001221579">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should use fallback calculation when encoding fails" time="0.000393298">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should handle very long text" time="0.000209588">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should handle unicode characters" time="0.000195862">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokens &gt; should use custom encoding when specified" time="0.00024862">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should process multiple texts and return token counts" time="0.000514442">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should handle empty array" time="0.000235586">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should handle array with empty strings" time="0.001511236">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should use fallback calculation when tiktoken fails to load" time="0.000649842">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should use fallback calculation when encoding fails during batch processing" time="0.000374152">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; calculateTokensBatch &gt; should handle null and undefined values in batch" time="0.000185733">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should free tiktoken encoding when disposing" time="0.000316506">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should handle disposal when encoding is not initialized" time="0.000959415">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should handle disposal when encoding is null" time="0.00030835">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should handle errors during disposal gracefully" time="0.000327155">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; dispose &gt; should allow multiple calls to dispose" time="0.000178671">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; lazy initialization &gt; should not initialize tiktoken until first use" time="0.000128958">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; lazy initialization &gt; should initialize tiktoken on first calculateTokens call" time="0.000145229">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; lazy initialization &gt; should not reinitialize tiktoken on subsequent calls" time="0.000158743">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; lazy initialization &gt; should initialize tiktoken on first calculateTokensBatch call" time="0.000159525">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; edge cases &gt; should handle very short text" time="0.000362831">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; edge cases &gt; should handle text with only whitespace" time="0.000190312">
        </testcase>
        <testcase classname="src/utils/request-tokenizer/textTokenizer.test.ts" name="TextTokenizer &gt; edge cases &gt; should handle special characters and symbols" time="0.000127406">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/provider/dashscope.test.ts" timestamp="2025-09-25T23:26:49.422Z" hostname="uby" tests="33" failures="0" errors="0" skipped="0" time="0.017185973">
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; constructor &gt; should initialize with provided configs" time="0.001879627">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; isDashScopeProvider &gt; should return true for QWEN_OAUTH auth type" time="0.000417071">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; isDashScopeProvider &gt; should return true for DashScope domestic URL" time="0.000227982">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; isDashScopeProvider &gt; should return true for DashScope international URL" time="0.000202795">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; isDashScopeProvider &gt; should return false for non-DashScope configurations" time="0.000242138">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildHeaders &gt; should build DashScope-specific headers" time="0.001092792">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildHeaders &gt; should handle unknown CLI version" time="0.000268768">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildClient &gt; should create OpenAI client with DashScope configuration" time="0.001597696">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildClient &gt; should use default timeout and maxRetries when not provided" time="0.000728648">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildMetadata &gt; should build metadata with session and prompt IDs" time="0.000302249">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildMetadata &gt; should handle missing session ID" time="0.000214457">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should add cache control to system message only for non-streaming requests" time="0.001037079">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should add cache control to both system and last messages for streaming requests" time="0.000402935">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should include metadata in the request" time="0.000208455">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should preserve all original request parameters" time="0.000689816">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should skip cache control when disabled" time="0.000288053">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should handle messages with array content for streaming requests" time="0.000423283">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should handle empty messages array" time="0.00023752">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should handle messages without content for streaming requests" time="0.000267615">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should add cache control to last text item in mixed content for streaming requests" time="0.000430176">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; buildRequest &gt; should add empty text item with cache control if last item is not text for streaming requests" time="0.000434353">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; cache control edge cases &gt; should handle request with only system message" time="0.000545539">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; cache control edge cases &gt; should handle request without system message for streaming requests" time="0.000504904">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; cache control edge cases &gt; should handle empty content array for streaming requests" time="0.000250333">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should limit max_tokens when it exceeds model limit for qwen3-coder-plus" time="0.000330101">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should limit max_tokens when it exceeds model limit for qwen-vl-max-latest" time="0.000252647">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should not modify max_tokens when it is within model limit" time="0.000203446">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should not add max_tokens when not present in request" time="0.000206933">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should handle null max_tokens parameter" time="0.000181155">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should use default output limit for unknown models" time="0.000250673">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should preserve other request parameters when limiting max_tokens" time="0.000435777">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should work with vision models and output token limits" time="0.000261333">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/dashscope.test.ts" name="DashScopeOpenAICompatibleProvider &gt; output token limits &gt; should handle streaming requests with output token limits" time="0.000256585">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/provider/default.test.ts" timestamp="2025-09-25T23:26:49.423Z" hostname="uby" tests="11" failures="0" errors="0" skipped="0" time="0.008348424">
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; constructor &gt; should initialize with provided configs" time="0.001198528">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildHeaders &gt; should build headers with User-Agent" time="0.000960036">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildHeaders &gt; should handle unknown CLI version" time="0.000238641">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildClient &gt; should create OpenAI client with correct configuration" time="0.001184531">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildClient &gt; should use default timeout and maxRetries when not provided" time="0.000253429">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildClient &gt; should include custom headers from buildHeaders" time="0.001698773">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should pass through all request parameters unchanged" time="0.000464349">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should preserve all sampling parameters" time="0.000360276">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should handle minimal request parameters" time="0.000252507">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should handle streaming requests" time="0.000187407">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/default.test.ts" name="DefaultOpenAICompatibleProvider &gt; buildRequest &gt; should not modify the original request object" time="0.000208105">
        </testcase>
    </testsuite>
    <testsuite name="src/core/openaiContentGenerator/provider/openrouter.test.ts" timestamp="2025-09-25T23:26:49.423Z" hostname="uby" tests="12" failures="0" errors="0" skipped="0" time="0.01207024">
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; constructor &gt; should extend DefaultOpenAICompatibleProvider" time="0.002711216">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; isOpenRouterProvider &gt; should return true for openrouter.ai URLs" time="0.000506036">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; isOpenRouterProvider &gt; should return false for non-openrouter URLs" time="0.000296378">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; isOpenRouterProvider &gt; should handle missing baseUrl gracefully" time="0.000141732">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should include base headers from parent class" time="0.000354206">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should add OpenRouter-specific headers" time="0.000764354">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should override parent headers if there are conflicts" time="0.000416551">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildHeaders &gt; should handle unknown CLI version from parent" time="0.00027058">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildClient &gt; should inherit buildClient behavior from parent" time="0.002459309">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; buildRequest &gt; should inherit buildRequest behavior from parent" time="0.001322677">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; integration with parent class &gt; should properly call parent constructor" time="0.000646476">
        </testcase>
        <testcase classname="src/core/openaiContentGenerator/provider/openrouter.test.ts" name="OpenRouterOpenAICompatibleProvider &gt; integration with parent class &gt; should maintain parent functionality while adding OpenRouter specifics" time="0.000223033">
        </testcase>
    </testsuite>
</testsuites>
